"use strict";
/**
 * Myou Engine
 *
 * Copyright (c) 2016 by Alberto Torres Ruiz <kungfoobar@gmail.com>
 * Copyright (c) 2016 by Julio Manuel LÃ³pez Tercero <julio@pixelements.net>
 *
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["myou"] = factory();
	else
		root["myou"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	var GLRay, LogicBlock, Myou, actuators, create_canvas, glm, mat2, mat3, mat4, particles, physics, quat, ref, ref1, sensors, vec2, vec3, vec4;
	
	__webpack_require__(2);
	
	ref = __webpack_require__(6), Myou = ref.Myou, create_canvas = ref.create_canvas;
	
	physics = __webpack_require__(24);
	
	particles = __webpack_require__(38);
	
	GLRay = __webpack_require__(39).GLRay;
	
	LogicBlock = __webpack_require__(40).LogicBlock;
	
	glm = (ref1 = __webpack_require__(8), mat2 = ref1.mat2, mat3 = ref1.mat3, mat4 = ref1.mat4, vec2 = ref1.vec2, vec3 = ref1.vec3, vec4 = ref1.vec4, quat = ref1.quat, ref1);
	
	sensors = __webpack_require__(41);
	
	actuators = __webpack_require__(42);
	
	module.exports = {
	  Myou: Myou,
	  create_canvas: create_canvas,
	  LogicBlock: LogicBlock,
	  sensors: sensors,
	  actuators: actuators,
	  glm: glm,
	  physics: physics,
	  particles: particles,
	  GLRay: GLRay
	};


/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	var eproto;
	
	__webpack_require__(3);
	
	window.requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;
	
	window.cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;
	
	eproto = HTMLElement.prototype;
	
	eproto.requestPointerLock = eproto.requestPointerLock || eproto.mozRequestPointerLock || eproto.webkitRequestPointerLock;
	
	eproto.requestFullscreen = eproto.requestFullscreen || eproto.mozRequestFullScreen || eproto.webkitRequestFullscreen || eproto.msRequestFullScreen;
	
	document.exitPointerLock = document.exitPointerLock || document.mozExitPointerLock || document.webkitExitPointerLock;
	
	document.exitFullscreen = document.exitFullscreen || document.mozCancelFullScreen || document.webkitExitFullscreen || document.msExitFullScreen;
	
	if (!window.performance) {
	  window.performance = Date;
	}
	
	window.is_64_bit_os = /x86_64|x86-64|Win64|x64;|amd64|AMD64|WOW64|x64_64/.test(navigator.userAgent);


/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	var TimSort, base, base1, base2;
	
	TimSort = __webpack_require__(4);
	
	window.PI_2 = Math.PI * 2;
	
	window.closest_pow2 = function(n) {
	  return Math.pow(2, Math.round(Math.log(n) / Math.log(2)));
	};
	
	window.interpolate = function(t, p0, p1, p2, p3) {
	  var c0, c1, c2, c3, t2, t3;
	  t2 = t * t;
	  t3 = t2 * t;
	  c0 = p0;
	  c1 = -3.0 * p0 + 3.0 * p1;
	  c2 = 3.0 * p0 - 6.0 * p1 + 3.0 * p2;
	  c3 = -p0 + 3.0 * p1 - 3.0 * p2 + p3;
	  return c0 + t * c1 + t2 * c2 + t3 * c3;
	};
	
	window.timsort_sqdist = function(arr) {
	  return TimSort.sort(arr, function(a, b) {
	    return a._sqdist - b._sqdist;
	  });
	};
	
	window.timsort_numeric = TimSort.sort;
	
	window.randInt = function(min, max) {
	  var rand, range;
	  range = max - min;
	  rand = Math.floor(Math.random() * (range + 1));
	  return min + rand;
	};
	
	if ((base = String.prototype).startswith == null) {
	  base.startswith = function(s) {
	    return this.slice(0, s.length) === s;
	  };
	}
	
	if ((base1 = String.prototype).endswith == null) {
	  base1.endswith = function(s) {
	    return s === '' || this.slice(-s.length) === s;
	  };
	}
	
	if ((base2 = Array.prototype).append == null) {
	  base2.append = Array.prototype.push;
	}
	
	window.reversed = function(x) {
	  var i, l, result;
	  result = [];
	  l = x.length;
	  i = 0;
	  while (i < l) {
	    result.push(x[l - i - 1]);
	    i += 1;
	  }
	  return result;
	};
	
	Object.defineProperty(Array.prototype, 'insert', {
	  value: function(index, item) {
	    return this.splice(index, 0, item);
	  }
	});
	
	Object.defineProperty(Array.prototype, 'extend', {
	  value: function(items) {
	    var item, j, len;
	    for (j = 0, len = items.length; j < len; j++) {
	      item = items[j];
	      this.append(item);
	    }
	  }
	});
	
	Object.defineProperty(Array.prototype, 'remove', {
	  value: function(i) {
	    i = this.indexOf(i);
	    if (i !== -1) {
	      return this.splice(i, 1);
	    }
	  }
	});
	
	Object.defineProperty(Array.prototype, 'clear', {
	  value: function() {
	    return this.splice(0);
	  }
	});
	
	window.range = function(start, stop, step) {
	  var i, r;
	  if (step == null) {
	    step = 1;
	  }
	  if (stop == null) {
	    stop = start;
	    start = 0;
	  }
	  r = [];
	  i = start;
	  while (i < stop) {
	    r.push(i);
	    i += step;
	  }
	  return r;
	};


/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(5);

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/****
	 * The MIT License
	 *
	 * Copyright (c) 2015 Marco Ziccardi
	 *
	 * Permission is hereby granted, free of charge, to any person obtaining a copy
	 * of this software and associated documentation files (the "Software"), to deal
	 * in the Software without restriction, including without limitation the rights
	 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	 * copies of the Software, and to permit persons to whom the Software is
	 * furnished to do so, subject to the following conditions:
	 *
	 * The above copyright notice and this permission notice shall be included in
	 * all copies or substantial portions of the Software.
	 *
	 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	 * THE SOFTWARE.
	 *
	 ****/
	(function (global, factory) {
	  if (true) {
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if (typeof exports !== 'undefined') {
	    factory(exports);
	  } else {
	    var mod = {
	      exports: {}
	    };
	    factory(mod.exports);
	    global.timsort = mod.exports;
	  }
	})(this, function (exports) {
	  'use strict';
	
	  exports.__esModule = true;
	  exports.sort = sort;
	
	  function _classCallCheck(instance, Constructor) {
	    if (!(instance instanceof Constructor)) {
	      throw new TypeError('Cannot call a class as a function');
	    }
	  }
	
	  var DEFAULT_MIN_MERGE = 32;
	
	  var DEFAULT_MIN_GALLOPING = 7;
	
	  var DEFAULT_TMP_STORAGE_LENGTH = 256;
	
	  function alphabeticalCompare(a, b) {
	    if (a === b) {
	      return 0;
	    } else {
	      var aStr = String(a);
	      var bStr = String(b);
	
	      if (aStr === bStr) {
	        return 0;
	      } else {
	        return aStr < bStr ? -1 : 1;
	      }
	    }
	  }
	
	  function minRunLength(n) {
	    var r = 0;
	
	    while (n >= DEFAULT_MIN_MERGE) {
	      r |= n & 1;
	      n >>= 1;
	    }
	
	    return n + r;
	  }
	
	  function makeAscendingRun(array, lo, hi, compare) {
	    var runHi = lo + 1;
	
	    if (runHi === hi) {
	      return 1;
	    }
	
	    if (compare(array[runHi++], array[lo]) < 0) {
	      while (runHi < hi && compare(array[runHi], array[runHi - 1]) < 0) {
	        runHi++;
	      }
	
	      reverseRun(array, lo, runHi);
	    } else {
	      while (runHi < hi && compare(array[runHi], array[runHi - 1]) >= 0) {
	        runHi++;
	      }
	    }
	
	    return runHi - lo;
	  }
	
	  function reverseRun(array, lo, hi) {
	    hi--;
	
	    while (lo < hi) {
	      var t = array[lo];
	      array[lo++] = array[hi];
	      array[hi--] = t;
	    }
	  }
	
	  function binaryInsertionSort(array, lo, hi, start, compare) {
	    if (start === lo) {
	      start++;
	    }
	
	    for (; start < hi; start++) {
	      var pivot = array[start];
	
	      var left = lo;
	      var right = start;
	
	      while (left < right) {
	        var mid = left + right >>> 1;
	
	        if (compare(pivot, array[mid]) < 0) {
	          right = mid;
	        } else {
	          left = mid + 1;
	        }
	      }
	
	      var n = start - left;
	
	      switch (n) {
	        case 3:
	          array[left + 3] = array[left + 2];
	
	        case 2:
	          array[left + 2] = array[left + 1];
	
	        case 1:
	          array[left + 1] = array[left];
	          break;
	        default:
	          while (n > 0) {
	            array[left + n] = array[left + n - 1];
	            n--;
	          }
	      }
	
	      array[left] = pivot;
	    }
	  }
	
	  function gallopLeft(value, array, start, length, hint, compare) {
	    var lastOffset = 0;
	    var maxOffset = 0;
	    var offset = 1;
	
	    if (compare(value, array[start + hint]) > 0) {
	      maxOffset = length - hint;
	
	      while (offset < maxOffset && compare(value, array[start + hint + offset]) > 0) {
	        lastOffset = offset;
	        offset = (offset << 1) + 1;
	
	        if (offset <= 0) {
	          offset = maxOffset;
	        }
	      }
	
	      if (offset > maxOffset) {
	        offset = maxOffset;
	      }
	
	      lastOffset += hint;
	      offset += hint;
	    } else {
	      maxOffset = hint + 1;
	      while (offset < maxOffset && compare(value, array[start + hint - offset]) <= 0) {
	        lastOffset = offset;
	        offset = (offset << 1) + 1;
	
	        if (offset <= 0) {
	          offset = maxOffset;
	        }
	      }
	      if (offset > maxOffset) {
	        offset = maxOffset;
	      }
	
	      var tmp = lastOffset;
	      lastOffset = hint - offset;
	      offset = hint - tmp;
	    }
	
	    lastOffset++;
	    while (lastOffset < offset) {
	      var m = lastOffset + (offset - lastOffset >>> 1);
	
	      if (compare(value, array[start + m]) > 0) {
	        lastOffset = m + 1;
	      } else {
	        offset = m;
	      }
	    }
	    return offset;
	  }
	
	  function gallopRight(value, array, start, length, hint, compare) {
	    var lastOffset = 0;
	    var maxOffset = 0;
	    var offset = 1;
	
	    if (compare(value, array[start + hint]) < 0) {
	      maxOffset = hint + 1;
	
	      while (offset < maxOffset && compare(value, array[start + hint - offset]) < 0) {
	        lastOffset = offset;
	        offset = (offset << 1) + 1;
	
	        if (offset <= 0) {
	          offset = maxOffset;
	        }
	      }
	
	      if (offset > maxOffset) {
	        offset = maxOffset;
	      }
	
	      var tmp = lastOffset;
	      lastOffset = hint - offset;
	      offset = hint - tmp;
	    } else {
	      maxOffset = length - hint;
	
	      while (offset < maxOffset && compare(value, array[start + hint + offset]) >= 0) {
	        lastOffset = offset;
	        offset = (offset << 1) + 1;
	
	        if (offset <= 0) {
	          offset = maxOffset;
	        }
	      }
	
	      if (offset > maxOffset) {
	        offset = maxOffset;
	      }
	
	      lastOffset += hint;
	      offset += hint;
	    }
	
	    lastOffset++;
	
	    while (lastOffset < offset) {
	      var m = lastOffset + (offset - lastOffset >>> 1);
	
	      if (compare(value, array[start + m]) < 0) {
	        offset = m;
	      } else {
	        lastOffset = m + 1;
	      }
	    }
	
	    return offset;
	  }
	
	  var TimSort = (function () {
	    function TimSort(array, compare) {
	      _classCallCheck(this, TimSort);
	
	      this.array = null;
	      this.compare = null;
	      this.minGallop = DEFAULT_MIN_GALLOPING;
	      this.length = 0;
	      this.tmpStorageLength = DEFAULT_TMP_STORAGE_LENGTH;
	      this.stackLength = 0;
	      this.runStart = null;
	      this.runLength = null;
	      this.stackSize = 0;
	
	      this.array = array;
	      this.compare = compare;
	
	      this.length = array.length;
	
	      if (this.length < 2 * DEFAULT_TMP_STORAGE_LENGTH) {
	        this.tmpStorageLength = this.length >>> 1;
	      }
	
	      this.tmp = new Array(this.tmpStorageLength);
	
	      this.stackLength = this.length < 120 ? 5 : this.length < 1542 ? 10 : this.length < 119151 ? 19 : 40;
	
	      this.runStart = new Array(this.stackLength);
	      this.runLength = new Array(this.stackLength);
	    }
	
	    TimSort.prototype.pushRun = function pushRun(runStart, runLength) {
	      this.runStart[this.stackSize] = runStart;
	      this.runLength[this.stackSize] = runLength;
	      this.stackSize += 1;
	    };
	
	    TimSort.prototype.mergeRuns = function mergeRuns() {
	      while (this.stackSize > 1) {
	        var n = this.stackSize - 2;
	
	        if (n >= 1 && this.runLength[n - 1] <= this.runLength[n] + this.runLength[n + 1] || n >= 2 && this.runLength[n - 2] <= this.runLength[n] + this.runLength[n - 1]) {
	
	          if (this.runLength[n - 1] < this.runLength[n + 1]) {
	            n--;
	          }
	        } else if (this.runLength[n] > this.runLength[n + 1]) {
	          break;
	        }
	        this.mergeAt(n);
	      }
	    };
	
	    TimSort.prototype.forceMergeRuns = function forceMergeRuns() {
	      while (this.stackSize > 1) {
	        var n = this.stackSize - 2;
	
	        if (n > 0 && this.runLength[n - 1] < this.runLength[n + 1]) {
	          n--;
	        }
	
	        this.mergeAt(n);
	      }
	    };
	
	    TimSort.prototype.mergeAt = function mergeAt(i) {
	      var compare = this.compare;
	      var array = this.array;
	
	      var start1 = this.runStart[i];
	      var length1 = this.runLength[i];
	      var start2 = this.runStart[i + 1];
	      var length2 = this.runLength[i + 1];
	
	      this.runLength[i] = length1 + length2;
	
	      if (i === this.stackSize - 3) {
	        this.runStart[i + 1] = this.runStart[i + 2];
	        this.runLength[i + 1] = this.runLength[i + 2];
	      }
	
	      this.stackSize--;
	
	      var k = gallopRight(array[start2], array, start1, length1, 0, compare);
	      start1 += k;
	      length1 -= k;
	
	      if (length1 === 0) {
	        return;
	      }
	
	      length2 = gallopLeft(array[start1 + length1 - 1], array, start2, length2, length2 - 1, compare);
	
	      if (length2 === 0) {
	        return;
	      }
	
	      if (length1 <= length2) {
	        this.mergeLow(start1, length1, start2, length2);
	      } else {
	        this.mergeHigh(start1, length1, start2, length2);
	      }
	    };
	
	    TimSort.prototype.mergeLow = function mergeLow(start1, length1, start2, length2) {
	
	      var compare = this.compare;
	      var array = this.array;
	      var tmp = this.tmp;
	      var i = 0;
	
	      for (i = 0; i < length1; i++) {
	        tmp[i] = array[start1 + i];
	      }
	
	      var cursor1 = 0;
	      var cursor2 = start2;
	      var dest = start1;
	
	      array[dest++] = array[cursor2++];
	
	      if (--length2 === 0) {
	        for (i = 0; i < length1; i++) {
	          array[dest + i] = tmp[cursor1 + i];
	        }
	        return;
	      }
	
	      if (length1 === 1) {
	        for (i = 0; i < length2; i++) {
	          array[dest + i] = array[cursor2 + i];
	        }
	        array[dest + length2] = tmp[cursor1];
	        return;
	      }
	
	      var minGallop = this.minGallop;
	
	      while (true) {
	        var count1 = 0;
	        var count2 = 0;
	        var exit = false;
	
	        do {
	          if (compare(array[cursor2], tmp[cursor1]) < 0) {
	            array[dest++] = array[cursor2++];
	            count2++;
	            count1 = 0;
	
	            if (--length2 === 0) {
	              exit = true;
	              break;
	            }
	          } else {
	            array[dest++] = tmp[cursor1++];
	            count1++;
	            count2 = 0;
	            if (--length1 === 1) {
	              exit = true;
	              break;
	            }
	          }
	        } while ((count1 | count2) < minGallop);
	
	        if (exit) {
	          break;
	        }
	
	        do {
	          count1 = gallopRight(array[cursor2], tmp, cursor1, length1, 0, compare);
	
	          if (count1 !== 0) {
	            for (i = 0; i < count1; i++) {
	              array[dest + i] = tmp[cursor1 + i];
	            }
	
	            dest += count1;
	            cursor1 += count1;
	            length1 -= count1;
	            if (length1 <= 1) {
	              exit = true;
	              break;
	            }
	          }
	
	          array[dest++] = array[cursor2++];
	
	          if (--length2 === 0) {
	            exit = true;
	            break;
	          }
	
	          count2 = gallopLeft(tmp[cursor1], array, cursor2, length2, 0, compare);
	
	          if (count2 !== 0) {
	            for (i = 0; i < count2; i++) {
	              array[dest + i] = array[cursor2 + i];
	            }
	
	            dest += count2;
	            cursor2 += count2;
	            length2 -= count2;
	
	            if (length2 === 0) {
	              exit = true;
	              break;
	            }
	          }
	          array[dest++] = tmp[cursor1++];
	
	          if (--length1 === 1) {
	            exit = true;
	            break;
	          }
	
	          minGallop--;
	        } while (count1 >= DEFAULT_MIN_GALLOPING || count2 >= DEFAULT_MIN_GALLOPING);
	
	        if (exit) {
	          break;
	        }
	
	        if (minGallop < 0) {
	          minGallop = 0;
	        }
	
	        minGallop += 2;
	      }
	
	      this.minGallop = minGallop;
	
	      if (minGallop < 1) {
	        this.minGallop = 1;
	      }
	
	      if (length1 === 1) {
	        for (i = 0; i < length2; i++) {
	          array[dest + i] = array[cursor2 + i];
	        }
	        array[dest + length2] = tmp[cursor1];
	      } else if (length1 === 0) {
	        throw new Error('mergeLow preconditions were not respected');
	      } else {
	        for (i = 0; i < length1; i++) {
	          array[dest + i] = tmp[cursor1 + i];
	        }
	      }
	    };
	
	    TimSort.prototype.mergeHigh = function mergeHigh(start1, length1, start2, length2) {
	      var compare = this.compare;
	      var array = this.array;
	      var tmp = this.tmp;
	      var i = 0;
	
	      for (i = 0; i < length2; i++) {
	        tmp[i] = array[start2 + i];
	      }
	
	      var cursor1 = start1 + length1 - 1;
	      var cursor2 = length2 - 1;
	      var dest = start2 + length2 - 1;
	      var customCursor = 0;
	      var customDest = 0;
	
	      array[dest--] = array[cursor1--];
	
	      if (--length1 === 0) {
	        customCursor = dest - (length2 - 1);
	
	        for (i = 0; i < length2; i++) {
	          array[customCursor + i] = tmp[i];
	        }
	
	        return;
	      }
	
	      if (length2 === 1) {
	        dest -= length1;
	        cursor1 -= length1;
	        customDest = dest + 1;
	        customCursor = cursor1 + 1;
	
	        for (i = length1 - 1; i >= 0; i--) {
	          array[customDest + i] = array[customCursor + i];
	        }
	
	        array[dest] = tmp[cursor2];
	        return;
	      }
	
	      var minGallop = this.minGallop;
	
	      while (true) {
	        var count1 = 0;
	        var count2 = 0;
	        var exit = false;
	
	        do {
	          if (compare(tmp[cursor2], array[cursor1]) < 0) {
	            array[dest--] = array[cursor1--];
	            count1++;
	            count2 = 0;
	            if (--length1 === 0) {
	              exit = true;
	              break;
	            }
	          } else {
	            array[dest--] = tmp[cursor2--];
	            count2++;
	            count1 = 0;
	            if (--length2 === 1) {
	              exit = true;
	              break;
	            }
	          }
	        } while ((count1 | count2) < minGallop);
	
	        if (exit) {
	          break;
	        }
	
	        do {
	          count1 = length1 - gallopRight(tmp[cursor2], array, start1, length1, length1 - 1, compare);
	
	          if (count1 !== 0) {
	            dest -= count1;
	            cursor1 -= count1;
	            length1 -= count1;
	            customDest = dest + 1;
	            customCursor = cursor1 + 1;
	
	            for (i = count1 - 1; i >= 0; i--) {
	              array[customDest + i] = array[customCursor + i];
	            }
	
	            if (length1 === 0) {
	              exit = true;
	              break;
	            }
	          }
	
	          array[dest--] = tmp[cursor2--];
	
	          if (--length2 === 1) {
	            exit = true;
	            break;
	          }
	
	          count2 = length2 - gallopLeft(array[cursor1], tmp, 0, length2, length2 - 1, compare);
	
	          if (count2 !== 0) {
	            dest -= count2;
	            cursor2 -= count2;
	            length2 -= count2;
	            customDest = dest + 1;
	            customCursor = cursor2 + 1;
	
	            for (i = 0; i < count2; i++) {
	              array[customDest + i] = tmp[customCursor + i];
	            }
	
	            if (length2 <= 1) {
	              exit = true;
	              break;
	            }
	          }
	
	          array[dest--] = array[cursor1--];
	
	          if (--length1 === 0) {
	            exit = true;
	            break;
	          }
	
	          minGallop--;
	        } while (count1 >= DEFAULT_MIN_GALLOPING || count2 >= DEFAULT_MIN_GALLOPING);
	
	        if (exit) {
	          break;
	        }
	
	        if (minGallop < 0) {
	          minGallop = 0;
	        }
	
	        minGallop += 2;
	      }
	
	      this.minGallop = minGallop;
	
	      if (minGallop < 1) {
	        this.minGallop = 1;
	      }
	
	      if (length2 === 1) {
	        dest -= length1;
	        cursor1 -= length1;
	        customDest = dest + 1;
	        customCursor = cursor1 + 1;
	
	        for (i = length1 - 1; i >= 0; i--) {
	          array[customDest + i] = array[customCursor + i];
	        }
	
	        array[dest] = tmp[cursor2];
	      } else if (length2 === 0) {
	        throw new Error('mergeHigh preconditions were not respected');
	      } else {
	        customCursor = dest - (length2 - 1);
	        for (i = 0; i < length2; i++) {
	          array[customCursor + i] = tmp[i];
	        }
	      }
	    };
	
	    return TimSort;
	  })();
	
	  function sort(array, compare, lo, hi) {
	    if (!Array.isArray(array)) {
	      throw new TypeError('Can only sort arrays');
	    }
	
	    if (!compare) {
	      compare = alphabeticalCompare;
	    } else if (typeof compare !== 'function') {
	      hi = lo;
	      lo = compare;
	      compare = alphabeticalCompare;
	    }
	
	    if (!lo) {
	      lo = 0;
	    }
	    if (!hi) {
	      hi = array.length;
	    }
	
	    var remaining = hi - lo;
	
	    if (remaining < 2) {
	      return;
	    }
	
	    var runLength = 0;
	
	    if (remaining < DEFAULT_MIN_MERGE) {
	      runLength = makeAscendingRun(array, lo, hi, compare);
	      binaryInsertionSort(array, lo, hi, lo + runLength, compare);
	      return;
	    }
	
	    var ts = new TimSort(array, compare);
	
	    var minRun = minRunLength(remaining);
	
	    do {
	      runLength = makeAscendingRun(array, lo, hi, compare);
	      if (runLength < minRun) {
	        var force = remaining;
	        if (force > minRun) {
	          force = minRun;
	        }
	
	        binaryInsertionSort(array, lo, lo + force, lo + runLength, compare);
	        runLength = force;
	      }
	
	      ts.pushRun(lo, runLength);
	      ts.mergeRuns();
	
	      remaining -= runLength;
	      lo += runLength;
	    } while (remaining !== 0);
	
	    ts.forceMergeRuns();
	  }
	});


/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	var Events, MainLoop, Myou, RenderManager, XhrLoader, create_canvas,
	  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };
	
	RenderManager = __webpack_require__(7).RenderManager;
	
	XhrLoader = __webpack_require__(25).XhrLoader;
	
	Events = __webpack_require__(36).Events;
	
	MainLoop = __webpack_require__(37).MainLoop;
	
	Myou = (function() {
	  function Myou(root, MYOU_PARAMS) {
	    this.update_canvas_rect = bind(this.update_canvas_rect, this);
	    var canvas, data_dir, initial_scene, loader, render_manager, resize_canvas, size;
	    this.scenes = {};
	    this.loaded_scenes = [];
	    this.active_sprites = [];
	    this.objects = {};
	    this.actions = {};
	    this.groups = {};
	    this.debug_loader = null;
	    this.canvas = null;
	    this.root = null;
	    this.all_materials = [];
	    this.mesh_datas = [];
	    this.SHADER_LIB = '';
	    this.all_anim_objects = [];
	    this.root = this.canvas = canvas = root;
	    this.MYOU_PARAMS = MYOU_PARAMS;
	    this.hash = Math.random();
	    if (getComputedStyle(root).position === 'static') {
	      root.style.position = 'relative';
	    }
	    if (canvas.tagName !== 'CANVAS') {
	      canvas = this.canvas = root.querySelector('canvas');
	    }
	    render_manager = new RenderManager(this, canvas, canvas.clientWidth, canvas.clientHeight, MYOU_PARAMS.gl_options || {
	      antialias: true,
	      alpha: false
	    });
	    this.update_canvas_rect();
	    resize_canvas = (function(_this) {
	      return function() {
	        render_manager.resize(canvas.clientWidth, canvas.clientHeight);
	        return _this.update_canvas_rect();
	      };
	    })(this);
	    window.addEventListener('resize', resize_canvas);
	    size = MYOU_PARAMS.total_size || 0;
	    initial_scene = MYOU_PARAMS.initial_scene || 'Scene';
	    data_dir = MYOU_PARAMS.data_dir || './data';
	    loader = new XhrLoader(this, data_dir);
	    loader.total += size;
	    loader.debug = MYOU_PARAMS.live_server ? true : false;
	    loader.load_scene(initial_scene, MYOU_PARAMS.initial_scene_filter);
	    if (MYOU_PARAMS.load_physics_engine) {
	      loader.load_physics_engine();
	    }
	    this.events = new Events(root);
	    this.main_loop = new MainLoop(this);
	    this.main_loop.run();
	  }
	
	  Myou.prototype.on_scene_ready_queue = {};
	
	  Myou.prototype.on_scene_ready = function(scene_name, callback) {
	    var k, ref, results, s, scene_ready;
	    scene_ready = (this.scenes[scene_name] != null) && (!this.MYOU_PARAMS.load_physics_engine || (typeof Ammo !== "undefined" && Ammo !== null));
	    if (scene_ready) {
	      while (this.on_scene_ready_queue[scene_name].length) {
	        this.on_scene_ready_queue[scene_name].shift()();
	      }
	      if (callback != null) {
	        return callback();
	      }
	    } else {
	      if (callback != null) {
	        if (this.on_scene_ready_queue[scene_name] != null) {
	          this.on_scene_ready_queue[scene_name].push(callback);
	        } else {
	          this.on_scene_ready_queue[scene_name] = [callback];
	        }
	      }
	      ref = this.on_scene_ready_queue;
	      results = [];
	      for (k in ref) {
	        s = ref[k];
	        if (s.length) {
	          results.push(window.requestAnimationFrame((function(_this) {
	            return function() {
	              return _this.on_scene_ready(k);
	            };
	          })(this)));
	        } else {
	          results.push(void 0);
	        }
	      }
	      return results;
	    }
	  };
	
	  Myou.prototype.update_canvas_rect = function() {
	    this.canvas_rect = this.canvas.getClientRects()[0];
	    return this.canvas.rect = this.canvas_rect;
	  };
	
	  return Myou;
	
	})();
	
	create_canvas = function(root) {
	  var canvas;
	  canvas = document.createElement('canvas');
	  if (root != null) {
	    canvas.style.position = 'relative';
	    canvas.style.width = '100%';
	    canvas.style.height = '100%';
	    root.insertBefore(canvas, root.firstChild);
	  }
	  return canvas;
	};
	
	module.exports = {
	  Myou: Myou,
	  create_canvas: create_canvas
	};


/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	var Debug, Filter, Framebuffer, MIRROR_MASK_X, MIRROR_MASK_Y, MIRROR_MASK_Z, MainFramebuffer, Material, Mesh, RenderManager, VECTOR_MINUS_Z, box_filter_code, mat2, mat3, mat4, plain_fs, plain_vs, quat, ref, ref1, ref2, vec2, vec3, vec4;
	
	ref = __webpack_require__(8), mat2 = ref.mat2, mat3 = ref.mat3, mat4 = ref.mat4, vec2 = ref.vec2, vec3 = ref.vec3, vec4 = ref.vec4, quat = ref.quat;
	
	ref1 = __webpack_require__(18), Filter = ref1.Filter, box_filter_code = ref1.box_filter_code;
	
	ref2 = __webpack_require__(20), Framebuffer = ref2.Framebuffer, MainFramebuffer = ref2.MainFramebuffer;
	
	Mesh = __webpack_require__(21).Mesh;
	
	Material = __webpack_require__(19).Material;
	
	MIRROR_MASK_X = 2 | 16 | 32 | 128;
	
	MIRROR_MASK_Y = 4 | 16 | 64 | 128;
	
	MIRROR_MASK_Z = 8 | 32 | 64 | 128;
	
	VECTOR_MINUS_Z = new Float32Array([0, 0, -1]);
	
	RenderManager = (function() {
	  function RenderManager(context, canvas, width, height, glflags, on_webgl_failed, on_context_lost, on_context_restored, no_s3tc) {
	    var ba, e, error, gl, iecanvas, lost, pixel_ratio_y, restored;
	    try {
	      gl = canvas.getContext("webgl", glflags) || canvas.getContext("experimental-webgl", glflags);
	    } catch (error) {
	      e = error;
	      pass;
	    }
	    if (!gl) {
	      if (navigator.appName === "Microsoft Internet Explorer") {
	        iecanvas = document.createElement('object');
	        iecanvas.type = "application/x-webgl";
	        canvas.parentNode.replaceChild(iecanvas, canvas);
	        canvas = iecanvas;
	        gl = canvas.getContext("webgl", glflags) || canvas.getContext("experimental-webgl", glflags);
	      }
	    }
	    if (!gl) {
	      if (typeof on_webgl_failed === "function") {
	        on_webgl_failed();
	      }
	      raise("Error: Can't start WebGL");
	    }
	    this.context = context;
	    this.context.render_manager = this;
	    this.canvas = canvas;
	    this.gl = gl;
	    this.textures = {};
	    this.width = width;
	    this.height = height;
	    this.main_fb = new MainFramebuffer(this);
	    this.viewports = [];
	    this.render_tick = 0;
	    this.context_lost_count = 0;
	    this.vrstate = null;
	    this.bound_textures = [];
	    this.frame_start = performance.now();
	    this.pixel_ratio_x = pixel_ratio_y = 1;
	    this.camera_z = vec3.create();
	    this.lod_factor = 1;
	    this.no_s3tc = no_s3tc;
	    ba = this.context.MYOU_PARAMS.background_alpha;
	    this.background_alpha = ba != null ? ba : 1;
	    this._cam2world = mat4.create();
	    this._world2cam = mat4.create();
	    this._world2cam3 = mat3.create();
	    this._world2cam_mx = mat4.create();
	    this._world2cam3_mx = mat3.create();
	    this._world2light = mat4.create();
	    this._m4 = mat4.create();
	    this._m3 = mat3.create();
	    this._v = vec3.create();
	    this._cam = null;
	    this._cull_left = vec3.create();
	    this._cull_right = vec3.create();
	    this._cull_top = vec3.create();
	    this._cull_bottom = vec3.create();
	    this._polygon_ratio = 1;
	    this.triangles_drawn = 0;
	    this.meshes_drawn = 0;
	    lost = function(event) {
	      event.preventDefault();
	      on_context_lost();
	      return render_manager.clear_context();
	    };
	    restored = function(event) {
	      render_manager.restore_context();
	      return (on_context_restored != null) && requestAnimationFrame(on_context_restored);
	    };
	    canvas.addEventListener("webglcontextlost", lost, false);
	    canvas.addEventListener("webglcontextrestored", restored, false);
	    this.initialize();
	  }
	
	  RenderManager.prototype.initialize = function() {
	    var gl, tex;
	    gl = this.gl;
	    this.extensions = {
	      standard_derivatives: gl.getExtension('OES_standard_derivatives'),
	      texture_float: gl.getExtension('OES_texture_float'),
	      texture_float_linear: gl.getExtension('OES_texture_float_linear'),
	      compressed_texture_s3tc: gl.getExtension('WEBGL_compressed_texture_s3tc'),
	      texture_filter_anisotropic: gl.getExtension("EXT_texture_filter_anisotropic") || gl.getExtension("WEBKIT_EXT_texture_filter_anisotropic") || gl.getExtension("MOZ_EXT_texture_filter_anisotropic"),
	      lose_context: gl.getExtension("WEBGL_lose_context")
	    };
	    if (this.no_s3tc) {
	      this.extensions['compressed_texture_s3tc'] = null;
	    }
	    this.dummy_filter = new Filter(this, "return get(0,0);", 'dummy_filter');
	    this.shadow_box_filter = new Filter(this, box_filter_code, 'box_filter');
	    this.invert_filter = new Filter(this, "return vec3(1.0) - get(0,0);", 'invert_filter');
	    this.common_shadow_fb = null;
	    this.debug = new Debug(this.context);
	    gl.clearDepth(1.0);
	    gl.enable(gl.DEPTH_TEST);
	    gl.depthFunc(gl.LEQUAL);
	    gl.enable(gl.CULL_FACE);
	    gl.cullFace(gl.BACK);
	    this.cull_face_enabled = true;
	    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);
	    this.attrib_bitmask = 0;
	    this.blank_texture = tex = gl.createTexture();
	    gl.bindTexture(gl.TEXTURE_2D, tex);
	    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array([0, 0, 0, 0]));
	    gl.bindTexture(gl.TEXTURE_2D, null);
	    return this.resize(this.width, this.height, this.pixel_ratio_x, this.pixel_ratio_y);
	  };
	
	  RenderManager.prototype.clear_context = function() {
	    var k, ref3, t;
	    this.context_lost_count += 1;
	    ref3 = this.textures;
	    for (k in ref3) {
	      t = ref3[k];
	      t.tex = null;
	    }
	  };
	
	  RenderManager.prototype.restore_context = function() {
	    var j, k, len, len1, m, o, ref3, ref4, ref5, t;
	    this.initialize();
	    ref3 = this.textures;
	    for (k in ref3) {
	      t = ref3[k];
	      t.reupload();
	    }
	    ref4 = this.context.all_materials;
	    for (j = 0, len = ref4.length; j < len; j++) {
	      m = ref4[j];
	      m.reupload();
	    }
	    ref5 = this.context.mesh_datas;
	    for (m = o = 0, len1 = ref5.length; o < len1; m = ++o) {
	      k = ref5[m];
	      m.reupload();
	    }
	  };
	
	  RenderManager.prototype.set_cull_face = function(enable) {
	    if (enable) {
	      return this.gl.enable(2884);
	    } else {
	      return this.gl.disable(2884);
	    }
	  };
	
	  RenderManager.prototype.resize = function(width, height, pixel_ratio_x, pixel_ratio_y) {
	    var filter_fb_needed, j, len, ref3, v;
	    if (pixel_ratio_x == null) {
	      pixel_ratio_x = 1;
	    }
	    if (pixel_ratio_y == null) {
	      pixel_ratio_y = 1;
	    }
	    this.width = width;
	    this.height = height;
	    this.canvas.width = this.main_fb.size_x = width * pixel_ratio_x;
	    this.canvas.height = this.main_fb.size_y = height * pixel_ratio_y;
	    this.pixel_ratio_x = pixel_ratio_x;
	    this.pixel_ratio_y = pixel_ratio_y;
	    this.screen_size = [width, height];
	    this.largest_side = Math.max(width, height);
	    this.smallest_side = Math.min(width, height);
	    this.diagonal = Math.sqrt(width * width + height * height);
	    filter_fb_needed = false;
	    ref3 = this.viewports;
	    for (j = 0, len = ref3.length; j < len; j++) {
	      v = ref3[j];
	      v.recalc_aspect();
	      if (v.post_processing_enabled) {
	        filter_fb_needed = true;
	      }
	    }
	    if (filter_fb_needed && this.viewports !== []) {
	      return this.recalculate_fb_size();
	    }
	  };
	
	  RenderManager.prototype.resize_soft = function(width, height) {
	    var j, len, ref3, v;
	    ref3 = this.viewports;
	    for (j = 0, len = ref3.length; j < len; j++) {
	      v = ref3[j];
	      v.camera.aspect_ratio = width / height;
	      v.camera.recalculate_projection();
	    }
	  };
	
	  RenderManager.prototype.request_fullscreen = function() {
	    var c;
	    c = this.canvas;
	    return (c.requestFullscreen || c.mozRequestFullScreen || c.webkitRequestFullscreen)();
	  };
	
	  RenderManager.prototype.recalculate_fb_size = function() {
	    var j, k, kk, len, mat, minx, miny, next_POT, ref3, ref4, ref5, scene, v;
	    next_POT = function(x) {
	      x = Math.max(0, x - 1);
	      return Math.pow(2, Math.floor(Math.log(x) / Math.log(2)) + 1);
	    };
	    minx = miny = 0;
	    ref3 = this.viewports;
	    for (j = 0, len = ref3.length; j < len; j++) {
	      v = ref3[j];
	      minx = Math.max(minx, v.rect_pix[2]);
	      miny = Math.max(miny, v.rect_pix[3]);
	    }
	    minx = next_POT(minx);
	    miny = next_POT(miny);
	    if (this.common_filter_fb) {
	      this.common_filter_fb.destroy();
	    }
	    if (!this.common_filter_fb || this.common_filter_fb.width !== minx || this.common_filter_fb.height !== miny) {
	      this.common_filter_fb = new Framebuffer(this.context.render_manager, minx, miny, this.gl.UNSIGNED_BYTE);
	    }
	    ref4 = this.context.scenes;
	    for (k in ref4) {
	      scene = ref4[k];
	      ref5 = scene.materials;
	      for (kk in ref5) {
	        mat = ref5[kk];
	        if (mat.u_fb_size != null) {
	          mat.use();
	          this.gl.uniform2f(mat.u_fb_size, minx, miny);
	        }
	      }
	    }
	  };
	
	  RenderManager.prototype.change_enabled_attributes = function(bitmask) {
	    var gl, i, mask, previous;
	    gl = this.gl;
	    previous = this.attrib_bitmask;
	    mask = previous & ~bitmask;
	    i = 0;
	    while (mask !== 0) {
	      if (mask & 1) {
	        gl.disableVertexAttribArray(i);
	      }
	      i += 1;
	      mask >>= 1;
	    }
	    mask = bitmask & ~previous;
	    i = 0;
	    while (mask !== 0) {
	      if (mask & 1) {
	        gl.enableVertexAttribArray(i);
	      }
	      i += 1;
	      mask >>= 1;
	    }
	    return this.attrib_bitmask = bitmask;
	  };
	
	  RenderManager.prototype.draw_all = function() {
	    var j, len, ref3, viewport;
	    this.frame_start = performance.now();
	    this.render_tick += 1;
	    this.triangles_drawn = 0;
	    this.meshes_drawn = 0;
	    ref3 = this.viewports;
	    for (j = 0, len = ref3.length; j < len; j++) {
	      viewport = ref3[j];
	      if (viewport.camera.scene.enabled) {
	        this.draw_viewport(viewport, viewport.rect_pix, viewport.dest_buffer, [0, 1]);
	      }
	    }
	    return this.debug.vectors.clear();
	  };
	
	  RenderManager.prototype.draw_mesh = function(mesh, mesh2world, pass_) {
	    var aa, ab, active_texture, amesh, attr, attrib_bitmasks, attrib_pointers, bones, bound_textures, cam, cv, data, dist, distance_to_camera, gl, i, influence, j, lamp, lavars, len, len1, len2, len3, len4, lod_ob, m, m3, m4, mat, mirrors, num_indices, o, parented_pos, pos, q, r, ref3, ref4, ref5, ref6, ref7, ref8, ref9, shape, stride, submesh_idx, tex, u, w, y;
	    if (pass_ == null) {
	      pass_ = -1;
	    }
	    gl = this.gl;
	    bound_textures = this.bound_textures;
	    m4 = this._m4;
	    m3 = this._m3;
	    cam = this._cam;
	    parented_pos = mesh.parent ? mesh.get_world_position() : mesh.position;
	    pos = vec3.copy(this._v, parented_pos);
	    if (mesh.mirrors === 2) {
	      pos[0] = -pos[0];
	    }
	    vec3.sub(pos, pos, cam.position);
	    r = mesh.radius;
	    distance_to_camera = vec3.dot(pos, this.camera_z);
	    if (((distance_to_camera + r) * (vec3.dot(pos, this._cull_top) + r) * (vec3.dot(pos, this._cull_left) + r) * (vec3.dot(pos, this._cull_right) + r) * (vec3.dot(pos, this._cull_bottom) + r)) < 0) {
	      mesh.culled_in_last_frame = true;
	      return true;
	    }
	    mesh.culled_in_last_frame = false;
	    amesh = mesh;
	    if (mesh.altmeshes.length) {
	      amesh = mesh.altmeshes[mesh.active_mesh_index] || mesh;
	    } else if (mesh.lod_objects) {
	      mesh.last_lod_object = null;
	      dist = distance_to_camera + this.lod_factor;
	      ref3 = mesh.lod_objects;
	      for (j = 0, len = ref3.length; j < len; j++) {
	        lod_ob = ref3[j];
	        if (dist > lod_ob.distance || !amesh.data) {
	          mesh.last_lod_object = amesh = lod_ob.object;
	          break;
	        }
	      }
	    }
	    if (!amesh.data) {
	      return true;
	    }
	    if (amesh.materials.length === 0) {
	      if (amesh.configure_materials() === false) {
	        return false;
	      }
	    }
	    submesh_idx = -1;
	    ref4 = amesh.materials;
	    for (o = 0, len1 = ref4.length; o < len1; o++) {
	      mat = ref4[o];
	      submesh_idx += 1;
	      if (!(pass_ === -1 || mesh.passes[submesh_idx] === pass_)) {
	        continue;
	      }
	      mat.use();
	      if (mat.double_sided === this.cull_face_enabled) {
	        this.cull_face_enabled = !this.cull_face_enabled;
	        this.set_cull_face(this.cull_face_enabled);
	      }
	      gl.uniformMatrix4fv(mat.u_projection_matrix, false, cam.projection_matrix);
	      gl.uniformMatrix4fv(mat.u_inv_model_view_matrix, false, this._cam2world);
	      if (mat.u_var_object_matrix != null) {
	        gl.uniformMatrix4fv(mat.u_var_object_matrix, false, mesh2world);
	      }
	      if (mat.u_var_inv_object_matrix != null) {
	        mat4.invert(m4, mesh2world);
	        gl.uniformMatrix4fv(mat.u_var_inv_object_matrix, false, m4);
	      }
	      if (mat.u_color != null) {
	        gl.uniform4fv(mat.u_color, mesh.color);
	      }
	      if (mat.u_custom[2]) {
	        gl.uniform1f(mat.u_custom[2], mesh.alpha);
	      }
	      for (i = q = 0, ref5 = mat.u_custom.length; 0 <= ref5 ? q < ref5 : q > ref5; i = 0 <= ref5 ? ++q : --q) {
	        cv = mesh.custom_uniform_values[i];
	        if (cv) {
	          if (cv.length) {
	            gl.uniform4fv(mat.u_custom[i], cv);
	          } else {
	            gl.uniform1f(mat.u_custom[i], cv);
	          }
	        }
	      }
	      ref6 = mat.lamps;
	      for (u = 0, len2 = ref6.length; u < len2; u++) {
	        lavars = ref6[u];
	        lamp = lavars[0];
	        gl.uniform3fv(lavars[1], lamp._view_pos);
	        gl.uniform3fv(lavars[2], lamp.color);
	        gl.uniform4fv(lavars[3], lamp._color4);
	        gl.uniform1f(lavars[4], lamp.falloff_distance);
	        gl.uniform3fv(lavars[5], lamp._dir);
	        gl.uniformMatrix4fv(lavars[6], false, lamp._cam2depth);
	      }
	      for (i = w = 0, ref7 = mat.textures.length; 0 <= ref7 ? w < ref7 : w > ref7; i = 0 <= ref7 ? ++w : --w) {
	        tex = mat.textures[i];
	        if (!tex.loaded) {
	          tex = this.context.render_manager.blank_texture;
	        }
	        if (bound_textures[i] !== tex) {
	          if (active_texture !== i) {
	            gl.activeTexture(gl.TEXTURE0 + i);
	            active_texture = i;
	          }
	          gl.bindTexture(gl.TEXTURE_2D, tex.tex);
	          bound_textures[i] = tex;
	        }
	      }
	      if (mat.u_shapef.length !== 0) {
	        i = 0;
	        ref8 = mesh._shape_names;
	        for (y = 0, len3 = ref8.length; y < len3; y++) {
	          shape = ref8[y];
	          influence = mesh.shapes[shape];
	          gl.uniform1f(mat.u_shapef[i], influence);
	          i += 1;
	        }
	        while (i < mat.u_shapef.length) {
	          gl.uniform1f(mat.u_shapef[i], 0);
	          i += 1;
	        }
	        if (amesh.shape_multiplier !== mat.shape_multiplier) {
	          mat.shape_multiplier = amesh.shape_multiplier;
	          gl.uniform1f(mat.u_shape_multiplier, amesh.shape_multiplier);
	        }
	      }
	      if (amesh.uv_multiplier !== mat.uv_multiplier) {
	        mat.uv_multiplier = amesh.uv_multiplier;
	        gl.uniform1f(mat.u_uv_multiplier, amesh.uv_multiplier);
	      }
	      if ((mesh.armature != null) && mesh.parent_bone_index === -1) {
	        bones = mesh.armature.deform_bones;
	        for (i = aa = 0, ref9 = mat.num_bone_uniforms; 0 <= ref9 ? aa < ref9 : aa > ref9; i = 0 <= ref9 ? ++aa : --aa) {
	          m = bones[i].ol_matrix;
	          gl.uniformMatrix4fv(mat.u_bones[i], false, m);
	        }
	      }
	      data = amesh.data;
	      attrib_pointers = data.attrib_pointers[submesh_idx];
	      attrib_bitmasks = data.attrib_bitmasks[submesh_idx];
	      stride = data.stride;
	      gl.bindBuffer(gl.ARRAY_BUFFER, data.vertex_buffers[submesh_idx]);
	      this.change_enabled_attributes(attrib_bitmasks);
	      for (ab = 0, len4 = attrib_pointers.length; ab < len4; ab++) {
	        attr = attrib_pointers[ab];
	        gl.vertexAttribPointer(attr[0], attr[1], attr[2], false, stride, attr[3]);
	      }
	      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, data.index_buffers[submesh_idx]);
	      mirrors = mesh.mirrors;
	      num_indices = data.num_indices[submesh_idx];
	      if (mirrors & 1) {
	        mat4.multiply(m4, this._world2cam, mesh2world);
	        gl.uniformMatrix4fv(mat.u_model_view_matrix, false, m4);
	        mat3.multiply(m3, this._world2cam3, mesh.normal_matrix);
	        gl.uniformMatrix3fv(mat.u_normal_matrix, false, m3);
	        gl.drawElements(data.draw_method, num_indices, gl.UNSIGNED_SHORT, 0);
	      }
	      if (mirrors & 178) {
	        mat4.multiply(m4, this._world2cam_mx, mesh2world);
	        gl.uniformMatrix4fv(mat.u_model_view_matrix, false, m4);
	        mat3.multiply(m3, this._world2cam3_mx, mesh.normal_matrix);
	        gl.uniformMatrix3fv(mat.u_normal_matrix, false, m3);
	        gl.frontFace(2304);
	        gl.drawElements(data.draw_method, num_indices, gl.UNSIGNED_SHORT, 0);
	        gl.frontFace(2305);
	      }
	    }
	    return true;
	  };
	
	  RenderManager.prototype.draw_viewport = function(viewport, rect, dest_buffer, passes) {
	    var aa, ab, ac, active_texture, ad, ae, af, ag, ah, attr, c, cam, cam2world, clear_bits, data, debug, dob, dvec, filter_fb, gl, i, j, lamp, len, len1, len10, len11, len12, len2, len3, len4, len5, len6, len7, len8, len9, m3, m4, ma, mat, o, ob, posrot, q, ref10, ref11, ref12, ref13, ref14, ref15, ref16, ref17, ref3, ref4, ref5, ref6, ref7, ref8, ref9, s, scene, shadows_pending, size, u, v, v1, v2, v3, w, world2cam, world2cam3, world2cam3_mx, world2cam_mx, world2light, x, y, z;
	    gl = this.gl;
	    if (gl.isContextLost()) {
	      return;
	    }
	    this._cam = cam = viewport.debug_camera || viewport.camera;
	    scene = cam.scene;
	    m4 = this._m4;
	    m3 = this._m3;
	    shadows_pending = false;
	    if (scene.last_render_tick < this.render_tick) {
	      scene.last_render_tick = this.render_tick;
	      shadows_pending = true;
	      if (scene._children_are_ordered === false) {
	        scene.reorder_children();
	      }
	      ref3 = scene.armatures;
	      for (j = 0, len = ref3.length; j < len; j++) {
	        ob = ref3[j];
	        ref4 = ob.children;
	        for (o = 0, len1 = ref4.length; o < len1; o++) {
	          c = ref4[o];
	          if (c.visible) {
	            ob.recalculate_bone_matrices();
	            break;
	          }
	        }
	      }
	      ref5 = scene.auto_updated_children;
	      for (q = 0, len2 = ref5.length; q < len2; q++) {
	        ob = ref5[q];
	        ob._update_matrices();
	      }
	    }
	    debug = this.debug;
	    filter_fb = this.common_filter_fb;
	    cam2world = mat4.copy(this._cam2world, cam.world_matrix);
	    world2cam = this._world2cam;
	    world2cam3 = this._world2cam3;
	    world2cam_mx = this._world2cam_mx;
	    world2cam3_mx = this._world2cam3_mx;
	    world2light = this._world2light;
	    vec3.transformMat4(cam2world.subarray(12), viewport.eye_shift, cam2world);
	    mat4.invert(world2cam, cam2world);
	    mat3.fromMat4(world2cam3, world2cam);
	    mat4.copy(world2cam_mx, world2cam);
	    world2cam_mx[0] = -world2cam_mx[0];
	    world2cam_mx[1] = -world2cam_mx[1];
	    world2cam_mx[2] = -world2cam_mx[2];
	    mat3.fromMat4(world2cam3_mx, world2cam_mx);
	    vec3.transformMat3(this.camera_z, VECTOR_MINUS_Z, cam.rotation_matrix);
	    vec3.transformMat3(this._cull_left, cam.cull_left, cam.rotation_matrix);
	    v = vec3.copy(this._cull_right, cam.cull_left);
	    v[0] = -v[0];
	    vec3.transformMat3(v, v, cam.rotation_matrix);
	    vec3.transformMat3(this._cull_bottom, cam.cull_bottom, cam.rotation_matrix);
	    v = vec3.copy(this._cull_top, cam.cull_bottom);
	    v[1] = -v[1];
	    vec3.transformMat3(v, v, cam.rotation_matrix);
	    mat4.mul(cam.world_to_screen_matrix, cam.projection_matrix, world2cam);
	    this.bound_textures.clear();
	    active_texture = -1;
	    ref6 = scene.lamps;
	    for (u = 0, len3 = ref6.length; u < len3; u++) {
	      lamp = ref6[u];
	      if ((lamp.shadow_fb != null) && shadows_pending) {
	        size = lamp.shadow_fb.size_x * 2;
	        if (this.common_shadow_fb == null) {
	          this.common_shadow_fb = new Framebuffer(this, size, size);
	        }
	        this.common_shadow_fb.enable([0, 0, size, size]);
	        gl.clearColor(1, 1, 1, 1);
	        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
	        mat = lamp._shadow_material;
	        mat.use();
	        mat4.invert(world2light, lamp.world_matrix);
	        ref7 = scene.mesh_passes[0];
	        for (w = 0, len4 = ref7.length; w < len4; w++) {
	          ob = ref7[w];
	          data = ((ref8 = ob.last_lod_object) != null ? ref8.data : void 0) || ob.data;
	          if (ob.visible && data && data.attrib_pointers.length !== 0 && !ob.culled_in_last_frame) {
	            mat4.multiply(m4, world2light, ob.world_matrix);
	            gl.uniformMatrix4fv(mat.u_model_view_matrix, false, m4);
	            gl.uniformMatrix4fv(mat.u_projection_matrix, false, lamp._projection_matrix);
	            for (i = y = 0, ref9 = data.vertex_buffers.length; 0 <= ref9 ? y < ref9 : y > ref9; i = 0 <= ref9 ? ++y : --y) {
	              gl.bindBuffer(gl.ARRAY_BUFFER, data.vertex_buffers[i]);
	              this.change_enabled_attributes(1);
	              attr = data.attrib_pointers[i][0];
	              gl.vertexAttribPointer(attr[0], attr[1], attr[2], false, data.stride, attr[3]);
	              gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, data.index_buffers[i]);
	              gl.drawElements(data.draw_method, data.num_indices[i], gl.UNSIGNED_SHORT, 0);
	            }
	          }
	        }
	        lamp.shadow_fb.enable();
	        this.common_shadow_fb.draw_with_filter(this.shadow_box_filter, [0, 0, size, size]);
	      }
	      if (lamp.shadow_fb != null) {
	        mat4.multiply(m4, world2light, cam2world);
	        mat4.multiply(lamp._cam2depth, lamp._depth_matrix, m4);
	      }
	      vec3.transformMat4(lamp._view_pos, lamp.world_matrix.subarray(12, 15), world2cam);
	      mat4.multiply(m4, world2cam, lamp.world_matrix);
	      lamp._dir[0] = -m4[8];
	      lamp._dir[1] = -m4[9];
	      lamp._dir[2] = -m4[10];
	    }
	    dest_buffer.enable(rect);
	    clear_bits = viewport.clear_bits;
	    if (clear_bits & gl.COLOR_BUFFER_BIT) {
	      c = scene.background_color;
	      gl.clearColor(c[0], c[1], c[2], this.background_alpha);
	    }
	    clear_bits && gl.clear(clear_bits);
	    if (scene.bg_pass && scene.bg_pass.length) {
	      ref10 = scene.bg_pass;
	      for (aa = 0, len5 = ref10.length; aa < len5; aa++) {
	        ob = ref10[aa];
	        if (ob.visible === true) {
	          if (this.draw_mesh(ob, ob.world_matrix, 0) === false) {
	            return;
	          }
	        }
	      }
	      gl.clear(gl.DEPTH_BUFFER_BIT);
	    }
	    if (passes.indexOf(0) >= 0) {
	      ref11 = scene.mesh_passes[0];
	      for (ab = 0, len6 = ref11.length; ab < len6; ab++) {
	        ob = ref11[ab];
	        if (ob.visible === true && !ob.bg && !ob.fg) {
	          if (this.draw_mesh(ob, ob.world_matrix, 0) === false) {
	            return;
	          }
	        }
	      }
	    }
	    if (passes.indexOf(1) >= 0 && scene.mesh_passes[1].length) {
	      gl.depthMask(false);
	      gl.enable(gl.BLEND);
	      z = this.camera_z;
	      ref12 = scene.mesh_passes[1];
	      for (ac = 0, len7 = ref12.length; ac < len7; ac++) {
	        ob = ref12[ac];
	        v = ob.parent ? ob.get_world_position() : ob.position;
	        x = v[0];
	        if (ob.mirrors === 2) {
	          x = -x;
	        }
	        ob._sqdist = -(x * z[0] + v[1] * z[1] + v[2] * z[2]) - (ob.zindex * (ob.dimensions[0] + ob.dimensions[1] + ob.dimensions[2]) * 0.166666);
	      }
	      timsort_sqdist(scene.mesh_passes[1]);
	    }
	    ref13 = scene.mesh_passes[1];
	    for (ad = 0, len8 = ref13.length; ad < len8; ad++) {
	      ob = ref13[ad];
	      if (ob.visible === true) {
	        if (this.draw_mesh(ob, ob.world_matrix, 1) === false) {
	          return;
	        }
	      }
	    }
	    if (scene.mesh_passes[1].length) {
	      gl.disable(gl.BLEND);
	      gl.depthMask(true);
	    }
	    if (scene.fg_pass && scene.fg_pass.length) {
	      gl.clear(gl.DEPTH_BUFFER_BIT);
	      ref14 = scene.fg_pass;
	      for (ae = 0, len9 = ref14.length; ae < len9; ae++) {
	        ob = ref14[ae];
	        if (ob.visible === true) {
	          if (this.draw_mesh(ob, ob.world_matrix, 0) === false) {
	            return;
	          }
	        }
	      }
	    }
	    if (passes.indexOf(2) >= 0) {
	      ref15 = scene.mesh_passes[2];
	      for (af = 0, len10 = ref15.length; af < len10; af++) {
	        ob = ref15[af];
	        if (ob.visible === true) {
	          this.draw_mesh(ob, ob.world_matrix, 2);
	        }
	      }
	    }
	    if (scene.debug_physics) {
	      ref16 = scene.children;
	      for (ag = 0, len11 = ref16.length; ag < len11; ag++) {
	        ob = ref16[ag];
	        dob = ob.phy_debug_mesh;
	        if (dob) {
	          if (dob !== ob) {
	            posrot = ob.get_world_pos_rot();
	            dob.position = posrot[0];
	            dob.rotation = posrot[1];
	            dob.scale = ob.phy_he;
	            dob._update_matrices();
	          }
	          dob.color = vec4.clone([1, 1, 1, 0.2]);
	          gl.enable(gl.BLEND);
	          gl.disable(gl.DEPTH_TEST);
	          this.draw_mesh(dob, dob.world_matrix);
	          gl.disable(gl.BLEND);
	          gl.enable(gl.DEPTH_TEST);
	          dob.color = vec4.clone([1, 1, 1, 1]);
	          this.draw_mesh(dob, dob.world_matrix);
	        }
	      }
	      gl.disable(gl.DEPTH_TEST);
	      ref17 = this.debug.vectors;
	      for (ah = 0, len12 = ref17.length; ah < len12; ah++) {
	        dvec = ref17[ah];
	        dob = this.debug.arrow;
	        dob.color = vec4.clone(dvec[2]);
	        dob.position = dvec[1];
	        v3 = dvec[0];
	        v2 = vec3.cross([0, 0, 0], cam.position, v3);
	        v1 = vec3.normalize([0, 0, 0], vec3.cross([0, 0, 0], v2, v3));
	        v2 = vec3.normalize([0, 0, 0], vec3.cross(v2, v3, v1));
	        s = vec3.len(v3);
	        vec3.scale(v2, v2, s);
	        vec3.scale(v1, v1, s);
	        ma = [v1[0], v1[1], v1[2], 0, v2[0], v2[1], v2[2], 0, v3[0], v3[1], v3[2], 0, dob.position[0], dob.position[1], dob.position[2], 1];
	        this.draw_mesh(dob, ma);
	      }
	      return gl.enable(gl.DEPTH_TEST);
	    }
	  };
	
	  RenderManager.prototype.type_debug = function() {
	    var gl, j, len, len1, o, p, ref3, ref4;
	    gl = this.gl;
	    ref3 = ['uniform1fv', 'uniform2fv', 'uniform3fv', 'uniform4fv'];
	    for (j = 0, len = ref3.length; j < len; j++) {
	      p = ref3[j];
	      gl['_' + p] = gl[p];
	      gl[p] = function(l, v) {
	        if (v.byteLength == null) {
	          throw "wrong type";
	        }
	        return gl["_" + p](l, v);
	      };
	    }
	    ref4 = ['uniformMatrix3fv', 'uniformMatrix4fv'];
	    for (o = 0, len1 = ref4.length; o < len1; o++) {
	      p = ref4[o];
	      gl['_' + p] = gl[p];
	      gl[p] = function(l, t, v) {
	        if (v.byteLength != null) {
	          throw "wrong type";
	        }
	        return gl["_" + p](l, t, v);
	      };
	    }
	  };
	
	  RenderManager.prototype.polycount_debug = function(ratio) {
	    var inv_ratio, j, len, len1, len2, len3, n, o, ob, q, ref3, ref4, ref5, ref6, removed_polys, total_polys, u;
	    if (ratio == null) {
	      ratio = 1;
	    }
	    total_polys = 0;
	    ref3 = scene.children;
	    for (j = 0, len = ref3.length; j < len; j++) {
	      ob = ref3[j];
	      if (ob.type === 'MESH' && ob.visible && ob.data) {
	        ref4 = ob.data.num_indices;
	        for (o = 0, len1 = ref4.length; o < len1; o++) {
	          n = ref4[o];
	          total_polys += n;
	        }
	      }
	    }
	    inv_ratio = 1 - ratio;
	    removed_polys = 0;
	    this.removed_meshes = [];
	    ref5 = scene.children;
	    for (q = 0, len2 = ref5.length; q < len2; q++) {
	      ob = ref5[q];
	      if (removed_polys / total_polys > inv_ratio) {
	        return;
	      }
	      if (ob.type === 'MESH' && ob.visible && ob.data) {
	        ref6 = ob.data.num_indices;
	        for (u = 0, len3 = ref6.length; u < len3; u++) {
	          n = ref6[u];
	          removed_polys += n;
	        }
	        ob.visible = false;
	        scene.mesh_passes[0].remove(ob);
	        scene.mesh_passes[1].remove(ob);
	        this.removed_meshes.push(ob);
	      }
	    }
	  };
	
	  RenderManager.prototype.restore_polycount_debug = function() {
	    var added_passes, j, len, len1, o, ob, pa, ref3, ref4;
	    ref3 = this.removed_meshes;
	    for (j = 0, len = ref3.length; j < len; j++) {
	      ob = ref3[j];
	      added_passes = [];
	      ref4 = ob.passes;
	      for (o = 0, len1 = ref4.length; o < len1; o++) {
	        pa = ref4[o];
	        if (!added_passes[pa] && pa < 5) {
	          scene.mesh_passes[pa].push(ob);
	          added_passes[pa] = true;
	        }
	      }
	      ob.visible = true;
	    }
	  };
	
	  return RenderManager;
	
	})();
	
	plain_vs = "precision highp float;\nprecision highp int;\nuniform mat4 model_view_matrix;\nuniform mat4 projection_matrix;\nattribute vec3 vertex;\nvoid main()\n{\n    vec4 pos = projection_matrix * model_view_matrix * vec4(vertex, 1.0);\n    pos.z -= 0.0005;\n    gl_Position = pos;\n}";
	
	plain_fs = "precision mediump float;uniform vec4 color;void main(){gl_FragColor = color;}";
	
	Debug = (function() {
	  function Debug(context1) {
	    var a, arrow, bone, box, cos, cylinder, d, i, idx, j, len, mat, o, ob, q, ref3, sin, sphere, u, w;
	    this.context = context1;
	    this.vectors = [];
	    if (!this.context.MYOU_PARAMS.debug) {
	      return;
	    }
	    sin = Math.sin;
	    cos = Math.cos;
	    box = new Mesh(this.context);
	    d = [1, 1, 1, 1, -1, 1, -1, -1, 1, -1, 1, 1, 1, 1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1];
	    box.load_from_lists(d, [0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]);
	    cylinder = new Mesh(this.context);
	    d = [];
	    idx = [];
	    a = (3.1416 * 2) / 16;
	    for (i = j = 0; j < 16; i = ++j) {
	      d = d.concat([sin(a * i), cos(a * i), 1]);
	      d = d.concat([sin(a * i), cos(a * i), -1]);
	      idx = idx.concat([i * 2, (i * 2 + 2) % 32, i * 2 + 1, (i * 2 + 3) % 32]);
	      if (i % 2 === 0) {
	        idx = idx.concat([i * 2, i * 2 + 1]);
	      }
	    }
	    cylinder.load_from_lists(d, idx);
	    sphere = new Mesh(this.context);
	    d = [];
	    idx = [];
	    for (i = o = 0; o < 16; i = ++o) {
	      d = d.concat(sin(a * i), cos(a * i), 0);
	      idx = idx.concat(i, (i + 1) % 16);
	    }
	    for (i = q = 0; q < 16; i = ++q) {
	      d = d.concat(0, sin(a * i), cos(a * i));
	      idx = idx.concat(i + 16, (i + 1) % 16 + 16);
	    }
	    for (i = u = 0; u < 16; i = ++u) {
	      d = d.concat(sin(a * i), 0, cos(a * i));
	      idx = idx.concat(i + 32, (i + 1) % 16 + 32);
	    }
	    sphere.load_from_lists(d, idx);
	    mat = new Material(this.context, '_debug', plain_fs, [
	      {
	        'type': 5,
	        'varname': 'color'
	      }
	    ], [], plain_vs);
	    arrow = new Mesh(this.context);
	    d = [0, 0, 0, 0, 0, 1, 0, 0.07, 0.7, 0, -0.07, 0.7];
	    arrow.load_from_lists(d, [0, 1, 1, 2, 1, 3]);
	    bone = new Mesh(this.context);
	    d = [0, 0, 0, -0.1, 0.1, -0.1, 0.1, 0.1, -0.1, 0.1, 0.1, 0.1, -0.1, 0.1, 0.1, 0, 1, 0, 1];
	    bone.load_from_lists(d, [0, 1, 0, 2, 0, 3, 0, 4, 1, 2, 2, 3, 3, 4, 4, 1, 5, 1, 5, 2, 5, 3, 5, 4]);
	    this.material = mat = new Material(this.context, '_debug', plain_fs, [
	      {
	        'type': 5,
	        'varname': 'color'
	      }
	    ], [], plain_vs);
	    ref3 = [box, cylinder, sphere, arrow, bone];
	    for (w = 0, len = ref3.length; w < len; w++) {
	      ob = ref3[w];
	      ob.elements = [];
	      ob.stride = 4;
	      ob.configure_materials([mat]);
	      ob.color = vec4.create(1, 1, 1, 1);
	      ob.data.draw_method = this.context.render_manager.gl.LINES;
	      ob.scale = [1, 1, 1];
	      ob._update_matrices();
	    }
	    this.box = box;
	    this.cylinder = cylinder;
	    this.sphere = sphere;
	    this.arrow = arrow;
	    this.bone = bone;
	    this.vectors = [];
	  }
	
	  Debug.prototype.debug_mesh_from_va_ia = function(va, ia) {
	    var mesh;
	    return;
	    mesh = new Mesh(this.context);
	    mesh.stride = 3 * 4;
	    mesh.offsets = [0, 0, va.length, ia.length];
	    mesh.load_from_va_ia(va, ia);
	    mesh.elements = [];
	    mesh.configure_materials([this.material]);
	    mesh.color = vec4.create(1, 1, 1, 1);
	    mesh.data.draw_method = render_manager.gl.LINES;
	    mesh.scale = [1, 1, 1];
	    mesh._update_matrices();
	    return mesh;
	  };
	
	  return Debug;
	
	})();
	
	module.exports = {
	  RenderManager: RenderManager,
	  MIRROR_MASK_X: MIRROR_MASK_X,
	  MIRROR_MASK_Y: MIRROR_MASK_Y,
	  MIRROR_MASK_Z: MIRROR_MASK_Z,
	  VECTOR_MINUS_Z: VECTOR_MINUS_Z
	};


/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview gl-matrix - High performance matrix and vector operations
	 * @author Brandon Jones
	 * @author Colin MacKenzie IV
	 * @version 2.3.0
	 */
	
	/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.
	
	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:
	
	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.
	
	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE. */
	// END HEADER
	
	exports.glMatrix = __webpack_require__(9);
	exports.mat2 = __webpack_require__(10);
	exports.mat2d = __webpack_require__(11);
	exports.mat3 = __webpack_require__(12);
	exports.mat4 = __webpack_require__(13);
	exports.quat = __webpack_require__(14);
	exports.vec2 = __webpack_require__(17);
	exports.vec3 = __webpack_require__(15);
	exports.vec4 = __webpack_require__(16);

/***/ },
/* 9 */
/***/ function(module, exports) {

	/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.
	
	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:
	
	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.
	
	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE. */
	
	/**
	 * @class Common utilities
	 * @name glMatrix
	 */
	var glMatrix = {};
	
	// Constants
	glMatrix.EPSILON = 0.000001;
	glMatrix.ARRAY_TYPE = (typeof Float32Array !== 'undefined') ? Float32Array : Array;
	glMatrix.RANDOM = Math.random;
	
	/**
	 * Sets the type of array used when creating new vectors and matrices
	 *
	 * @param {Type} type Array type, such as Float32Array or Array
	 */
	glMatrix.setMatrixArrayType = function(type) {
	    GLMAT_ARRAY_TYPE = type;
	}
	
	var degree = Math.PI / 180;
	
	/**
	* Convert Degree To Radian
	*
	* @param {Number} Angle in Degrees
	*/
	glMatrix.toRadian = function(a){
	     return a * degree;
	}
	
	module.exports = glMatrix;


/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.
	
	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:
	
	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.
	
	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE. */
	
	var glMatrix = __webpack_require__(9);
	
	/**
	 * @class 2x2 Matrix
	 * @name mat2
	 */
	var mat2 = {};
	
	/**
	 * Creates a new identity mat2
	 *
	 * @returns {mat2} a new 2x2 matrix
	 */
	mat2.create = function() {
	    var out = new glMatrix.ARRAY_TYPE(4);
	    out[0] = 1;
	    out[1] = 0;
	    out[2] = 0;
	    out[3] = 1;
	    return out;
	};
	
	/**
	 * Creates a new mat2 initialized with values from an existing matrix
	 *
	 * @param {mat2} a matrix to clone
	 * @returns {mat2} a new 2x2 matrix
	 */
	mat2.clone = function(a) {
	    var out = new glMatrix.ARRAY_TYPE(4);
	    out[0] = a[0];
	    out[1] = a[1];
	    out[2] = a[2];
	    out[3] = a[3];
	    return out;
	};
	
	/**
	 * Copy the values from one mat2 to another
	 *
	 * @param {mat2} out the receiving matrix
	 * @param {mat2} a the source matrix
	 * @returns {mat2} out
	 */
	mat2.copy = function(out, a) {
	    out[0] = a[0];
	    out[1] = a[1];
	    out[2] = a[2];
	    out[3] = a[3];
	    return out;
	};
	
	/**
	 * Set a mat2 to the identity matrix
	 *
	 * @param {mat2} out the receiving matrix
	 * @returns {mat2} out
	 */
	mat2.identity = function(out) {
	    out[0] = 1;
	    out[1] = 0;
	    out[2] = 0;
	    out[3] = 1;
	    return out;
	};
	
	/**
	 * Transpose the values of a mat2
	 *
	 * @param {mat2} out the receiving matrix
	 * @param {mat2} a the source matrix
	 * @returns {mat2} out
	 */
	mat2.transpose = function(out, a) {
	    // If we are transposing ourselves we can skip a few steps but have to cache some values
	    if (out === a) {
	        var a1 = a[1];
	        out[1] = a[2];
	        out[2] = a1;
	    } else {
	        out[0] = a[0];
	        out[1] = a[2];
	        out[2] = a[1];
	        out[3] = a[3];
	    }
	    
	    return out;
	};
	
	/**
	 * Inverts a mat2
	 *
	 * @param {mat2} out the receiving matrix
	 * @param {mat2} a the source matrix
	 * @returns {mat2} out
	 */
	mat2.invert = function(out, a) {
	    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],
	
	        // Calculate the determinant
	        det = a0 * a3 - a2 * a1;
	
	    if (!det) {
	        return null;
	    }
	    det = 1.0 / det;
	    
	    out[0] =  a3 * det;
	    out[1] = -a1 * det;
	    out[2] = -a2 * det;
	    out[3] =  a0 * det;
	
	    return out;
	};
	
	/**
	 * Calculates the adjugate of a mat2
	 *
	 * @param {mat2} out the receiving matrix
	 * @param {mat2} a the source matrix
	 * @returns {mat2} out
	 */
	mat2.adjoint = function(out, a) {
	    // Caching this value is nessecary if out == a
	    var a0 = a[0];
	    out[0] =  a[3];
	    out[1] = -a[1];
	    out[2] = -a[2];
	    out[3] =  a0;
	
	    return out;
	};
	
	/**
	 * Calculates the determinant of a mat2
	 *
	 * @param {mat2} a the source matrix
	 * @returns {Number} determinant of a
	 */
	mat2.determinant = function (a) {
	    return a[0] * a[3] - a[2] * a[1];
	};
	
	/**
	 * Multiplies two mat2's
	 *
	 * @param {mat2} out the receiving matrix
	 * @param {mat2} a the first operand
	 * @param {mat2} b the second operand
	 * @returns {mat2} out
	 */
	mat2.multiply = function (out, a, b) {
	    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
	    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
	    out[0] = a0 * b0 + a2 * b1;
	    out[1] = a1 * b0 + a3 * b1;
	    out[2] = a0 * b2 + a2 * b3;
	    out[3] = a1 * b2 + a3 * b3;
	    return out;
	};
	
	/**
	 * Alias for {@link mat2.multiply}
	 * @function
	 */
	mat2.mul = mat2.multiply;
	
	/**
	 * Rotates a mat2 by the given angle
	 *
	 * @param {mat2} out the receiving matrix
	 * @param {mat2} a the matrix to rotate
	 * @param {Number} rad the angle to rotate the matrix by
	 * @returns {mat2} out
	 */
	mat2.rotate = function (out, a, rad) {
	    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],
	        s = Math.sin(rad),
	        c = Math.cos(rad);
	    out[0] = a0 *  c + a2 * s;
	    out[1] = a1 *  c + a3 * s;
	    out[2] = a0 * -s + a2 * c;
	    out[3] = a1 * -s + a3 * c;
	    return out;
	};
	
	/**
	 * Scales the mat2 by the dimensions in the given vec2
	 *
	 * @param {mat2} out the receiving matrix
	 * @param {mat2} a the matrix to rotate
	 * @param {vec2} v the vec2 to scale the matrix by
	 * @returns {mat2} out
	 **/
	mat2.scale = function(out, a, v) {
	    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],
	        v0 = v[0], v1 = v[1];
	    out[0] = a0 * v0;
	    out[1] = a1 * v0;
	    out[2] = a2 * v1;
	    out[3] = a3 * v1;
	    return out;
	};
	
	/**
	 * Creates a matrix from a given angle
	 * This is equivalent to (but much faster than):
	 *
	 *     mat2.identity(dest);
	 *     mat2.rotate(dest, dest, rad);
	 *
	 * @param {mat2} out mat2 receiving operation result
	 * @param {Number} rad the angle to rotate the matrix by
	 * @returns {mat2} out
	 */
	mat2.fromRotation = function(out, rad) {
	    var s = Math.sin(rad),
	        c = Math.cos(rad);
	    out[0] = c;
	    out[1] = s;
	    out[2] = -s;
	    out[3] = c;
	    return out;
	}
	
	/**
	 * Creates a matrix from a vector scaling
	 * This is equivalent to (but much faster than):
	 *
	 *     mat2.identity(dest);
	 *     mat2.scale(dest, dest, vec);
	 *
	 * @param {mat2} out mat2 receiving operation result
	 * @param {vec2} v Scaling vector
	 * @returns {mat2} out
	 */
	mat2.fromScaling = function(out, v) {
	    out[0] = v[0];
	    out[1] = 0;
	    out[2] = 0;
	    out[3] = v[1];
	    return out;
	}
	
	/**
	 * Returns a string representation of a mat2
	 *
	 * @param {mat2} mat matrix to represent as a string
	 * @returns {String} string representation of the matrix
	 */
	mat2.str = function (a) {
	    return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
	};
	
	/**
	 * Returns Frobenius norm of a mat2
	 *
	 * @param {mat2} a the matrix to calculate Frobenius norm of
	 * @returns {Number} Frobenius norm
	 */
	mat2.frob = function (a) {
	    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2)))
	};
	
	/**
	 * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix
	 * @param {mat2} L the lower triangular matrix 
	 * @param {mat2} D the diagonal matrix 
	 * @param {mat2} U the upper triangular matrix 
	 * @param {mat2} a the input matrix to factorize
	 */
	
	mat2.LDU = function (L, D, U, a) { 
	    L[2] = a[2]/a[0]; 
	    U[0] = a[0]; 
	    U[1] = a[1]; 
	    U[3] = a[3] - L[2] * U[1]; 
	    return [L, D, U];       
	}; 
	
	
	module.exports = mat2;


/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.
	
	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:
	
	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.
	
	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE. */
	
	var glMatrix = __webpack_require__(9);
	
	/**
	 * @class 2x3 Matrix
	 * @name mat2d
	 * 
	 * @description 
	 * A mat2d contains six elements defined as:
	 * <pre>
	 * [a, c, tx,
	 *  b, d, ty]
	 * </pre>
	 * This is a short form for the 3x3 matrix:
	 * <pre>
	 * [a, c, tx,
	 *  b, d, ty,
	 *  0, 0, 1]
	 * </pre>
	 * The last row is ignored so the array is shorter and operations are faster.
	 */
	var mat2d = {};
	
	/**
	 * Creates a new identity mat2d
	 *
	 * @returns {mat2d} a new 2x3 matrix
	 */
	mat2d.create = function() {
	    var out = new glMatrix.ARRAY_TYPE(6);
	    out[0] = 1;
	    out[1] = 0;
	    out[2] = 0;
	    out[3] = 1;
	    out[4] = 0;
	    out[5] = 0;
	    return out;
	};
	
	/**
	 * Creates a new mat2d initialized with values from an existing matrix
	 *
	 * @param {mat2d} a matrix to clone
	 * @returns {mat2d} a new 2x3 matrix
	 */
	mat2d.clone = function(a) {
	    var out = new glMatrix.ARRAY_TYPE(6);
	    out[0] = a[0];
	    out[1] = a[1];
	    out[2] = a[2];
	    out[3] = a[3];
	    out[4] = a[4];
	    out[5] = a[5];
	    return out;
	};
	
	/**
	 * Copy the values from one mat2d to another
	 *
	 * @param {mat2d} out the receiving matrix
	 * @param {mat2d} a the source matrix
	 * @returns {mat2d} out
	 */
	mat2d.copy = function(out, a) {
	    out[0] = a[0];
	    out[1] = a[1];
	    out[2] = a[2];
	    out[3] = a[3];
	    out[4] = a[4];
	    out[5] = a[5];
	    return out;
	};
	
	/**
	 * Set a mat2d to the identity matrix
	 *
	 * @param {mat2d} out the receiving matrix
	 * @returns {mat2d} out
	 */
	mat2d.identity = function(out) {
	    out[0] = 1;
	    out[1] = 0;
	    out[2] = 0;
	    out[3] = 1;
	    out[4] = 0;
	    out[5] = 0;
	    return out;
	};
	
	/**
	 * Inverts a mat2d
	 *
	 * @param {mat2d} out the receiving matrix
	 * @param {mat2d} a the source matrix
	 * @returns {mat2d} out
	 */
	mat2d.invert = function(out, a) {
	    var aa = a[0], ab = a[1], ac = a[2], ad = a[3],
	        atx = a[4], aty = a[5];
	
	    var det = aa * ad - ab * ac;
	    if(!det){
	        return null;
	    }
	    det = 1.0 / det;
	
	    out[0] = ad * det;
	    out[1] = -ab * det;
	    out[2] = -ac * det;
	    out[3] = aa * det;
	    out[4] = (ac * aty - ad * atx) * det;
	    out[5] = (ab * atx - aa * aty) * det;
	    return out;
	};
	
	/**
	 * Calculates the determinant of a mat2d
	 *
	 * @param {mat2d} a the source matrix
	 * @returns {Number} determinant of a
	 */
	mat2d.determinant = function (a) {
	    return a[0] * a[3] - a[1] * a[2];
	};
	
	/**
	 * Multiplies two mat2d's
	 *
	 * @param {mat2d} out the receiving matrix
	 * @param {mat2d} a the first operand
	 * @param {mat2d} b the second operand
	 * @returns {mat2d} out
	 */
	mat2d.multiply = function (out, a, b) {
	    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],
	        b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];
	    out[0] = a0 * b0 + a2 * b1;
	    out[1] = a1 * b0 + a3 * b1;
	    out[2] = a0 * b2 + a2 * b3;
	    out[3] = a1 * b2 + a3 * b3;
	    out[4] = a0 * b4 + a2 * b5 + a4;
	    out[5] = a1 * b4 + a3 * b5 + a5;
	    return out;
	};
	
	/**
	 * Alias for {@link mat2d.multiply}
	 * @function
	 */
	mat2d.mul = mat2d.multiply;
	
	/**
	 * Rotates a mat2d by the given angle
	 *
	 * @param {mat2d} out the receiving matrix
	 * @param {mat2d} a the matrix to rotate
	 * @param {Number} rad the angle to rotate the matrix by
	 * @returns {mat2d} out
	 */
	mat2d.rotate = function (out, a, rad) {
	    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],
	        s = Math.sin(rad),
	        c = Math.cos(rad);
	    out[0] = a0 *  c + a2 * s;
	    out[1] = a1 *  c + a3 * s;
	    out[2] = a0 * -s + a2 * c;
	    out[3] = a1 * -s + a3 * c;
	    out[4] = a4;
	    out[5] = a5;
	    return out;
	};
	
	/**
	 * Scales the mat2d by the dimensions in the given vec2
	 *
	 * @param {mat2d} out the receiving matrix
	 * @param {mat2d} a the matrix to translate
	 * @param {vec2} v the vec2 to scale the matrix by
	 * @returns {mat2d} out
	 **/
	mat2d.scale = function(out, a, v) {
	    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],
	        v0 = v[0], v1 = v[1];
	    out[0] = a0 * v0;
	    out[1] = a1 * v0;
	    out[2] = a2 * v1;
	    out[3] = a3 * v1;
	    out[4] = a4;
	    out[5] = a5;
	    return out;
	};
	
	/**
	 * Translates the mat2d by the dimensions in the given vec2
	 *
	 * @param {mat2d} out the receiving matrix
	 * @param {mat2d} a the matrix to translate
	 * @param {vec2} v the vec2 to translate the matrix by
	 * @returns {mat2d} out
	 **/
	mat2d.translate = function(out, a, v) {
	    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],
	        v0 = v[0], v1 = v[1];
	    out[0] = a0;
	    out[1] = a1;
	    out[2] = a2;
	    out[3] = a3;
	    out[4] = a0 * v0 + a2 * v1 + a4;
	    out[5] = a1 * v0 + a3 * v1 + a5;
	    return out;
	};
	
	/**
	 * Creates a matrix from a given angle
	 * This is equivalent to (but much faster than):
	 *
	 *     mat2d.identity(dest);
	 *     mat2d.rotate(dest, dest, rad);
	 *
	 * @param {mat2d} out mat2d receiving operation result
	 * @param {Number} rad the angle to rotate the matrix by
	 * @returns {mat2d} out
	 */
	mat2d.fromRotation = function(out, rad) {
	    var s = Math.sin(rad), c = Math.cos(rad);
	    out[0] = c;
	    out[1] = s;
	    out[2] = -s;
	    out[3] = c;
	    out[4] = 0;
	    out[5] = 0;
	    return out;
	}
	
	/**
	 * Creates a matrix from a vector scaling
	 * This is equivalent to (but much faster than):
	 *
	 *     mat2d.identity(dest);
	 *     mat2d.scale(dest, dest, vec);
	 *
	 * @param {mat2d} out mat2d receiving operation result
	 * @param {vec2} v Scaling vector
	 * @returns {mat2d} out
	 */
	mat2d.fromScaling = function(out, v) {
	    out[0] = v[0];
	    out[1] = 0;
	    out[2] = 0;
	    out[3] = v[1];
	    out[4] = 0;
	    out[5] = 0;
	    return out;
	}
	
	/**
	 * Creates a matrix from a vector translation
	 * This is equivalent to (but much faster than):
	 *
	 *     mat2d.identity(dest);
	 *     mat2d.translate(dest, dest, vec);
	 *
	 * @param {mat2d} out mat2d receiving operation result
	 * @param {vec2} v Translation vector
	 * @returns {mat2d} out
	 */
	mat2d.fromTranslation = function(out, v) {
	    out[0] = 1;
	    out[1] = 0;
	    out[2] = 0;
	    out[3] = 1;
	    out[4] = v[0];
	    out[5] = v[1];
	    return out;
	}
	
	/**
	 * Returns a string representation of a mat2d
	 *
	 * @param {mat2d} a matrix to represent as a string
	 * @returns {String} string representation of the matrix
	 */
	mat2d.str = function (a) {
	    return 'mat2d(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + 
	                    a[3] + ', ' + a[4] + ', ' + a[5] + ')';
	};
	
	/**
	 * Returns Frobenius norm of a mat2d
	 *
	 * @param {mat2d} a the matrix to calculate Frobenius norm of
	 * @returns {Number} Frobenius norm
	 */
	mat2d.frob = function (a) { 
	    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + 1))
	}; 
	
	module.exports = mat2d;


/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.
	
	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:
	
	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.
	
	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE. */
	
	var glMatrix = __webpack_require__(9);
	
	/**
	 * @class 3x3 Matrix
	 * @name mat3
	 */
	var mat3 = {};
	
	/**
	 * Creates a new identity mat3
	 *
	 * @returns {mat3} a new 3x3 matrix
	 */
	mat3.create = function() {
	    var out = new glMatrix.ARRAY_TYPE(9);
	    out[0] = 1;
	    out[1] = 0;
	    out[2] = 0;
	    out[3] = 0;
	    out[4] = 1;
	    out[5] = 0;
	    out[6] = 0;
	    out[7] = 0;
	    out[8] = 1;
	    return out;
	};
	
	/**
	 * Copies the upper-left 3x3 values into the given mat3.
	 *
	 * @param {mat3} out the receiving 3x3 matrix
	 * @param {mat4} a   the source 4x4 matrix
	 * @returns {mat3} out
	 */
	mat3.fromMat4 = function(out, a) {
	    out[0] = a[0];
	    out[1] = a[1];
	    out[2] = a[2];
	    out[3] = a[4];
	    out[4] = a[5];
	    out[5] = a[6];
	    out[6] = a[8];
	    out[7] = a[9];
	    out[8] = a[10];
	    return out;
	};
	
	/**
	 * Creates a new mat3 initialized with values from an existing matrix
	 *
	 * @param {mat3} a matrix to clone
	 * @returns {mat3} a new 3x3 matrix
	 */
	mat3.clone = function(a) {
	    var out = new glMatrix.ARRAY_TYPE(9);
	    out[0] = a[0];
	    out[1] = a[1];
	    out[2] = a[2];
	    out[3] = a[3];
	    out[4] = a[4];
	    out[5] = a[5];
	    out[6] = a[6];
	    out[7] = a[7];
	    out[8] = a[8];
	    return out;
	};
	
	/**
	 * Copy the values from one mat3 to another
	 *
	 * @param {mat3} out the receiving matrix
	 * @param {mat3} a the source matrix
	 * @returns {mat3} out
	 */
	mat3.copy = function(out, a) {
	    out[0] = a[0];
	    out[1] = a[1];
	    out[2] = a[2];
	    out[3] = a[3];
	    out[4] = a[4];
	    out[5] = a[5];
	    out[6] = a[6];
	    out[7] = a[7];
	    out[8] = a[8];
	    return out;
	};
	
	/**
	 * Set a mat3 to the identity matrix
	 *
	 * @param {mat3} out the receiving matrix
	 * @returns {mat3} out
	 */
	mat3.identity = function(out) {
	    out[0] = 1;
	    out[1] = 0;
	    out[2] = 0;
	    out[3] = 0;
	    out[4] = 1;
	    out[5] = 0;
	    out[6] = 0;
	    out[7] = 0;
	    out[8] = 1;
	    return out;
	};
	
	/**
	 * Transpose the values of a mat3
	 *
	 * @param {mat3} out the receiving matrix
	 * @param {mat3} a the source matrix
	 * @returns {mat3} out
	 */
	mat3.transpose = function(out, a) {
	    // If we are transposing ourselves we can skip a few steps but have to cache some values
	    if (out === a) {
	        var a01 = a[1], a02 = a[2], a12 = a[5];
	        out[1] = a[3];
	        out[2] = a[6];
	        out[3] = a01;
	        out[5] = a[7];
	        out[6] = a02;
	        out[7] = a12;
	    } else {
	        out[0] = a[0];
	        out[1] = a[3];
	        out[2] = a[6];
	        out[3] = a[1];
	        out[4] = a[4];
	        out[5] = a[7];
	        out[6] = a[2];
	        out[7] = a[5];
	        out[8] = a[8];
	    }
	    
	    return out;
	};
	
	/**
	 * Inverts a mat3
	 *
	 * @param {mat3} out the receiving matrix
	 * @param {mat3} a the source matrix
	 * @returns {mat3} out
	 */
	mat3.invert = function(out, a) {
	    var a00 = a[0], a01 = a[1], a02 = a[2],
	        a10 = a[3], a11 = a[4], a12 = a[5],
	        a20 = a[6], a21 = a[7], a22 = a[8],
	
	        b01 = a22 * a11 - a12 * a21,
	        b11 = -a22 * a10 + a12 * a20,
	        b21 = a21 * a10 - a11 * a20,
	
	        // Calculate the determinant
	        det = a00 * b01 + a01 * b11 + a02 * b21;
	
	    if (!det) { 
	        return null; 
	    }
	    det = 1.0 / det;
	
	    out[0] = b01 * det;
	    out[1] = (-a22 * a01 + a02 * a21) * det;
	    out[2] = (a12 * a01 - a02 * a11) * det;
	    out[3] = b11 * det;
	    out[4] = (a22 * a00 - a02 * a20) * det;
	    out[5] = (-a12 * a00 + a02 * a10) * det;
	    out[6] = b21 * det;
	    out[7] = (-a21 * a00 + a01 * a20) * det;
	    out[8] = (a11 * a00 - a01 * a10) * det;
	    return out;
	};
	
	/**
	 * Calculates the adjugate of a mat3
	 *
	 * @param {mat3} out the receiving matrix
	 * @param {mat3} a the source matrix
	 * @returns {mat3} out
	 */
	mat3.adjoint = function(out, a) {
	    var a00 = a[0], a01 = a[1], a02 = a[2],
	        a10 = a[3], a11 = a[4], a12 = a[5],
	        a20 = a[6], a21 = a[7], a22 = a[8];
	
	    out[0] = (a11 * a22 - a12 * a21);
	    out[1] = (a02 * a21 - a01 * a22);
	    out[2] = (a01 * a12 - a02 * a11);
	    out[3] = (a12 * a20 - a10 * a22);
	    out[4] = (a00 * a22 - a02 * a20);
	    out[5] = (a02 * a10 - a00 * a12);
	    out[6] = (a10 * a21 - a11 * a20);
	    out[7] = (a01 * a20 - a00 * a21);
	    out[8] = (a00 * a11 - a01 * a10);
	    return out;
	};
	
	/**
	 * Calculates the determinant of a mat3
	 *
	 * @param {mat3} a the source matrix
	 * @returns {Number} determinant of a
	 */
	mat3.determinant = function (a) {
	    var a00 = a[0], a01 = a[1], a02 = a[2],
	        a10 = a[3], a11 = a[4], a12 = a[5],
	        a20 = a[6], a21 = a[7], a22 = a[8];
	
	    return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);
	};
	
	/**
	 * Multiplies two mat3's
	 *
	 * @param {mat3} out the receiving matrix
	 * @param {mat3} a the first operand
	 * @param {mat3} b the second operand
	 * @returns {mat3} out
	 */
	mat3.multiply = function (out, a, b) {
	    var a00 = a[0], a01 = a[1], a02 = a[2],
	        a10 = a[3], a11 = a[4], a12 = a[5],
	        a20 = a[6], a21 = a[7], a22 = a[8],
	
	        b00 = b[0], b01 = b[1], b02 = b[2],
	        b10 = b[3], b11 = b[4], b12 = b[5],
	        b20 = b[6], b21 = b[7], b22 = b[8];
	
	    out[0] = b00 * a00 + b01 * a10 + b02 * a20;
	    out[1] = b00 * a01 + b01 * a11 + b02 * a21;
	    out[2] = b00 * a02 + b01 * a12 + b02 * a22;
	
	    out[3] = b10 * a00 + b11 * a10 + b12 * a20;
	    out[4] = b10 * a01 + b11 * a11 + b12 * a21;
	    out[5] = b10 * a02 + b11 * a12 + b12 * a22;
	
	    out[6] = b20 * a00 + b21 * a10 + b22 * a20;
	    out[7] = b20 * a01 + b21 * a11 + b22 * a21;
	    out[8] = b20 * a02 + b21 * a12 + b22 * a22;
	    return out;
	};
	
	/**
	 * Alias for {@link mat3.multiply}
	 * @function
	 */
	mat3.mul = mat3.multiply;
	
	/**
	 * Translate a mat3 by the given vector
	 *
	 * @param {mat3} out the receiving matrix
	 * @param {mat3} a the matrix to translate
	 * @param {vec2} v vector to translate by
	 * @returns {mat3} out
	 */
	mat3.translate = function(out, a, v) {
	    var a00 = a[0], a01 = a[1], a02 = a[2],
	        a10 = a[3], a11 = a[4], a12 = a[5],
	        a20 = a[6], a21 = a[7], a22 = a[8],
	        x = v[0], y = v[1];
	
	    out[0] = a00;
	    out[1] = a01;
	    out[2] = a02;
	
	    out[3] = a10;
	    out[4] = a11;
	    out[5] = a12;
	
	    out[6] = x * a00 + y * a10 + a20;
	    out[7] = x * a01 + y * a11 + a21;
	    out[8] = x * a02 + y * a12 + a22;
	    return out;
	};
	
	/**
	 * Rotates a mat3 by the given angle
	 *
	 * @param {mat3} out the receiving matrix
	 * @param {mat3} a the matrix to rotate
	 * @param {Number} rad the angle to rotate the matrix by
	 * @returns {mat3} out
	 */
	mat3.rotate = function (out, a, rad) {
	    var a00 = a[0], a01 = a[1], a02 = a[2],
	        a10 = a[3], a11 = a[4], a12 = a[5],
	        a20 = a[6], a21 = a[7], a22 = a[8],
	
	        s = Math.sin(rad),
	        c = Math.cos(rad);
	
	    out[0] = c * a00 + s * a10;
	    out[1] = c * a01 + s * a11;
	    out[2] = c * a02 + s * a12;
	
	    out[3] = c * a10 - s * a00;
	    out[4] = c * a11 - s * a01;
	    out[5] = c * a12 - s * a02;
	
	    out[6] = a20;
	    out[7] = a21;
	    out[8] = a22;
	    return out;
	};
	
	/**
	 * Scales the mat3 by the dimensions in the given vec2
	 *
	 * @param {mat3} out the receiving matrix
	 * @param {mat3} a the matrix to rotate
	 * @param {vec2} v the vec2 to scale the matrix by
	 * @returns {mat3} out
	 **/
	mat3.scale = function(out, a, v) {
	    var x = v[0], y = v[1];
	
	    out[0] = x * a[0];
	    out[1] = x * a[1];
	    out[2] = x * a[2];
	
	    out[3] = y * a[3];
	    out[4] = y * a[4];
	    out[5] = y * a[5];
	
	    out[6] = a[6];
	    out[7] = a[7];
	    out[8] = a[8];
	    return out;
	};
	
	/**
	 * Creates a matrix from a vector translation
	 * This is equivalent to (but much faster than):
	 *
	 *     mat3.identity(dest);
	 *     mat3.translate(dest, dest, vec);
	 *
	 * @param {mat3} out mat3 receiving operation result
	 * @param {vec2} v Translation vector
	 * @returns {mat3} out
	 */
	mat3.fromTranslation = function(out, v) {
	    out[0] = 1;
	    out[1] = 0;
	    out[2] = 0;
	    out[3] = 0;
	    out[4] = 1;
	    out[5] = 0;
	    out[6] = v[0];
	    out[7] = v[1];
	    out[8] = 1;
	    return out;
	}
	
	/**
	 * Creates a matrix from a given angle
	 * This is equivalent to (but much faster than):
	 *
	 *     mat3.identity(dest);
	 *     mat3.rotate(dest, dest, rad);
	 *
	 * @param {mat3} out mat3 receiving operation result
	 * @param {Number} rad the angle to rotate the matrix by
	 * @returns {mat3} out
	 */
	mat3.fromRotation = function(out, rad) {
	    var s = Math.sin(rad), c = Math.cos(rad);
	
	    out[0] = c;
	    out[1] = s;
	    out[2] = 0;
	
	    out[3] = -s;
	    out[4] = c;
	    out[5] = 0;
	
	    out[6] = 0;
	    out[7] = 0;
	    out[8] = 1;
	    return out;
	}
	
	/**
	 * Creates a matrix from a vector scaling
	 * This is equivalent to (but much faster than):
	 *
	 *     mat3.identity(dest);
	 *     mat3.scale(dest, dest, vec);
	 *
	 * @param {mat3} out mat3 receiving operation result
	 * @param {vec2} v Scaling vector
	 * @returns {mat3} out
	 */
	mat3.fromScaling = function(out, v) {
	    out[0] = v[0];
	    out[1] = 0;
	    out[2] = 0;
	
	    out[3] = 0;
	    out[4] = v[1];
	    out[5] = 0;
	
	    out[6] = 0;
	    out[7] = 0;
	    out[8] = 1;
	    return out;
	}
	
	/**
	 * Copies the values from a mat2d into a mat3
	 *
	 * @param {mat3} out the receiving matrix
	 * @param {mat2d} a the matrix to copy
	 * @returns {mat3} out
	 **/
	mat3.fromMat2d = function(out, a) {
	    out[0] = a[0];
	    out[1] = a[1];
	    out[2] = 0;
	
	    out[3] = a[2];
	    out[4] = a[3];
	    out[5] = 0;
	
	    out[6] = a[4];
	    out[7] = a[5];
	    out[8] = 1;
	    return out;
	};
	
	/**
	* Calculates a 3x3 matrix from the given quaternion
	*
	* @param {mat3} out mat3 receiving operation result
	* @param {quat} q Quaternion to create matrix from
	*
	* @returns {mat3} out
	*/
	mat3.fromQuat = function (out, q) {
	    var x = q[0], y = q[1], z = q[2], w = q[3],
	        x2 = x + x,
	        y2 = y + y,
	        z2 = z + z,
	
	        xx = x * x2,
	        yx = y * x2,
	        yy = y * y2,
	        zx = z * x2,
	        zy = z * y2,
	        zz = z * z2,
	        wx = w * x2,
	        wy = w * y2,
	        wz = w * z2;
	
	    out[0] = 1 - yy - zz;
	    out[3] = yx - wz;
	    out[6] = zx + wy;
	
	    out[1] = yx + wz;
	    out[4] = 1 - xx - zz;
	    out[7] = zy - wx;
	
	    out[2] = zx - wy;
	    out[5] = zy + wx;
	    out[8] = 1 - xx - yy;
	
	    return out;
	};
	
	/**
	* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix
	*
	* @param {mat3} out mat3 receiving operation result
	* @param {mat4} a Mat4 to derive the normal matrix from
	*
	* @returns {mat3} out
	*/
	mat3.normalFromMat4 = function (out, a) {
	    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
	        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
	        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
	        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],
	
	        b00 = a00 * a11 - a01 * a10,
	        b01 = a00 * a12 - a02 * a10,
	        b02 = a00 * a13 - a03 * a10,
	        b03 = a01 * a12 - a02 * a11,
	        b04 = a01 * a13 - a03 * a11,
	        b05 = a02 * a13 - a03 * a12,
	        b06 = a20 * a31 - a21 * a30,
	        b07 = a20 * a32 - a22 * a30,
	        b08 = a20 * a33 - a23 * a30,
	        b09 = a21 * a32 - a22 * a31,
	        b10 = a21 * a33 - a23 * a31,
	        b11 = a22 * a33 - a23 * a32,
	
	        // Calculate the determinant
	        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
	
	    if (!det) { 
	        return null; 
	    }
	    det = 1.0 / det;
	
	    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
	    out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
	    out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
	
	    out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
	    out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
	    out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
	
	    out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
	    out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
	    out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
	
	    return out;
	};
	
	/**
	 * Returns a string representation of a mat3
	 *
	 * @param {mat3} mat matrix to represent as a string
	 * @returns {String} string representation of the matrix
	 */
	mat3.str = function (a) {
	    return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + 
	                    a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + 
	                    a[6] + ', ' + a[7] + ', ' + a[8] + ')';
	};
	
	/**
	 * Returns Frobenius norm of a mat3
	 *
	 * @param {mat3} a the matrix to calculate Frobenius norm of
	 * @returns {Number} Frobenius norm
	 */
	mat3.frob = function (a) {
	    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2)))
	};
	
	
	module.exports = mat3;


/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.
	
	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:
	
	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.
	
	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE. */
	
	var glMatrix = __webpack_require__(9);
	
	/**
	 * @class 4x4 Matrix
	 * @name mat4
	 */
	var mat4 = {};
	
	/**
	 * Creates a new identity mat4
	 *
	 * @returns {mat4} a new 4x4 matrix
	 */
	mat4.create = function() {
	    var out = new glMatrix.ARRAY_TYPE(16);
	    out[0] = 1;
	    out[1] = 0;
	    out[2] = 0;
	    out[3] = 0;
	    out[4] = 0;
	    out[5] = 1;
	    out[6] = 0;
	    out[7] = 0;
	    out[8] = 0;
	    out[9] = 0;
	    out[10] = 1;
	    out[11] = 0;
	    out[12] = 0;
	    out[13] = 0;
	    out[14] = 0;
	    out[15] = 1;
	    return out;
	};
	
	/**
	 * Creates a new mat4 initialized with values from an existing matrix
	 *
	 * @param {mat4} a matrix to clone
	 * @returns {mat4} a new 4x4 matrix
	 */
	mat4.clone = function(a) {
	    var out = new glMatrix.ARRAY_TYPE(16);
	    out[0] = a[0];
	    out[1] = a[1];
	    out[2] = a[2];
	    out[3] = a[3];
	    out[4] = a[4];
	    out[5] = a[5];
	    out[6] = a[6];
	    out[7] = a[7];
	    out[8] = a[8];
	    out[9] = a[9];
	    out[10] = a[10];
	    out[11] = a[11];
	    out[12] = a[12];
	    out[13] = a[13];
	    out[14] = a[14];
	    out[15] = a[15];
	    return out;
	};
	
	/**
	 * Copy the values from one mat4 to another
	 *
	 * @param {mat4} out the receiving matrix
	 * @param {mat4} a the source matrix
	 * @returns {mat4} out
	 */
	mat4.copy = function(out, a) {
	    out[0] = a[0];
	    out[1] = a[1];
	    out[2] = a[2];
	    out[3] = a[3];
	    out[4] = a[4];
	    out[5] = a[5];
	    out[6] = a[6];
	    out[7] = a[7];
	    out[8] = a[8];
	    out[9] = a[9];
	    out[10] = a[10];
	    out[11] = a[11];
	    out[12] = a[12];
	    out[13] = a[13];
	    out[14] = a[14];
	    out[15] = a[15];
	    return out;
	};
	
	/**
	 * Set a mat4 to the identity matrix
	 *
	 * @param {mat4} out the receiving matrix
	 * @returns {mat4} out
	 */
	mat4.identity = function(out) {
	    out[0] = 1;
	    out[1] = 0;
	    out[2] = 0;
	    out[3] = 0;
	    out[4] = 0;
	    out[5] = 1;
	    out[6] = 0;
	    out[7] = 0;
	    out[8] = 0;
	    out[9] = 0;
	    out[10] = 1;
	    out[11] = 0;
	    out[12] = 0;
	    out[13] = 0;
	    out[14] = 0;
	    out[15] = 1;
	    return out;
	};
	
	/**
	 * Transpose the values of a mat4
	 *
	 * @param {mat4} out the receiving matrix
	 * @param {mat4} a the source matrix
	 * @returns {mat4} out
	 */
	mat4.transpose = function(out, a) {
	    // If we are transposing ourselves we can skip a few steps but have to cache some values
	    if (out === a) {
	        var a01 = a[1], a02 = a[2], a03 = a[3],
	            a12 = a[6], a13 = a[7],
	            a23 = a[11];
	
	        out[1] = a[4];
	        out[2] = a[8];
	        out[3] = a[12];
	        out[4] = a01;
	        out[6] = a[9];
	        out[7] = a[13];
	        out[8] = a02;
	        out[9] = a12;
	        out[11] = a[14];
	        out[12] = a03;
	        out[13] = a13;
	        out[14] = a23;
	    } else {
	        out[0] = a[0];
	        out[1] = a[4];
	        out[2] = a[8];
	        out[3] = a[12];
	        out[4] = a[1];
	        out[5] = a[5];
	        out[6] = a[9];
	        out[7] = a[13];
	        out[8] = a[2];
	        out[9] = a[6];
	        out[10] = a[10];
	        out[11] = a[14];
	        out[12] = a[3];
	        out[13] = a[7];
	        out[14] = a[11];
	        out[15] = a[15];
	    }
	    
	    return out;
	};
	
	/**
	 * Inverts a mat4
	 *
	 * @param {mat4} out the receiving matrix
	 * @param {mat4} a the source matrix
	 * @returns {mat4} out
	 */
	mat4.invert = function(out, a) {
	    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
	        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
	        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
	        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],
	
	        b00 = a00 * a11 - a01 * a10,
	        b01 = a00 * a12 - a02 * a10,
	        b02 = a00 * a13 - a03 * a10,
	        b03 = a01 * a12 - a02 * a11,
	        b04 = a01 * a13 - a03 * a11,
	        b05 = a02 * a13 - a03 * a12,
	        b06 = a20 * a31 - a21 * a30,
	        b07 = a20 * a32 - a22 * a30,
	        b08 = a20 * a33 - a23 * a30,
	        b09 = a21 * a32 - a22 * a31,
	        b10 = a21 * a33 - a23 * a31,
	        b11 = a22 * a33 - a23 * a32,
	
	        // Calculate the determinant
	        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
	
	    if (!det) { 
	        return null; 
	    }
	    det = 1.0 / det;
	
	    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
	    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
	    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
	    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
	    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
	    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
	    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
	    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
	    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
	    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
	    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
	    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
	    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
	    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
	    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
	    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;
	
	    return out;
	};
	
	/**
	 * Calculates the adjugate of a mat4
	 *
	 * @param {mat4} out the receiving matrix
	 * @param {mat4} a the source matrix
	 * @returns {mat4} out
	 */
	mat4.adjoint = function(out, a) {
	    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
	        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
	        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
	        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];
	
	    out[0]  =  (a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22));
	    out[1]  = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));
	    out[2]  =  (a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12));
	    out[3]  = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));
	    out[4]  = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));
	    out[5]  =  (a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22));
	    out[6]  = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));
	    out[7]  =  (a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12));
	    out[8]  =  (a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21));
	    out[9]  = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));
	    out[10] =  (a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11));
	    out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));
	    out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));
	    out[13] =  (a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21));
	    out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));
	    out[15] =  (a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11));
	    return out;
	};
	
	/**
	 * Calculates the determinant of a mat4
	 *
	 * @param {mat4} a the source matrix
	 * @returns {Number} determinant of a
	 */
	mat4.determinant = function (a) {
	    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
	        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
	        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
	        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],
	
	        b00 = a00 * a11 - a01 * a10,
	        b01 = a00 * a12 - a02 * a10,
	        b02 = a00 * a13 - a03 * a10,
	        b03 = a01 * a12 - a02 * a11,
	        b04 = a01 * a13 - a03 * a11,
	        b05 = a02 * a13 - a03 * a12,
	        b06 = a20 * a31 - a21 * a30,
	        b07 = a20 * a32 - a22 * a30,
	        b08 = a20 * a33 - a23 * a30,
	        b09 = a21 * a32 - a22 * a31,
	        b10 = a21 * a33 - a23 * a31,
	        b11 = a22 * a33 - a23 * a32;
	
	    // Calculate the determinant
	    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
	};
	
	/**
	 * Multiplies two mat4's
	 *
	 * @param {mat4} out the receiving matrix
	 * @param {mat4} a the first operand
	 * @param {mat4} b the second operand
	 * @returns {mat4} out
	 */
	mat4.multiply = function (out, a, b) {
	    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
	        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
	        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
	        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];
	
	    // Cache only the current line of the second matrix
	    var b0  = b[0], b1 = b[1], b2 = b[2], b3 = b[3];  
	    out[0] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
	    out[1] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
	    out[2] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
	    out[3] = b0*a03 + b1*a13 + b2*a23 + b3*a33;
	
	    b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];
	    out[4] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
	    out[5] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
	    out[6] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
	    out[7] = b0*a03 + b1*a13 + b2*a23 + b3*a33;
	
	    b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];
	    out[8] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
	    out[9] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
	    out[10] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
	    out[11] = b0*a03 + b1*a13 + b2*a23 + b3*a33;
	
	    b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];
	    out[12] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
	    out[13] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
	    out[14] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
	    out[15] = b0*a03 + b1*a13 + b2*a23 + b3*a33;
	    return out;
	};
	
	/**
	 * Alias for {@link mat4.multiply}
	 * @function
	 */
	mat4.mul = mat4.multiply;
	
	/**
	 * Translate a mat4 by the given vector
	 *
	 * @param {mat4} out the receiving matrix
	 * @param {mat4} a the matrix to translate
	 * @param {vec3} v vector to translate by
	 * @returns {mat4} out
	 */
	mat4.translate = function (out, a, v) {
	    var x = v[0], y = v[1], z = v[2],
	        a00, a01, a02, a03,
	        a10, a11, a12, a13,
	        a20, a21, a22, a23;
	
	    if (a === out) {
	        out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
	        out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
	        out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
	        out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
	    } else {
	        a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];
	        a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];
	        a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];
	
	        out[0] = a00; out[1] = a01; out[2] = a02; out[3] = a03;
	        out[4] = a10; out[5] = a11; out[6] = a12; out[7] = a13;
	        out[8] = a20; out[9] = a21; out[10] = a22; out[11] = a23;
	
	        out[12] = a00 * x + a10 * y + a20 * z + a[12];
	        out[13] = a01 * x + a11 * y + a21 * z + a[13];
	        out[14] = a02 * x + a12 * y + a22 * z + a[14];
	        out[15] = a03 * x + a13 * y + a23 * z + a[15];
	    }
	
	    return out;
	};
	
	/**
	 * Scales the mat4 by the dimensions in the given vec3
	 *
	 * @param {mat4} out the receiving matrix
	 * @param {mat4} a the matrix to scale
	 * @param {vec3} v the vec3 to scale the matrix by
	 * @returns {mat4} out
	 **/
	mat4.scale = function(out, a, v) {
	    var x = v[0], y = v[1], z = v[2];
	
	    out[0] = a[0] * x;
	    out[1] = a[1] * x;
	    out[2] = a[2] * x;
	    out[3] = a[3] * x;
	    out[4] = a[4] * y;
	    out[5] = a[5] * y;
	    out[6] = a[6] * y;
	    out[7] = a[7] * y;
	    out[8] = a[8] * z;
	    out[9] = a[9] * z;
	    out[10] = a[10] * z;
	    out[11] = a[11] * z;
	    out[12] = a[12];
	    out[13] = a[13];
	    out[14] = a[14];
	    out[15] = a[15];
	    return out;
	};
	
	/**
	 * Rotates a mat4 by the given angle around the given axis
	 *
	 * @param {mat4} out the receiving matrix
	 * @param {mat4} a the matrix to rotate
	 * @param {Number} rad the angle to rotate the matrix by
	 * @param {vec3} axis the axis to rotate around
	 * @returns {mat4} out
	 */
	mat4.rotate = function (out, a, rad, axis) {
	    var x = axis[0], y = axis[1], z = axis[2],
	        len = Math.sqrt(x * x + y * y + z * z),
	        s, c, t,
	        a00, a01, a02, a03,
	        a10, a11, a12, a13,
	        a20, a21, a22, a23,
	        b00, b01, b02,
	        b10, b11, b12,
	        b20, b21, b22;
	
	    if (Math.abs(len) < glMatrix.EPSILON) { return null; }
	    
	    len = 1 / len;
	    x *= len;
	    y *= len;
	    z *= len;
	
	    s = Math.sin(rad);
	    c = Math.cos(rad);
	    t = 1 - c;
	
	    a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];
	    a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];
	    a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];
	
	    // Construct the elements of the rotation matrix
	    b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;
	    b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;
	    b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;
	
	    // Perform rotation-specific matrix multiplication
	    out[0] = a00 * b00 + a10 * b01 + a20 * b02;
	    out[1] = a01 * b00 + a11 * b01 + a21 * b02;
	    out[2] = a02 * b00 + a12 * b01 + a22 * b02;
	    out[3] = a03 * b00 + a13 * b01 + a23 * b02;
	    out[4] = a00 * b10 + a10 * b11 + a20 * b12;
	    out[5] = a01 * b10 + a11 * b11 + a21 * b12;
	    out[6] = a02 * b10 + a12 * b11 + a22 * b12;
	    out[7] = a03 * b10 + a13 * b11 + a23 * b12;
	    out[8] = a00 * b20 + a10 * b21 + a20 * b22;
	    out[9] = a01 * b20 + a11 * b21 + a21 * b22;
	    out[10] = a02 * b20 + a12 * b21 + a22 * b22;
	    out[11] = a03 * b20 + a13 * b21 + a23 * b22;
	
	    if (a !== out) { // If the source and destination differ, copy the unchanged last row
	        out[12] = a[12];
	        out[13] = a[13];
	        out[14] = a[14];
	        out[15] = a[15];
	    }
	    return out;
	};
	
	/**
	 * Rotates a matrix by the given angle around the X axis
	 *
	 * @param {mat4} out the receiving matrix
	 * @param {mat4} a the matrix to rotate
	 * @param {Number} rad the angle to rotate the matrix by
	 * @returns {mat4} out
	 */
	mat4.rotateX = function (out, a, rad) {
	    var s = Math.sin(rad),
	        c = Math.cos(rad),
	        a10 = a[4],
	        a11 = a[5],
	        a12 = a[6],
	        a13 = a[7],
	        a20 = a[8],
	        a21 = a[9],
	        a22 = a[10],
	        a23 = a[11];
	
	    if (a !== out) { // If the source and destination differ, copy the unchanged rows
	        out[0]  = a[0];
	        out[1]  = a[1];
	        out[2]  = a[2];
	        out[3]  = a[3];
	        out[12] = a[12];
	        out[13] = a[13];
	        out[14] = a[14];
	        out[15] = a[15];
	    }
	
	    // Perform axis-specific matrix multiplication
	    out[4] = a10 * c + a20 * s;
	    out[5] = a11 * c + a21 * s;
	    out[6] = a12 * c + a22 * s;
	    out[7] = a13 * c + a23 * s;
	    out[8] = a20 * c - a10 * s;
	    out[9] = a21 * c - a11 * s;
	    out[10] = a22 * c - a12 * s;
	    out[11] = a23 * c - a13 * s;
	    return out;
	};
	
	/**
	 * Rotates a matrix by the given angle around the Y axis
	 *
	 * @param {mat4} out the receiving matrix
	 * @param {mat4} a the matrix to rotate
	 * @param {Number} rad the angle to rotate the matrix by
	 * @returns {mat4} out
	 */
	mat4.rotateY = function (out, a, rad) {
	    var s = Math.sin(rad),
	        c = Math.cos(rad),
	        a00 = a[0],
	        a01 = a[1],
	        a02 = a[2],
	        a03 = a[3],
	        a20 = a[8],
	        a21 = a[9],
	        a22 = a[10],
	        a23 = a[11];
	
	    if (a !== out) { // If the source and destination differ, copy the unchanged rows
	        out[4]  = a[4];
	        out[5]  = a[5];
	        out[6]  = a[6];
	        out[7]  = a[7];
	        out[12] = a[12];
	        out[13] = a[13];
	        out[14] = a[14];
	        out[15] = a[15];
	    }
	
	    // Perform axis-specific matrix multiplication
	    out[0] = a00 * c - a20 * s;
	    out[1] = a01 * c - a21 * s;
	    out[2] = a02 * c - a22 * s;
	    out[3] = a03 * c - a23 * s;
	    out[8] = a00 * s + a20 * c;
	    out[9] = a01 * s + a21 * c;
	    out[10] = a02 * s + a22 * c;
	    out[11] = a03 * s + a23 * c;
	    return out;
	};
	
	/**
	 * Rotates a matrix by the given angle around the Z axis
	 *
	 * @param {mat4} out the receiving matrix
	 * @param {mat4} a the matrix to rotate
	 * @param {Number} rad the angle to rotate the matrix by
	 * @returns {mat4} out
	 */
	mat4.rotateZ = function (out, a, rad) {
	    var s = Math.sin(rad),
	        c = Math.cos(rad),
	        a00 = a[0],
	        a01 = a[1],
	        a02 = a[2],
	        a03 = a[3],
	        a10 = a[4],
	        a11 = a[5],
	        a12 = a[6],
	        a13 = a[7];
	
	    if (a !== out) { // If the source and destination differ, copy the unchanged last row
	        out[8]  = a[8];
	        out[9]  = a[9];
	        out[10] = a[10];
	        out[11] = a[11];
	        out[12] = a[12];
	        out[13] = a[13];
	        out[14] = a[14];
	        out[15] = a[15];
	    }
	
	    // Perform axis-specific matrix multiplication
	    out[0] = a00 * c + a10 * s;
	    out[1] = a01 * c + a11 * s;
	    out[2] = a02 * c + a12 * s;
	    out[3] = a03 * c + a13 * s;
	    out[4] = a10 * c - a00 * s;
	    out[5] = a11 * c - a01 * s;
	    out[6] = a12 * c - a02 * s;
	    out[7] = a13 * c - a03 * s;
	    return out;
	};
	
	/**
	 * Creates a matrix from a vector translation
	 * This is equivalent to (but much faster than):
	 *
	 *     mat4.identity(dest);
	 *     mat4.translate(dest, dest, vec);
	 *
	 * @param {mat4} out mat4 receiving operation result
	 * @param {vec3} v Translation vector
	 * @returns {mat4} out
	 */
	mat4.fromTranslation = function(out, v) {
	    out[0] = 1;
	    out[1] = 0;
	    out[2] = 0;
	    out[3] = 0;
	    out[4] = 0;
	    out[5] = 1;
	    out[6] = 0;
	    out[7] = 0;
	    out[8] = 0;
	    out[9] = 0;
	    out[10] = 1;
	    out[11] = 0;
	    out[12] = v[0];
	    out[13] = v[1];
	    out[14] = v[2];
	    out[15] = 1;
	    return out;
	}
	
	/**
	 * Creates a matrix from a vector scaling
	 * This is equivalent to (but much faster than):
	 *
	 *     mat4.identity(dest);
	 *     mat4.scale(dest, dest, vec);
	 *
	 * @param {mat4} out mat4 receiving operation result
	 * @param {vec3} v Scaling vector
	 * @returns {mat4} out
	 */
	mat4.fromScaling = function(out, v) {
	    out[0] = v[0];
	    out[1] = 0;
	    out[2] = 0;
	    out[3] = 0;
	    out[4] = 0;
	    out[5] = v[1];
	    out[6] = 0;
	    out[7] = 0;
	    out[8] = 0;
	    out[9] = 0;
	    out[10] = v[2];
	    out[11] = 0;
	    out[12] = 0;
	    out[13] = 0;
	    out[14] = 0;
	    out[15] = 1;
	    return out;
	}
	
	/**
	 * Creates a matrix from a given angle around a given axis
	 * This is equivalent to (but much faster than):
	 *
	 *     mat4.identity(dest);
	 *     mat4.rotate(dest, dest, rad, axis);
	 *
	 * @param {mat4} out mat4 receiving operation result
	 * @param {Number} rad the angle to rotate the matrix by
	 * @param {vec3} axis the axis to rotate around
	 * @returns {mat4} out
	 */
	mat4.fromRotation = function(out, rad, axis) {
	    var x = axis[0], y = axis[1], z = axis[2],
	        len = Math.sqrt(x * x + y * y + z * z),
	        s, c, t;
	    
	    if (Math.abs(len) < glMatrix.EPSILON) { return null; }
	    
	    len = 1 / len;
	    x *= len;
	    y *= len;
	    z *= len;
	    
	    s = Math.sin(rad);
	    c = Math.cos(rad);
	    t = 1 - c;
	    
	    // Perform rotation-specific matrix multiplication
	    out[0] = x * x * t + c;
	    out[1] = y * x * t + z * s;
	    out[2] = z * x * t - y * s;
	    out[3] = 0;
	    out[4] = x * y * t - z * s;
	    out[5] = y * y * t + c;
	    out[6] = z * y * t + x * s;
	    out[7] = 0;
	    out[8] = x * z * t + y * s;
	    out[9] = y * z * t - x * s;
	    out[10] = z * z * t + c;
	    out[11] = 0;
	    out[12] = 0;
	    out[13] = 0;
	    out[14] = 0;
	    out[15] = 1;
	    return out;
	}
	
	/**
	 * Creates a matrix from the given angle around the X axis
	 * This is equivalent to (but much faster than):
	 *
	 *     mat4.identity(dest);
	 *     mat4.rotateX(dest, dest, rad);
	 *
	 * @param {mat4} out mat4 receiving operation result
	 * @param {Number} rad the angle to rotate the matrix by
	 * @returns {mat4} out
	 */
	mat4.fromXRotation = function(out, rad) {
	    var s = Math.sin(rad),
	        c = Math.cos(rad);
	    
	    // Perform axis-specific matrix multiplication
	    out[0]  = 1;
	    out[1]  = 0;
	    out[2]  = 0;
	    out[3]  = 0;
	    out[4] = 0;
	    out[5] = c;
	    out[6] = s;
	    out[7] = 0;
	    out[8] = 0;
	    out[9] = -s;
	    out[10] = c;
	    out[11] = 0;
	    out[12] = 0;
	    out[13] = 0;
	    out[14] = 0;
	    out[15] = 1;
	    return out;
	}
	
	/**
	 * Creates a matrix from the given angle around the Y axis
	 * This is equivalent to (but much faster than):
	 *
	 *     mat4.identity(dest);
	 *     mat4.rotateY(dest, dest, rad);
	 *
	 * @param {mat4} out mat4 receiving operation result
	 * @param {Number} rad the angle to rotate the matrix by
	 * @returns {mat4} out
	 */
	mat4.fromYRotation = function(out, rad) {
	    var s = Math.sin(rad),
	        c = Math.cos(rad);
	    
	    // Perform axis-specific matrix multiplication
	    out[0]  = c;
	    out[1]  = 0;
	    out[2]  = -s;
	    out[3]  = 0;
	    out[4] = 0;
	    out[5] = 1;
	    out[6] = 0;
	    out[7] = 0;
	    out[8] = s;
	    out[9] = 0;
	    out[10] = c;
	    out[11] = 0;
	    out[12] = 0;
	    out[13] = 0;
	    out[14] = 0;
	    out[15] = 1;
	    return out;
	}
	
	/**
	 * Creates a matrix from the given angle around the Z axis
	 * This is equivalent to (but much faster than):
	 *
	 *     mat4.identity(dest);
	 *     mat4.rotateZ(dest, dest, rad);
	 *
	 * @param {mat4} out mat4 receiving operation result
	 * @param {Number} rad the angle to rotate the matrix by
	 * @returns {mat4} out
	 */
	mat4.fromZRotation = function(out, rad) {
	    var s = Math.sin(rad),
	        c = Math.cos(rad);
	    
	    // Perform axis-specific matrix multiplication
	    out[0]  = c;
	    out[1]  = s;
	    out[2]  = 0;
	    out[3]  = 0;
	    out[4] = -s;
	    out[5] = c;
	    out[6] = 0;
	    out[7] = 0;
	    out[8] = 0;
	    out[9] = 0;
	    out[10] = 1;
	    out[11] = 0;
	    out[12] = 0;
	    out[13] = 0;
	    out[14] = 0;
	    out[15] = 1;
	    return out;
	}
	
	/**
	 * Creates a matrix from a quaternion rotation and vector translation
	 * This is equivalent to (but much faster than):
	 *
	 *     mat4.identity(dest);
	 *     mat4.translate(dest, vec);
	 *     var quatMat = mat4.create();
	 *     quat4.toMat4(quat, quatMat);
	 *     mat4.multiply(dest, quatMat);
	 *
	 * @param {mat4} out mat4 receiving operation result
	 * @param {quat4} q Rotation quaternion
	 * @param {vec3} v Translation vector
	 * @returns {mat4} out
	 */
	mat4.fromRotationTranslation = function (out, q, v) {
	    // Quaternion math
	    var x = q[0], y = q[1], z = q[2], w = q[3],
	        x2 = x + x,
	        y2 = y + y,
	        z2 = z + z,
	
	        xx = x * x2,
	        xy = x * y2,
	        xz = x * z2,
	        yy = y * y2,
	        yz = y * z2,
	        zz = z * z2,
	        wx = w * x2,
	        wy = w * y2,
	        wz = w * z2;
	
	    out[0] = 1 - (yy + zz);
	    out[1] = xy + wz;
	    out[2] = xz - wy;
	    out[3] = 0;
	    out[4] = xy - wz;
	    out[5] = 1 - (xx + zz);
	    out[6] = yz + wx;
	    out[7] = 0;
	    out[8] = xz + wy;
	    out[9] = yz - wx;
	    out[10] = 1 - (xx + yy);
	    out[11] = 0;
	    out[12] = v[0];
	    out[13] = v[1];
	    out[14] = v[2];
	    out[15] = 1;
	    
	    return out;
	};
	
	/**
	 * Creates a matrix from a quaternion rotation, vector translation and vector scale
	 * This is equivalent to (but much faster than):
	 *
	 *     mat4.identity(dest);
	 *     mat4.translate(dest, vec);
	 *     var quatMat = mat4.create();
	 *     quat4.toMat4(quat, quatMat);
	 *     mat4.multiply(dest, quatMat);
	 *     mat4.scale(dest, scale)
	 *
	 * @param {mat4} out mat4 receiving operation result
	 * @param {quat4} q Rotation quaternion
	 * @param {vec3} v Translation vector
	 * @param {vec3} s Scaling vector
	 * @returns {mat4} out
	 */
	mat4.fromRotationTranslationScale = function (out, q, v, s) {
	    // Quaternion math
	    var x = q[0], y = q[1], z = q[2], w = q[3],
	        x2 = x + x,
	        y2 = y + y,
	        z2 = z + z,
	
	        xx = x * x2,
	        xy = x * y2,
	        xz = x * z2,
	        yy = y * y2,
	        yz = y * z2,
	        zz = z * z2,
	        wx = w * x2,
	        wy = w * y2,
	        wz = w * z2,
	        sx = s[0],
	        sy = s[1],
	        sz = s[2];
	
	    out[0] = (1 - (yy + zz)) * sx;
	    out[1] = (xy + wz) * sx;
	    out[2] = (xz - wy) * sx;
	    out[3] = 0;
	    out[4] = (xy - wz) * sy;
	    out[5] = (1 - (xx + zz)) * sy;
	    out[6] = (yz + wx) * sy;
	    out[7] = 0;
	    out[8] = (xz + wy) * sz;
	    out[9] = (yz - wx) * sz;
	    out[10] = (1 - (xx + yy)) * sz;
	    out[11] = 0;
	    out[12] = v[0];
	    out[13] = v[1];
	    out[14] = v[2];
	    out[15] = 1;
	    
	    return out;
	};
	
	/**
	 * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin
	 * This is equivalent to (but much faster than):
	 *
	 *     mat4.identity(dest);
	 *     mat4.translate(dest, vec);
	 *     mat4.translate(dest, origin);
	 *     var quatMat = mat4.create();
	 *     quat4.toMat4(quat, quatMat);
	 *     mat4.multiply(dest, quatMat);
	 *     mat4.scale(dest, scale)
	 *     mat4.translate(dest, negativeOrigin);
	 *
	 * @param {mat4} out mat4 receiving operation result
	 * @param {quat4} q Rotation quaternion
	 * @param {vec3} v Translation vector
	 * @param {vec3} s Scaling vector
	 * @param {vec3} o The origin vector around which to scale and rotate
	 * @returns {mat4} out
	 */
	mat4.fromRotationTranslationScaleOrigin = function (out, q, v, s, o) {
	  // Quaternion math
	  var x = q[0], y = q[1], z = q[2], w = q[3],
	      x2 = x + x,
	      y2 = y + y,
	      z2 = z + z,
	
	      xx = x * x2,
	      xy = x * y2,
	      xz = x * z2,
	      yy = y * y2,
	      yz = y * z2,
	      zz = z * z2,
	      wx = w * x2,
	      wy = w * y2,
	      wz = w * z2,
	      
	      sx = s[0],
	      sy = s[1],
	      sz = s[2],
	
	      ox = o[0],
	      oy = o[1],
	      oz = o[2];
	      
	  out[0] = (1 - (yy + zz)) * sx;
	  out[1] = (xy + wz) * sx;
	  out[2] = (xz - wy) * sx;
	  out[3] = 0;
	  out[4] = (xy - wz) * sy;
	  out[5] = (1 - (xx + zz)) * sy;
	  out[6] = (yz + wx) * sy;
	  out[7] = 0;
	  out[8] = (xz + wy) * sz;
	  out[9] = (yz - wx) * sz;
	  out[10] = (1 - (xx + yy)) * sz;
	  out[11] = 0;
	  out[12] = v[0] + ox - (out[0] * ox + out[4] * oy + out[8] * oz);
	  out[13] = v[1] + oy - (out[1] * ox + out[5] * oy + out[9] * oz);
	  out[14] = v[2] + oz - (out[2] * ox + out[6] * oy + out[10] * oz);
	  out[15] = 1;
	        
	  return out;
	};
	
	mat4.fromQuat = function (out, q) {
	    var x = q[0], y = q[1], z = q[2], w = q[3],
	        x2 = x + x,
	        y2 = y + y,
	        z2 = z + z,
	
	        xx = x * x2,
	        yx = y * x2,
	        yy = y * y2,
	        zx = z * x2,
	        zy = z * y2,
	        zz = z * z2,
	        wx = w * x2,
	        wy = w * y2,
	        wz = w * z2;
	
	    out[0] = 1 - yy - zz;
	    out[1] = yx + wz;
	    out[2] = zx - wy;
	    out[3] = 0;
	
	    out[4] = yx - wz;
	    out[5] = 1 - xx - zz;
	    out[6] = zy + wx;
	    out[7] = 0;
	
	    out[8] = zx + wy;
	    out[9] = zy - wx;
	    out[10] = 1 - xx - yy;
	    out[11] = 0;
	
	    out[12] = 0;
	    out[13] = 0;
	    out[14] = 0;
	    out[15] = 1;
	
	    return out;
	};
	
	/**
	 * Generates a frustum matrix with the given bounds
	 *
	 * @param {mat4} out mat4 frustum matrix will be written into
	 * @param {Number} left Left bound of the frustum
	 * @param {Number} right Right bound of the frustum
	 * @param {Number} bottom Bottom bound of the frustum
	 * @param {Number} top Top bound of the frustum
	 * @param {Number} near Near bound of the frustum
	 * @param {Number} far Far bound of the frustum
	 * @returns {mat4} out
	 */
	mat4.frustum = function (out, left, right, bottom, top, near, far) {
	    var rl = 1 / (right - left),
	        tb = 1 / (top - bottom),
	        nf = 1 / (near - far);
	    out[0] = (near * 2) * rl;
	    out[1] = 0;
	    out[2] = 0;
	    out[3] = 0;
	    out[4] = 0;
	    out[5] = (near * 2) * tb;
	    out[6] = 0;
	    out[7] = 0;
	    out[8] = (right + left) * rl;
	    out[9] = (top + bottom) * tb;
	    out[10] = (far + near) * nf;
	    out[11] = -1;
	    out[12] = 0;
	    out[13] = 0;
	    out[14] = (far * near * 2) * nf;
	    out[15] = 0;
	    return out;
	};
	
	/**
	 * Generates a perspective projection matrix with the given bounds
	 *
	 * @param {mat4} out mat4 frustum matrix will be written into
	 * @param {number} fovy Vertical field of view in radians
	 * @param {number} aspect Aspect ratio. typically viewport width/height
	 * @param {number} near Near bound of the frustum
	 * @param {number} far Far bound of the frustum
	 * @returns {mat4} out
	 */
	mat4.perspective = function (out, fovy, aspect, near, far) {
	    var f = 1.0 / Math.tan(fovy / 2),
	        nf = 1 / (near - far);
	    out[0] = f / aspect;
	    out[1] = 0;
	    out[2] = 0;
	    out[3] = 0;
	    out[4] = 0;
	    out[5] = f;
	    out[6] = 0;
	    out[7] = 0;
	    out[8] = 0;
	    out[9] = 0;
	    out[10] = (far + near) * nf;
	    out[11] = -1;
	    out[12] = 0;
	    out[13] = 0;
	    out[14] = (2 * far * near) * nf;
	    out[15] = 0;
	    return out;
	};
	
	/**
	 * Generates a perspective projection matrix with the given field of view.
	 * This is primarily useful for generating projection matrices to be used
	 * with the still experiemental WebVR API.
	 *
	 * @param {mat4} out mat4 frustum matrix will be written into
	 * @param {number} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees
	 * @param {number} near Near bound of the frustum
	 * @param {number} far Far bound of the frustum
	 * @returns {mat4} out
	 */
	mat4.perspectiveFromFieldOfView = function (out, fov, near, far) {
	    var upTan = Math.tan(fov.upDegrees * Math.PI/180.0),
	        downTan = Math.tan(fov.downDegrees * Math.PI/180.0),
	        leftTan = Math.tan(fov.leftDegrees * Math.PI/180.0),
	        rightTan = Math.tan(fov.rightDegrees * Math.PI/180.0),
	        xScale = 2.0 / (leftTan + rightTan),
	        yScale = 2.0 / (upTan + downTan);
	
	    out[0] = xScale;
	    out[1] = 0.0;
	    out[2] = 0.0;
	    out[3] = 0.0;
	    out[4] = 0.0;
	    out[5] = yScale;
	    out[6] = 0.0;
	    out[7] = 0.0;
	    out[8] = -((leftTan - rightTan) * xScale * 0.5);
	    out[9] = ((upTan - downTan) * yScale * 0.5);
	    out[10] = far / (near - far);
	    out[11] = -1.0;
	    out[12] = 0.0;
	    out[13] = 0.0;
	    out[14] = (far * near) / (near - far);
	    out[15] = 0.0;
	    return out;
	}
	
	/**
	 * Generates a orthogonal projection matrix with the given bounds
	 *
	 * @param {mat4} out mat4 frustum matrix will be written into
	 * @param {number} left Left bound of the frustum
	 * @param {number} right Right bound of the frustum
	 * @param {number} bottom Bottom bound of the frustum
	 * @param {number} top Top bound of the frustum
	 * @param {number} near Near bound of the frustum
	 * @param {number} far Far bound of the frustum
	 * @returns {mat4} out
	 */
	mat4.ortho = function (out, left, right, bottom, top, near, far) {
	    var lr = 1 / (left - right),
	        bt = 1 / (bottom - top),
	        nf = 1 / (near - far);
	    out[0] = -2 * lr;
	    out[1] = 0;
	    out[2] = 0;
	    out[3] = 0;
	    out[4] = 0;
	    out[5] = -2 * bt;
	    out[6] = 0;
	    out[7] = 0;
	    out[8] = 0;
	    out[9] = 0;
	    out[10] = 2 * nf;
	    out[11] = 0;
	    out[12] = (left + right) * lr;
	    out[13] = (top + bottom) * bt;
	    out[14] = (far + near) * nf;
	    out[15] = 1;
	    return out;
	};
	
	/**
	 * Generates a look-at matrix with the given eye position, focal point, and up axis
	 *
	 * @param {mat4} out mat4 frustum matrix will be written into
	 * @param {vec3} eye Position of the viewer
	 * @param {vec3} center Point the viewer is looking at
	 * @param {vec3} up vec3 pointing up
	 * @returns {mat4} out
	 */
	mat4.lookAt = function (out, eye, center, up) {
	    var x0, x1, x2, y0, y1, y2, z0, z1, z2, len,
	        eyex = eye[0],
	        eyey = eye[1],
	        eyez = eye[2],
	        upx = up[0],
	        upy = up[1],
	        upz = up[2],
	        centerx = center[0],
	        centery = center[1],
	        centerz = center[2];
	
	    if (Math.abs(eyex - centerx) < glMatrix.EPSILON &&
	        Math.abs(eyey - centery) < glMatrix.EPSILON &&
	        Math.abs(eyez - centerz) < glMatrix.EPSILON) {
	        return mat4.identity(out);
	    }
	
	    z0 = eyex - centerx;
	    z1 = eyey - centery;
	    z2 = eyez - centerz;
	
	    len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);
	    z0 *= len;
	    z1 *= len;
	    z2 *= len;
	
	    x0 = upy * z2 - upz * z1;
	    x1 = upz * z0 - upx * z2;
	    x2 = upx * z1 - upy * z0;
	    len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);
	    if (!len) {
	        x0 = 0;
	        x1 = 0;
	        x2 = 0;
	    } else {
	        len = 1 / len;
	        x0 *= len;
	        x1 *= len;
	        x2 *= len;
	    }
	
	    y0 = z1 * x2 - z2 * x1;
	    y1 = z2 * x0 - z0 * x2;
	    y2 = z0 * x1 - z1 * x0;
	
	    len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);
	    if (!len) {
	        y0 = 0;
	        y1 = 0;
	        y2 = 0;
	    } else {
	        len = 1 / len;
	        y0 *= len;
	        y1 *= len;
	        y2 *= len;
	    }
	
	    out[0] = x0;
	    out[1] = y0;
	    out[2] = z0;
	    out[3] = 0;
	    out[4] = x1;
	    out[5] = y1;
	    out[6] = z1;
	    out[7] = 0;
	    out[8] = x2;
	    out[9] = y2;
	    out[10] = z2;
	    out[11] = 0;
	    out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
	    out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
	    out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
	    out[15] = 1;
	
	    return out;
	};
	
	/**
	 * Returns a string representation of a mat4
	 *
	 * @param {mat4} mat matrix to represent as a string
	 * @returns {String} string representation of the matrix
	 */
	mat4.str = function (a) {
	    return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' +
	                    a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' +
	                    a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' + 
	                    a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';
	};
	
	/**
	 * Returns Frobenius norm of a mat4
	 *
	 * @param {mat4} a the matrix to calculate Frobenius norm of
	 * @returns {Number} Frobenius norm
	 */
	mat4.frob = function (a) {
	    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2) ))
	};
	
	
	module.exports = mat4;


/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.
	
	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:
	
	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.
	
	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE. */
	
	var glMatrix = __webpack_require__(9);
	var mat3 = __webpack_require__(12);
	var vec3 = __webpack_require__(15);
	var vec4 = __webpack_require__(16);
	
	/**
	 * @class Quaternion
	 * @name quat
	 */
	var quat = {};
	
	/**
	 * Creates a new identity quat
	 *
	 * @returns {quat} a new quaternion
	 */
	quat.create = function() {
	    var out = new glMatrix.ARRAY_TYPE(4);
	    out[0] = 0;
	    out[1] = 0;
	    out[2] = 0;
	    out[3] = 1;
	    return out;
	};
	
	/**
	 * Sets a quaternion to represent the shortest rotation from one
	 * vector to another.
	 *
	 * Both vectors are assumed to be unit length.
	 *
	 * @param {quat} out the receiving quaternion.
	 * @param {vec3} a the initial vector
	 * @param {vec3} b the destination vector
	 * @returns {quat} out
	 */
	quat.rotationTo = (function() {
	    var tmpvec3 = vec3.create();
	    var xUnitVec3 = vec3.fromValues(1,0,0);
	    var yUnitVec3 = vec3.fromValues(0,1,0);
	
	    return function(out, a, b) {
	        var dot = vec3.dot(a, b);
	        if (dot < -0.999999) {
	            vec3.cross(tmpvec3, xUnitVec3, a);
	            if (vec3.length(tmpvec3) < 0.000001)
	                vec3.cross(tmpvec3, yUnitVec3, a);
	            vec3.normalize(tmpvec3, tmpvec3);
	            quat.setAxisAngle(out, tmpvec3, Math.PI);
	            return out;
	        } else if (dot > 0.999999) {
	            out[0] = 0;
	            out[1] = 0;
	            out[2] = 0;
	            out[3] = 1;
	            return out;
	        } else {
	            vec3.cross(tmpvec3, a, b);
	            out[0] = tmpvec3[0];
	            out[1] = tmpvec3[1];
	            out[2] = tmpvec3[2];
	            out[3] = 1 + dot;
	            return quat.normalize(out, out);
	        }
	    };
	})();
	
	/**
	 * Sets the specified quaternion with values corresponding to the given
	 * axes. Each axis is a vec3 and is expected to be unit length and
	 * perpendicular to all other specified axes.
	 *
	 * @param {vec3} view  the vector representing the viewing direction
	 * @param {vec3} right the vector representing the local "right" direction
	 * @param {vec3} up    the vector representing the local "up" direction
	 * @returns {quat} out
	 */
	quat.setAxes = (function() {
	    var matr = mat3.create();
	
	    return function(out, view, right, up) {
	        matr[0] = right[0];
	        matr[3] = right[1];
	        matr[6] = right[2];
	
	        matr[1] = up[0];
	        matr[4] = up[1];
	        matr[7] = up[2];
	
	        matr[2] = -view[0];
	        matr[5] = -view[1];
	        matr[8] = -view[2];
	
	        return quat.normalize(out, quat.fromMat3(out, matr));
	    };
	})();
	
	/**
	 * Creates a new quat initialized with values from an existing quaternion
	 *
	 * @param {quat} a quaternion to clone
	 * @returns {quat} a new quaternion
	 * @function
	 */
	quat.clone = vec4.clone;
	
	/**
	 * Creates a new quat initialized with the given values
	 *
	 * @param {Number} x X component
	 * @param {Number} y Y component
	 * @param {Number} z Z component
	 * @param {Number} w W component
	 * @returns {quat} a new quaternion
	 * @function
	 */
	quat.fromValues = vec4.fromValues;
	
	/**
	 * Copy the values from one quat to another
	 *
	 * @param {quat} out the receiving quaternion
	 * @param {quat} a the source quaternion
	 * @returns {quat} out
	 * @function
	 */
	quat.copy = vec4.copy;
	
	/**
	 * Set the components of a quat to the given values
	 *
	 * @param {quat} out the receiving quaternion
	 * @param {Number} x X component
	 * @param {Number} y Y component
	 * @param {Number} z Z component
	 * @param {Number} w W component
	 * @returns {quat} out
	 * @function
	 */
	quat.set = vec4.set;
	
	/**
	 * Set a quat to the identity quaternion
	 *
	 * @param {quat} out the receiving quaternion
	 * @returns {quat} out
	 */
	quat.identity = function(out) {
	    out[0] = 0;
	    out[1] = 0;
	    out[2] = 0;
	    out[3] = 1;
	    return out;
	};
	
	/**
	 * Sets a quat from the given angle and rotation axis,
	 * then returns it.
	 *
	 * @param {quat} out the receiving quaternion
	 * @param {vec3} axis the axis around which to rotate
	 * @param {Number} rad the angle in radians
	 * @returns {quat} out
	 **/
	quat.setAxisAngle = function(out, axis, rad) {
	    rad = rad * 0.5;
	    var s = Math.sin(rad);
	    out[0] = s * axis[0];
	    out[1] = s * axis[1];
	    out[2] = s * axis[2];
	    out[3] = Math.cos(rad);
	    return out;
	};
	
	/**
	 * Adds two quat's
	 *
	 * @param {quat} out the receiving quaternion
	 * @param {quat} a the first operand
	 * @param {quat} b the second operand
	 * @returns {quat} out
	 * @function
	 */
	quat.add = vec4.add;
	
	/**
	 * Multiplies two quat's
	 *
	 * @param {quat} out the receiving quaternion
	 * @param {quat} a the first operand
	 * @param {quat} b the second operand
	 * @returns {quat} out
	 */
	quat.multiply = function(out, a, b) {
	    var ax = a[0], ay = a[1], az = a[2], aw = a[3],
	        bx = b[0], by = b[1], bz = b[2], bw = b[3];
	
	    out[0] = ax * bw + aw * bx + ay * bz - az * by;
	    out[1] = ay * bw + aw * by + az * bx - ax * bz;
	    out[2] = az * bw + aw * bz + ax * by - ay * bx;
	    out[3] = aw * bw - ax * bx - ay * by - az * bz;
	    return out;
	};
	
	/**
	 * Alias for {@link quat.multiply}
	 * @function
	 */
	quat.mul = quat.multiply;
	
	/**
	 * Scales a quat by a scalar number
	 *
	 * @param {quat} out the receiving vector
	 * @param {quat} a the vector to scale
	 * @param {Number} b amount to scale the vector by
	 * @returns {quat} out
	 * @function
	 */
	quat.scale = vec4.scale;
	
	/**
	 * Rotates a quaternion by the given angle about the X axis
	 *
	 * @param {quat} out quat receiving operation result
	 * @param {quat} a quat to rotate
	 * @param {number} rad angle (in radians) to rotate
	 * @returns {quat} out
	 */
	quat.rotateX = function (out, a, rad) {
	    rad *= 0.5; 
	
	    var ax = a[0], ay = a[1], az = a[2], aw = a[3],
	        bx = Math.sin(rad), bw = Math.cos(rad);
	
	    out[0] = ax * bw + aw * bx;
	    out[1] = ay * bw + az * bx;
	    out[2] = az * bw - ay * bx;
	    out[3] = aw * bw - ax * bx;
	    return out;
	};
	
	/**
	 * Rotates a quaternion by the given angle about the Y axis
	 *
	 * @param {quat} out quat receiving operation result
	 * @param {quat} a quat to rotate
	 * @param {number} rad angle (in radians) to rotate
	 * @returns {quat} out
	 */
	quat.rotateY = function (out, a, rad) {
	    rad *= 0.5; 
	
	    var ax = a[0], ay = a[1], az = a[2], aw = a[3],
	        by = Math.sin(rad), bw = Math.cos(rad);
	
	    out[0] = ax * bw - az * by;
	    out[1] = ay * bw + aw * by;
	    out[2] = az * bw + ax * by;
	    out[3] = aw * bw - ay * by;
	    return out;
	};
	
	/**
	 * Rotates a quaternion by the given angle about the Z axis
	 *
	 * @param {quat} out quat receiving operation result
	 * @param {quat} a quat to rotate
	 * @param {number} rad angle (in radians) to rotate
	 * @returns {quat} out
	 */
	quat.rotateZ = function (out, a, rad) {
	    rad *= 0.5; 
	
	    var ax = a[0], ay = a[1], az = a[2], aw = a[3],
	        bz = Math.sin(rad), bw = Math.cos(rad);
	
	    out[0] = ax * bw + ay * bz;
	    out[1] = ay * bw - ax * bz;
	    out[2] = az * bw + aw * bz;
	    out[3] = aw * bw - az * bz;
	    return out;
	};
	
	/**
	 * Calculates the W component of a quat from the X, Y, and Z components.
	 * Assumes that quaternion is 1 unit in length.
	 * Any existing W component will be ignored.
	 *
	 * @param {quat} out the receiving quaternion
	 * @param {quat} a quat to calculate W component of
	 * @returns {quat} out
	 */
	quat.calculateW = function (out, a) {
	    var x = a[0], y = a[1], z = a[2];
	
	    out[0] = x;
	    out[1] = y;
	    out[2] = z;
	    out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));
	    return out;
	};
	
	/**
	 * Calculates the dot product of two quat's
	 *
	 * @param {quat} a the first operand
	 * @param {quat} b the second operand
	 * @returns {Number} dot product of a and b
	 * @function
	 */
	quat.dot = vec4.dot;
	
	/**
	 * Performs a linear interpolation between two quat's
	 *
	 * @param {quat} out the receiving quaternion
	 * @param {quat} a the first operand
	 * @param {quat} b the second operand
	 * @param {Number} t interpolation amount between the two inputs
	 * @returns {quat} out
	 * @function
	 */
	quat.lerp = vec4.lerp;
	
	/**
	 * Performs a spherical linear interpolation between two quat
	 *
	 * @param {quat} out the receiving quaternion
	 * @param {quat} a the first operand
	 * @param {quat} b the second operand
	 * @param {Number} t interpolation amount between the two inputs
	 * @returns {quat} out
	 */
	quat.slerp = function (out, a, b, t) {
	    // benchmarks:
	    //    http://jsperf.com/quaternion-slerp-implementations
	
	    var ax = a[0], ay = a[1], az = a[2], aw = a[3],
	        bx = b[0], by = b[1], bz = b[2], bw = b[3];
	
	    var        omega, cosom, sinom, scale0, scale1;
	
	    // calc cosine
	    cosom = ax * bx + ay * by + az * bz + aw * bw;
	    // adjust signs (if necessary)
	    if ( cosom < 0.0 ) {
	        cosom = -cosom;
	        bx = - bx;
	        by = - by;
	        bz = - bz;
	        bw = - bw;
	    }
	    // calculate coefficients
	    if ( (1.0 - cosom) > 0.000001 ) {
	        // standard case (slerp)
	        omega  = Math.acos(cosom);
	        sinom  = Math.sin(omega);
	        scale0 = Math.sin((1.0 - t) * omega) / sinom;
	        scale1 = Math.sin(t * omega) / sinom;
	    } else {        
	        // "from" and "to" quaternions are very close 
	        //  ... so we can do a linear interpolation
	        scale0 = 1.0 - t;
	        scale1 = t;
	    }
	    // calculate final values
	    out[0] = scale0 * ax + scale1 * bx;
	    out[1] = scale0 * ay + scale1 * by;
	    out[2] = scale0 * az + scale1 * bz;
	    out[3] = scale0 * aw + scale1 * bw;
	    
	    return out;
	};
	
	/**
	 * Performs a spherical linear interpolation with two control points
	 *
	 * @param {quat} out the receiving quaternion
	 * @param {quat} a the first operand
	 * @param {quat} b the second operand
	 * @param {quat} c the third operand
	 * @param {quat} d the fourth operand
	 * @param {Number} t interpolation amount
	 * @returns {quat} out
	 */
	quat.sqlerp = (function () {
	  var temp1 = quat.create();
	  var temp2 = quat.create();
	  
	  return function (out, a, b, c, d, t) {
	    quat.slerp(temp1, a, d, t);
	    quat.slerp(temp2, b, c, t);
	    quat.slerp(out, temp1, temp2, 2 * t * (1 - t));
	    
	    return out;
	  };
	}());
	
	/**
	 * Calculates the inverse of a quat
	 *
	 * @param {quat} out the receiving quaternion
	 * @param {quat} a quat to calculate inverse of
	 * @returns {quat} out
	 */
	quat.invert = function(out, a) {
	    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],
	        dot = a0*a0 + a1*a1 + a2*a2 + a3*a3,
	        invDot = dot ? 1.0/dot : 0;
	    
	    // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0
	
	    out[0] = -a0*invDot;
	    out[1] = -a1*invDot;
	    out[2] = -a2*invDot;
	    out[3] = a3*invDot;
	    return out;
	};
	
	/**
	 * Calculates the conjugate of a quat
	 * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.
	 *
	 * @param {quat} out the receiving quaternion
	 * @param {quat} a quat to calculate conjugate of
	 * @returns {quat} out
	 */
	quat.conjugate = function (out, a) {
	    out[0] = -a[0];
	    out[1] = -a[1];
	    out[2] = -a[2];
	    out[3] = a[3];
	    return out;
	};
	
	/**
	 * Calculates the length of a quat
	 *
	 * @param {quat} a vector to calculate length of
	 * @returns {Number} length of a
	 * @function
	 */
	quat.length = vec4.length;
	
	/**
	 * Alias for {@link quat.length}
	 * @function
	 */
	quat.len = quat.length;
	
	/**
	 * Calculates the squared length of a quat
	 *
	 * @param {quat} a vector to calculate squared length of
	 * @returns {Number} squared length of a
	 * @function
	 */
	quat.squaredLength = vec4.squaredLength;
	
	/**
	 * Alias for {@link quat.squaredLength}
	 * @function
	 */
	quat.sqrLen = quat.squaredLength;
	
	/**
	 * Normalize a quat
	 *
	 * @param {quat} out the receiving quaternion
	 * @param {quat} a quaternion to normalize
	 * @returns {quat} out
	 * @function
	 */
	quat.normalize = vec4.normalize;
	
	/**
	 * Creates a quaternion from the given 3x3 rotation matrix.
	 *
	 * NOTE: The resultant quaternion is not normalized, so you should be sure
	 * to renormalize the quaternion yourself where necessary.
	 *
	 * @param {quat} out the receiving quaternion
	 * @param {mat3} m rotation matrix
	 * @returns {quat} out
	 * @function
	 */
	quat.fromMat3 = function(out, m) {
	    // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes
	    // article "Quaternion Calculus and Fast Animation".
	    var fTrace = m[0] + m[4] + m[8];
	    var fRoot;
	
	    if ( fTrace > 0.0 ) {
	        // |w| > 1/2, may as well choose w > 1/2
	        fRoot = Math.sqrt(fTrace + 1.0);  // 2w
	        out[3] = 0.5 * fRoot;
	        fRoot = 0.5/fRoot;  // 1/(4w)
	        out[0] = (m[5]-m[7])*fRoot;
	        out[1] = (m[6]-m[2])*fRoot;
	        out[2] = (m[1]-m[3])*fRoot;
	    } else {
	        // |w| <= 1/2
	        var i = 0;
	        if ( m[4] > m[0] )
	          i = 1;
	        if ( m[8] > m[i*3+i] )
	          i = 2;
	        var j = (i+1)%3;
	        var k = (i+2)%3;
	        
	        fRoot = Math.sqrt(m[i*3+i]-m[j*3+j]-m[k*3+k] + 1.0);
	        out[i] = 0.5 * fRoot;
	        fRoot = 0.5 / fRoot;
	        out[3] = (m[j*3+k] - m[k*3+j]) * fRoot;
	        out[j] = (m[j*3+i] + m[i*3+j]) * fRoot;
	        out[k] = (m[k*3+i] + m[i*3+k]) * fRoot;
	    }
	    
	    return out;
	};
	
	/**
	 * Returns a string representation of a quatenion
	 *
	 * @param {quat} vec vector to represent as a string
	 * @returns {String} string representation of the vector
	 */
	quat.str = function (a) {
	    return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
	};
	
	module.exports = quat;


/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.
	
	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:
	
	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.
	
	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE. */
	
	var glMatrix = __webpack_require__(9);
	
	/**
	 * @class 3 Dimensional Vector
	 * @name vec3
	 */
	var vec3 = {};
	
	/**
	 * Creates a new, empty vec3
	 *
	 * @returns {vec3} a new 3D vector
	 */
	vec3.create = function() {
	    var out = new glMatrix.ARRAY_TYPE(3);
	    out[0] = 0;
	    out[1] = 0;
	    out[2] = 0;
	    return out;
	};
	
	/**
	 * Creates a new vec3 initialized with values from an existing vector
	 *
	 * @param {vec3} a vector to clone
	 * @returns {vec3} a new 3D vector
	 */
	vec3.clone = function(a) {
	    var out = new glMatrix.ARRAY_TYPE(3);
	    out[0] = a[0];
	    out[1] = a[1];
	    out[2] = a[2];
	    return out;
	};
	
	/**
	 * Creates a new vec3 initialized with the given values
	 *
	 * @param {Number} x X component
	 * @param {Number} y Y component
	 * @param {Number} z Z component
	 * @returns {vec3} a new 3D vector
	 */
	vec3.fromValues = function(x, y, z) {
	    var out = new glMatrix.ARRAY_TYPE(3);
	    out[0] = x;
	    out[1] = y;
	    out[2] = z;
	    return out;
	};
	
	/**
	 * Copy the values from one vec3 to another
	 *
	 * @param {vec3} out the receiving vector
	 * @param {vec3} a the source vector
	 * @returns {vec3} out
	 */
	vec3.copy = function(out, a) {
	    out[0] = a[0];
	    out[1] = a[1];
	    out[2] = a[2];
	    return out;
	};
	
	/**
	 * Set the components of a vec3 to the given values
	 *
	 * @param {vec3} out the receiving vector
	 * @param {Number} x X component
	 * @param {Number} y Y component
	 * @param {Number} z Z component
	 * @returns {vec3} out
	 */
	vec3.set = function(out, x, y, z) {
	    out[0] = x;
	    out[1] = y;
	    out[2] = z;
	    return out;
	};
	
	/**
	 * Adds two vec3's
	 *
	 * @param {vec3} out the receiving vector
	 * @param {vec3} a the first operand
	 * @param {vec3} b the second operand
	 * @returns {vec3} out
	 */
	vec3.add = function(out, a, b) {
	    out[0] = a[0] + b[0];
	    out[1] = a[1] + b[1];
	    out[2] = a[2] + b[2];
	    return out;
	};
	
	/**
	 * Subtracts vector b from vector a
	 *
	 * @param {vec3} out the receiving vector
	 * @param {vec3} a the first operand
	 * @param {vec3} b the second operand
	 * @returns {vec3} out
	 */
	vec3.subtract = function(out, a, b) {
	    out[0] = a[0] - b[0];
	    out[1] = a[1] - b[1];
	    out[2] = a[2] - b[2];
	    return out;
	};
	
	/**
	 * Alias for {@link vec3.subtract}
	 * @function
	 */
	vec3.sub = vec3.subtract;
	
	/**
	 * Multiplies two vec3's
	 *
	 * @param {vec3} out the receiving vector
	 * @param {vec3} a the first operand
	 * @param {vec3} b the second operand
	 * @returns {vec3} out
	 */
	vec3.multiply = function(out, a, b) {
	    out[0] = a[0] * b[0];
	    out[1] = a[1] * b[1];
	    out[2] = a[2] * b[2];
	    return out;
	};
	
	/**
	 * Alias for {@link vec3.multiply}
	 * @function
	 */
	vec3.mul = vec3.multiply;
	
	/**
	 * Divides two vec3's
	 *
	 * @param {vec3} out the receiving vector
	 * @param {vec3} a the first operand
	 * @param {vec3} b the second operand
	 * @returns {vec3} out
	 */
	vec3.divide = function(out, a, b) {
	    out[0] = a[0] / b[0];
	    out[1] = a[1] / b[1];
	    out[2] = a[2] / b[2];
	    return out;
	};
	
	/**
	 * Alias for {@link vec3.divide}
	 * @function
	 */
	vec3.div = vec3.divide;
	
	/**
	 * Returns the minimum of two vec3's
	 *
	 * @param {vec3} out the receiving vector
	 * @param {vec3} a the first operand
	 * @param {vec3} b the second operand
	 * @returns {vec3} out
	 */
	vec3.min = function(out, a, b) {
	    out[0] = Math.min(a[0], b[0]);
	    out[1] = Math.min(a[1], b[1]);
	    out[2] = Math.min(a[2], b[2]);
	    return out;
	};
	
	/**
	 * Returns the maximum of two vec3's
	 *
	 * @param {vec3} out the receiving vector
	 * @param {vec3} a the first operand
	 * @param {vec3} b the second operand
	 * @returns {vec3} out
	 */
	vec3.max = function(out, a, b) {
	    out[0] = Math.max(a[0], b[0]);
	    out[1] = Math.max(a[1], b[1]);
	    out[2] = Math.max(a[2], b[2]);
	    return out;
	};
	
	/**
	 * Scales a vec3 by a scalar number
	 *
	 * @param {vec3} out the receiving vector
	 * @param {vec3} a the vector to scale
	 * @param {Number} b amount to scale the vector by
	 * @returns {vec3} out
	 */
	vec3.scale = function(out, a, b) {
	    out[0] = a[0] * b;
	    out[1] = a[1] * b;
	    out[2] = a[2] * b;
	    return out;
	};
	
	/**
	 * Adds two vec3's after scaling the second operand by a scalar value
	 *
	 * @param {vec3} out the receiving vector
	 * @param {vec3} a the first operand
	 * @param {vec3} b the second operand
	 * @param {Number} scale the amount to scale b by before adding
	 * @returns {vec3} out
	 */
	vec3.scaleAndAdd = function(out, a, b, scale) {
	    out[0] = a[0] + (b[0] * scale);
	    out[1] = a[1] + (b[1] * scale);
	    out[2] = a[2] + (b[2] * scale);
	    return out;
	};
	
	/**
	 * Calculates the euclidian distance between two vec3's
	 *
	 * @param {vec3} a the first operand
	 * @param {vec3} b the second operand
	 * @returns {Number} distance between a and b
	 */
	vec3.distance = function(a, b) {
	    var x = b[0] - a[0],
	        y = b[1] - a[1],
	        z = b[2] - a[2];
	    return Math.sqrt(x*x + y*y + z*z);
	};
	
	/**
	 * Alias for {@link vec3.distance}
	 * @function
	 */
	vec3.dist = vec3.distance;
	
	/**
	 * Calculates the squared euclidian distance between two vec3's
	 *
	 * @param {vec3} a the first operand
	 * @param {vec3} b the second operand
	 * @returns {Number} squared distance between a and b
	 */
	vec3.squaredDistance = function(a, b) {
	    var x = b[0] - a[0],
	        y = b[1] - a[1],
	        z = b[2] - a[2];
	    return x*x + y*y + z*z;
	};
	
	/**
	 * Alias for {@link vec3.squaredDistance}
	 * @function
	 */
	vec3.sqrDist = vec3.squaredDistance;
	
	/**
	 * Calculates the length of a vec3
	 *
	 * @param {vec3} a vector to calculate length of
	 * @returns {Number} length of a
	 */
	vec3.length = function (a) {
	    var x = a[0],
	        y = a[1],
	        z = a[2];
	    return Math.sqrt(x*x + y*y + z*z);
	};
	
	/**
	 * Alias for {@link vec3.length}
	 * @function
	 */
	vec3.len = vec3.length;
	
	/**
	 * Calculates the squared length of a vec3
	 *
	 * @param {vec3} a vector to calculate squared length of
	 * @returns {Number} squared length of a
	 */
	vec3.squaredLength = function (a) {
	    var x = a[0],
	        y = a[1],
	        z = a[2];
	    return x*x + y*y + z*z;
	};
	
	/**
	 * Alias for {@link vec3.squaredLength}
	 * @function
	 */
	vec3.sqrLen = vec3.squaredLength;
	
	/**
	 * Negates the components of a vec3
	 *
	 * @param {vec3} out the receiving vector
	 * @param {vec3} a vector to negate
	 * @returns {vec3} out
	 */
	vec3.negate = function(out, a) {
	    out[0] = -a[0];
	    out[1] = -a[1];
	    out[2] = -a[2];
	    return out;
	};
	
	/**
	 * Returns the inverse of the components of a vec3
	 *
	 * @param {vec3} out the receiving vector
	 * @param {vec3} a vector to invert
	 * @returns {vec3} out
	 */
	vec3.inverse = function(out, a) {
	  out[0] = 1.0 / a[0];
	  out[1] = 1.0 / a[1];
	  out[2] = 1.0 / a[2];
	  return out;
	};
	
	/**
	 * Normalize a vec3
	 *
	 * @param {vec3} out the receiving vector
	 * @param {vec3} a vector to normalize
	 * @returns {vec3} out
	 */
	vec3.normalize = function(out, a) {
	    var x = a[0],
	        y = a[1],
	        z = a[2];
	    var len = x*x + y*y + z*z;
	    if (len > 0) {
	        //TODO: evaluate use of glm_invsqrt here?
	        len = 1 / Math.sqrt(len);
	        out[0] = a[0] * len;
	        out[1] = a[1] * len;
	        out[2] = a[2] * len;
	    }
	    return out;
	};
	
	/**
	 * Calculates the dot product of two vec3's
	 *
	 * @param {vec3} a the first operand
	 * @param {vec3} b the second operand
	 * @returns {Number} dot product of a and b
	 */
	vec3.dot = function (a, b) {
	    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
	};
	
	/**
	 * Computes the cross product of two vec3's
	 *
	 * @param {vec3} out the receiving vector
	 * @param {vec3} a the first operand
	 * @param {vec3} b the second operand
	 * @returns {vec3} out
	 */
	vec3.cross = function(out, a, b) {
	    var ax = a[0], ay = a[1], az = a[2],
	        bx = b[0], by = b[1], bz = b[2];
	
	    out[0] = ay * bz - az * by;
	    out[1] = az * bx - ax * bz;
	    out[2] = ax * by - ay * bx;
	    return out;
	};
	
	/**
	 * Performs a linear interpolation between two vec3's
	 *
	 * @param {vec3} out the receiving vector
	 * @param {vec3} a the first operand
	 * @param {vec3} b the second operand
	 * @param {Number} t interpolation amount between the two inputs
	 * @returns {vec3} out
	 */
	vec3.lerp = function (out, a, b, t) {
	    var ax = a[0],
	        ay = a[1],
	        az = a[2];
	    out[0] = ax + t * (b[0] - ax);
	    out[1] = ay + t * (b[1] - ay);
	    out[2] = az + t * (b[2] - az);
	    return out;
	};
	
	/**
	 * Performs a hermite interpolation with two control points
	 *
	 * @param {vec3} out the receiving vector
	 * @param {vec3} a the first operand
	 * @param {vec3} b the second operand
	 * @param {vec3} c the third operand
	 * @param {vec3} d the fourth operand
	 * @param {Number} t interpolation amount between the two inputs
	 * @returns {vec3} out
	 */
	vec3.hermite = function (out, a, b, c, d, t) {
	  var factorTimes2 = t * t,
	      factor1 = factorTimes2 * (2 * t - 3) + 1,
	      factor2 = factorTimes2 * (t - 2) + t,
	      factor3 = factorTimes2 * (t - 1),
	      factor4 = factorTimes2 * (3 - 2 * t);
	  
	  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
	  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
	  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
	  
	  return out;
	};
	
	/**
	 * Performs a bezier interpolation with two control points
	 *
	 * @param {vec3} out the receiving vector
	 * @param {vec3} a the first operand
	 * @param {vec3} b the second operand
	 * @param {vec3} c the third operand
	 * @param {vec3} d the fourth operand
	 * @param {Number} t interpolation amount between the two inputs
	 * @returns {vec3} out
	 */
	vec3.bezier = function (out, a, b, c, d, t) {
	  var inverseFactor = 1 - t,
	      inverseFactorTimesTwo = inverseFactor * inverseFactor,
	      factorTimes2 = t * t,
	      factor1 = inverseFactorTimesTwo * inverseFactor,
	      factor2 = 3 * t * inverseFactorTimesTwo,
	      factor3 = 3 * factorTimes2 * inverseFactor,
	      factor4 = factorTimes2 * t;
	  
	  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
	  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
	  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
	  
	  return out;
	};
	
	/**
	 * Generates a random vector with the given scale
	 *
	 * @param {vec3} out the receiving vector
	 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
	 * @returns {vec3} out
	 */
	vec3.random = function (out, scale) {
	    scale = scale || 1.0;
	
	    var r = glMatrix.RANDOM() * 2.0 * Math.PI;
	    var z = (glMatrix.RANDOM() * 2.0) - 1.0;
	    var zScale = Math.sqrt(1.0-z*z) * scale;
	
	    out[0] = Math.cos(r) * zScale;
	    out[1] = Math.sin(r) * zScale;
	    out[2] = z * scale;
	    return out;
	};
	
	/**
	 * Transforms the vec3 with a mat4.
	 * 4th vector component is implicitly '1'
	 *
	 * @param {vec3} out the receiving vector
	 * @param {vec3} a the vector to transform
	 * @param {mat4} m matrix to transform with
	 * @returns {vec3} out
	 */
	vec3.transformMat4 = function(out, a, m) {
	    var x = a[0], y = a[1], z = a[2],
	        w = m[3] * x + m[7] * y + m[11] * z + m[15];
	    w = w || 1.0;
	    out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;
	    out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;
	    out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;
	    return out;
	};
	
	/**
	 * Transforms the vec3 with a mat3.
	 *
	 * @param {vec3} out the receiving vector
	 * @param {vec3} a the vector to transform
	 * @param {mat4} m the 3x3 matrix to transform with
	 * @returns {vec3} out
	 */
	vec3.transformMat3 = function(out, a, m) {
	    var x = a[0], y = a[1], z = a[2];
	    out[0] = x * m[0] + y * m[3] + z * m[6];
	    out[1] = x * m[1] + y * m[4] + z * m[7];
	    out[2] = x * m[2] + y * m[5] + z * m[8];
	    return out;
	};
	
	/**
	 * Transforms the vec3 with a quat
	 *
	 * @param {vec3} out the receiving vector
	 * @param {vec3} a the vector to transform
	 * @param {quat} q quaternion to transform with
	 * @returns {vec3} out
	 */
	vec3.transformQuat = function(out, a, q) {
	    // benchmarks: http://jsperf.com/quaternion-transform-vec3-implementations
	
	    var x = a[0], y = a[1], z = a[2],
	        qx = q[0], qy = q[1], qz = q[2], qw = q[3],
	
	        // calculate quat * vec
	        ix = qw * x + qy * z - qz * y,
	        iy = qw * y + qz * x - qx * z,
	        iz = qw * z + qx * y - qy * x,
	        iw = -qx * x - qy * y - qz * z;
	
	    // calculate result * inverse quat
	    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
	    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
	    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
	    return out;
	};
	
	/**
	 * Rotate a 3D vector around the x-axis
	 * @param {vec3} out The receiving vec3
	 * @param {vec3} a The vec3 point to rotate
	 * @param {vec3} b The origin of the rotation
	 * @param {Number} c The angle of rotation
	 * @returns {vec3} out
	 */
	vec3.rotateX = function(out, a, b, c){
	   var p = [], r=[];
		  //Translate point to the origin
		  p[0] = a[0] - b[0];
		  p[1] = a[1] - b[1];
	  	p[2] = a[2] - b[2];
	
		  //perform rotation
		  r[0] = p[0];
		  r[1] = p[1]*Math.cos(c) - p[2]*Math.sin(c);
		  r[2] = p[1]*Math.sin(c) + p[2]*Math.cos(c);
	
		  //translate to correct position
		  out[0] = r[0] + b[0];
		  out[1] = r[1] + b[1];
		  out[2] = r[2] + b[2];
	
	  	return out;
	};
	
	/**
	 * Rotate a 3D vector around the y-axis
	 * @param {vec3} out The receiving vec3
	 * @param {vec3} a The vec3 point to rotate
	 * @param {vec3} b The origin of the rotation
	 * @param {Number} c The angle of rotation
	 * @returns {vec3} out
	 */
	vec3.rotateY = function(out, a, b, c){
	  	var p = [], r=[];
	  	//Translate point to the origin
	  	p[0] = a[0] - b[0];
	  	p[1] = a[1] - b[1];
	  	p[2] = a[2] - b[2];
	  
	  	//perform rotation
	  	r[0] = p[2]*Math.sin(c) + p[0]*Math.cos(c);
	  	r[1] = p[1];
	  	r[2] = p[2]*Math.cos(c) - p[0]*Math.sin(c);
	  
	  	//translate to correct position
	  	out[0] = r[0] + b[0];
	  	out[1] = r[1] + b[1];
	  	out[2] = r[2] + b[2];
	  
	  	return out;
	};
	
	/**
	 * Rotate a 3D vector around the z-axis
	 * @param {vec3} out The receiving vec3
	 * @param {vec3} a The vec3 point to rotate
	 * @param {vec3} b The origin of the rotation
	 * @param {Number} c The angle of rotation
	 * @returns {vec3} out
	 */
	vec3.rotateZ = function(out, a, b, c){
	  	var p = [], r=[];
	  	//Translate point to the origin
	  	p[0] = a[0] - b[0];
	  	p[1] = a[1] - b[1];
	  	p[2] = a[2] - b[2];
	  
	  	//perform rotation
	  	r[0] = p[0]*Math.cos(c) - p[1]*Math.sin(c);
	  	r[1] = p[0]*Math.sin(c) + p[1]*Math.cos(c);
	  	r[2] = p[2];
	  
	  	//translate to correct position
	  	out[0] = r[0] + b[0];
	  	out[1] = r[1] + b[1];
	  	out[2] = r[2] + b[2];
	  
	  	return out;
	};
	
	/**
	 * Perform some operation over an array of vec3s.
	 *
	 * @param {Array} a the array of vectors to iterate over
	 * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed
	 * @param {Number} offset Number of elements to skip at the beginning of the array
	 * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array
	 * @param {Function} fn Function to call for each vector in the array
	 * @param {Object} [arg] additional argument to pass to fn
	 * @returns {Array} a
	 * @function
	 */
	vec3.forEach = (function() {
	    var vec = vec3.create();
	
	    return function(a, stride, offset, count, fn, arg) {
	        var i, l;
	        if(!stride) {
	            stride = 3;
	        }
	
	        if(!offset) {
	            offset = 0;
	        }
	        
	        if(count) {
	            l = Math.min((count * stride) + offset, a.length);
	        } else {
	            l = a.length;
	        }
	
	        for(i = offset; i < l; i += stride) {
	            vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2];
	            fn(vec, vec, arg);
	            a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2];
	        }
	        
	        return a;
	    };
	})();
	
	/**
	 * Get the angle between two 3D vectors
	 * @param {vec3} a The first operand
	 * @param {vec3} b The second operand
	 * @returns {Number} The angle in radians
	 */
	vec3.angle = function(a, b) {
	   
	    var tempA = vec3.fromValues(a[0], a[1], a[2]);
	    var tempB = vec3.fromValues(b[0], b[1], b[2]);
	 
	    vec3.normalize(tempA, tempA);
	    vec3.normalize(tempB, tempB);
	 
	    var cosine = vec3.dot(tempA, tempB);
	
	    if(cosine > 1.0){
	        return 0;
	    } else {
	        return Math.acos(cosine);
	    }     
	};
	
	/**
	 * Returns a string representation of a vector
	 *
	 * @param {vec3} vec vector to represent as a string
	 * @returns {String} string representation of the vector
	 */
	vec3.str = function (a) {
	    return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';
	};
	
	module.exports = vec3;


/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.
	
	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:
	
	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.
	
	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE. */
	
	var glMatrix = __webpack_require__(9);
	
	/**
	 * @class 4 Dimensional Vector
	 * @name vec4
	 */
	var vec4 = {};
	
	/**
	 * Creates a new, empty vec4
	 *
	 * @returns {vec4} a new 4D vector
	 */
	vec4.create = function() {
	    var out = new glMatrix.ARRAY_TYPE(4);
	    out[0] = 0;
	    out[1] = 0;
	    out[2] = 0;
	    out[3] = 0;
	    return out;
	};
	
	/**
	 * Creates a new vec4 initialized with values from an existing vector
	 *
	 * @param {vec4} a vector to clone
	 * @returns {vec4} a new 4D vector
	 */
	vec4.clone = function(a) {
	    var out = new glMatrix.ARRAY_TYPE(4);
	    out[0] = a[0];
	    out[1] = a[1];
	    out[2] = a[2];
	    out[3] = a[3];
	    return out;
	};
	
	/**
	 * Creates a new vec4 initialized with the given values
	 *
	 * @param {Number} x X component
	 * @param {Number} y Y component
	 * @param {Number} z Z component
	 * @param {Number} w W component
	 * @returns {vec4} a new 4D vector
	 */
	vec4.fromValues = function(x, y, z, w) {
	    var out = new glMatrix.ARRAY_TYPE(4);
	    out[0] = x;
	    out[1] = y;
	    out[2] = z;
	    out[3] = w;
	    return out;
	};
	
	/**
	 * Copy the values from one vec4 to another
	 *
	 * @param {vec4} out the receiving vector
	 * @param {vec4} a the source vector
	 * @returns {vec4} out
	 */
	vec4.copy = function(out, a) {
	    out[0] = a[0];
	    out[1] = a[1];
	    out[2] = a[2];
	    out[3] = a[3];
	    return out;
	};
	
	/**
	 * Set the components of a vec4 to the given values
	 *
	 * @param {vec4} out the receiving vector
	 * @param {Number} x X component
	 * @param {Number} y Y component
	 * @param {Number} z Z component
	 * @param {Number} w W component
	 * @returns {vec4} out
	 */
	vec4.set = function(out, x, y, z, w) {
	    out[0] = x;
	    out[1] = y;
	    out[2] = z;
	    out[3] = w;
	    return out;
	};
	
	/**
	 * Adds two vec4's
	 *
	 * @param {vec4} out the receiving vector
	 * @param {vec4} a the first operand
	 * @param {vec4} b the second operand
	 * @returns {vec4} out
	 */
	vec4.add = function(out, a, b) {
	    out[0] = a[0] + b[0];
	    out[1] = a[1] + b[1];
	    out[2] = a[2] + b[2];
	    out[3] = a[3] + b[3];
	    return out;
	};
	
	/**
	 * Subtracts vector b from vector a
	 *
	 * @param {vec4} out the receiving vector
	 * @param {vec4} a the first operand
	 * @param {vec4} b the second operand
	 * @returns {vec4} out
	 */
	vec4.subtract = function(out, a, b) {
	    out[0] = a[0] - b[0];
	    out[1] = a[1] - b[1];
	    out[2] = a[2] - b[2];
	    out[3] = a[3] - b[3];
	    return out;
	};
	
	/**
	 * Alias for {@link vec4.subtract}
	 * @function
	 */
	vec4.sub = vec4.subtract;
	
	/**
	 * Multiplies two vec4's
	 *
	 * @param {vec4} out the receiving vector
	 * @param {vec4} a the first operand
	 * @param {vec4} b the second operand
	 * @returns {vec4} out
	 */
	vec4.multiply = function(out, a, b) {
	    out[0] = a[0] * b[0];
	    out[1] = a[1] * b[1];
	    out[2] = a[2] * b[2];
	    out[3] = a[3] * b[3];
	    return out;
	};
	
	/**
	 * Alias for {@link vec4.multiply}
	 * @function
	 */
	vec4.mul = vec4.multiply;
	
	/**
	 * Divides two vec4's
	 *
	 * @param {vec4} out the receiving vector
	 * @param {vec4} a the first operand
	 * @param {vec4} b the second operand
	 * @returns {vec4} out
	 */
	vec4.divide = function(out, a, b) {
	    out[0] = a[0] / b[0];
	    out[1] = a[1] / b[1];
	    out[2] = a[2] / b[2];
	    out[3] = a[3] / b[3];
	    return out;
	};
	
	/**
	 * Alias for {@link vec4.divide}
	 * @function
	 */
	vec4.div = vec4.divide;
	
	/**
	 * Returns the minimum of two vec4's
	 *
	 * @param {vec4} out the receiving vector
	 * @param {vec4} a the first operand
	 * @param {vec4} b the second operand
	 * @returns {vec4} out
	 */
	vec4.min = function(out, a, b) {
	    out[0] = Math.min(a[0], b[0]);
	    out[1] = Math.min(a[1], b[1]);
	    out[2] = Math.min(a[2], b[2]);
	    out[3] = Math.min(a[3], b[3]);
	    return out;
	};
	
	/**
	 * Returns the maximum of two vec4's
	 *
	 * @param {vec4} out the receiving vector
	 * @param {vec4} a the first operand
	 * @param {vec4} b the second operand
	 * @returns {vec4} out
	 */
	vec4.max = function(out, a, b) {
	    out[0] = Math.max(a[0], b[0]);
	    out[1] = Math.max(a[1], b[1]);
	    out[2] = Math.max(a[2], b[2]);
	    out[3] = Math.max(a[3], b[3]);
	    return out;
	};
	
	/**
	 * Scales a vec4 by a scalar number
	 *
	 * @param {vec4} out the receiving vector
	 * @param {vec4} a the vector to scale
	 * @param {Number} b amount to scale the vector by
	 * @returns {vec4} out
	 */
	vec4.scale = function(out, a, b) {
	    out[0] = a[0] * b;
	    out[1] = a[1] * b;
	    out[2] = a[2] * b;
	    out[3] = a[3] * b;
	    return out;
	};
	
	/**
	 * Adds two vec4's after scaling the second operand by a scalar value
	 *
	 * @param {vec4} out the receiving vector
	 * @param {vec4} a the first operand
	 * @param {vec4} b the second operand
	 * @param {Number} scale the amount to scale b by before adding
	 * @returns {vec4} out
	 */
	vec4.scaleAndAdd = function(out, a, b, scale) {
	    out[0] = a[0] + (b[0] * scale);
	    out[1] = a[1] + (b[1] * scale);
	    out[2] = a[2] + (b[2] * scale);
	    out[3] = a[3] + (b[3] * scale);
	    return out;
	};
	
	/**
	 * Calculates the euclidian distance between two vec4's
	 *
	 * @param {vec4} a the first operand
	 * @param {vec4} b the second operand
	 * @returns {Number} distance between a and b
	 */
	vec4.distance = function(a, b) {
	    var x = b[0] - a[0],
	        y = b[1] - a[1],
	        z = b[2] - a[2],
	        w = b[3] - a[3];
	    return Math.sqrt(x*x + y*y + z*z + w*w);
	};
	
	/**
	 * Alias for {@link vec4.distance}
	 * @function
	 */
	vec4.dist = vec4.distance;
	
	/**
	 * Calculates the squared euclidian distance between two vec4's
	 *
	 * @param {vec4} a the first operand
	 * @param {vec4} b the second operand
	 * @returns {Number} squared distance between a and b
	 */
	vec4.squaredDistance = function(a, b) {
	    var x = b[0] - a[0],
	        y = b[1] - a[1],
	        z = b[2] - a[2],
	        w = b[3] - a[3];
	    return x*x + y*y + z*z + w*w;
	};
	
	/**
	 * Alias for {@link vec4.squaredDistance}
	 * @function
	 */
	vec4.sqrDist = vec4.squaredDistance;
	
	/**
	 * Calculates the length of a vec4
	 *
	 * @param {vec4} a vector to calculate length of
	 * @returns {Number} length of a
	 */
	vec4.length = function (a) {
	    var x = a[0],
	        y = a[1],
	        z = a[2],
	        w = a[3];
	    return Math.sqrt(x*x + y*y + z*z + w*w);
	};
	
	/**
	 * Alias for {@link vec4.length}
	 * @function
	 */
	vec4.len = vec4.length;
	
	/**
	 * Calculates the squared length of a vec4
	 *
	 * @param {vec4} a vector to calculate squared length of
	 * @returns {Number} squared length of a
	 */
	vec4.squaredLength = function (a) {
	    var x = a[0],
	        y = a[1],
	        z = a[2],
	        w = a[3];
	    return x*x + y*y + z*z + w*w;
	};
	
	/**
	 * Alias for {@link vec4.squaredLength}
	 * @function
	 */
	vec4.sqrLen = vec4.squaredLength;
	
	/**
	 * Negates the components of a vec4
	 *
	 * @param {vec4} out the receiving vector
	 * @param {vec4} a vector to negate
	 * @returns {vec4} out
	 */
	vec4.negate = function(out, a) {
	    out[0] = -a[0];
	    out[1] = -a[1];
	    out[2] = -a[2];
	    out[3] = -a[3];
	    return out;
	};
	
	/**
	 * Returns the inverse of the components of a vec4
	 *
	 * @param {vec4} out the receiving vector
	 * @param {vec4} a vector to invert
	 * @returns {vec4} out
	 */
	vec4.inverse = function(out, a) {
	  out[0] = 1.0 / a[0];
	  out[1] = 1.0 / a[1];
	  out[2] = 1.0 / a[2];
	  out[3] = 1.0 / a[3];
	  return out;
	};
	
	/**
	 * Normalize a vec4
	 *
	 * @param {vec4} out the receiving vector
	 * @param {vec4} a vector to normalize
	 * @returns {vec4} out
	 */
	vec4.normalize = function(out, a) {
	    var x = a[0],
	        y = a[1],
	        z = a[2],
	        w = a[3];
	    var len = x*x + y*y + z*z + w*w;
	    if (len > 0) {
	        len = 1 / Math.sqrt(len);
	        out[0] = x * len;
	        out[1] = y * len;
	        out[2] = z * len;
	        out[3] = w * len;
	    }
	    return out;
	};
	
	/**
	 * Calculates the dot product of two vec4's
	 *
	 * @param {vec4} a the first operand
	 * @param {vec4} b the second operand
	 * @returns {Number} dot product of a and b
	 */
	vec4.dot = function (a, b) {
	    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
	};
	
	/**
	 * Performs a linear interpolation between two vec4's
	 *
	 * @param {vec4} out the receiving vector
	 * @param {vec4} a the first operand
	 * @param {vec4} b the second operand
	 * @param {Number} t interpolation amount between the two inputs
	 * @returns {vec4} out
	 */
	vec4.lerp = function (out, a, b, t) {
	    var ax = a[0],
	        ay = a[1],
	        az = a[2],
	        aw = a[3];
	    out[0] = ax + t * (b[0] - ax);
	    out[1] = ay + t * (b[1] - ay);
	    out[2] = az + t * (b[2] - az);
	    out[3] = aw + t * (b[3] - aw);
	    return out;
	};
	
	/**
	 * Generates a random vector with the given scale
	 *
	 * @param {vec4} out the receiving vector
	 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
	 * @returns {vec4} out
	 */
	vec4.random = function (out, scale) {
	    scale = scale || 1.0;
	
	    //TODO: This is a pretty awful way of doing this. Find something better.
	    out[0] = glMatrix.RANDOM();
	    out[1] = glMatrix.RANDOM();
	    out[2] = glMatrix.RANDOM();
	    out[3] = glMatrix.RANDOM();
	    vec4.normalize(out, out);
	    vec4.scale(out, out, scale);
	    return out;
	};
	
	/**
	 * Transforms the vec4 with a mat4.
	 *
	 * @param {vec4} out the receiving vector
	 * @param {vec4} a the vector to transform
	 * @param {mat4} m matrix to transform with
	 * @returns {vec4} out
	 */
	vec4.transformMat4 = function(out, a, m) {
	    var x = a[0], y = a[1], z = a[2], w = a[3];
	    out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;
	    out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;
	    out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;
	    out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;
	    return out;
	};
	
	/**
	 * Transforms the vec4 with a quat
	 *
	 * @param {vec4} out the receiving vector
	 * @param {vec4} a the vector to transform
	 * @param {quat} q quaternion to transform with
	 * @returns {vec4} out
	 */
	vec4.transformQuat = function(out, a, q) {
	    var x = a[0], y = a[1], z = a[2],
	        qx = q[0], qy = q[1], qz = q[2], qw = q[3],
	
	        // calculate quat * vec
	        ix = qw * x + qy * z - qz * y,
	        iy = qw * y + qz * x - qx * z,
	        iz = qw * z + qx * y - qy * x,
	        iw = -qx * x - qy * y - qz * z;
	
	    // calculate result * inverse quat
	    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
	    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
	    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
	    out[3] = a[3];
	    return out;
	};
	
	/**
	 * Perform some operation over an array of vec4s.
	 *
	 * @param {Array} a the array of vectors to iterate over
	 * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed
	 * @param {Number} offset Number of elements to skip at the beginning of the array
	 * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array
	 * @param {Function} fn Function to call for each vector in the array
	 * @param {Object} [arg] additional argument to pass to fn
	 * @returns {Array} a
	 * @function
	 */
	vec4.forEach = (function() {
	    var vec = vec4.create();
	
	    return function(a, stride, offset, count, fn, arg) {
	        var i, l;
	        if(!stride) {
	            stride = 4;
	        }
	
	        if(!offset) {
	            offset = 0;
	        }
	        
	        if(count) {
	            l = Math.min((count * stride) + offset, a.length);
	        } else {
	            l = a.length;
	        }
	
	        for(i = offset; i < l; i += stride) {
	            vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2]; vec[3] = a[i+3];
	            fn(vec, vec, arg);
	            a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2]; a[i+3] = vec[3];
	        }
	        
	        return a;
	    };
	})();
	
	/**
	 * Returns a string representation of a vector
	 *
	 * @param {vec4} vec vector to represent as a string
	 * @returns {String} string representation of the vector
	 */
	vec4.str = function (a) {
	    return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
	};
	
	module.exports = vec4;


/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.
	
	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:
	
	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.
	
	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE. */
	
	var glMatrix = __webpack_require__(9);
	
	/**
	 * @class 2 Dimensional Vector
	 * @name vec2
	 */
	var vec2 = {};
	
	/**
	 * Creates a new, empty vec2
	 *
	 * @returns {vec2} a new 2D vector
	 */
	vec2.create = function() {
	    var out = new glMatrix.ARRAY_TYPE(2);
	    out[0] = 0;
	    out[1] = 0;
	    return out;
	};
	
	/**
	 * Creates a new vec2 initialized with values from an existing vector
	 *
	 * @param {vec2} a vector to clone
	 * @returns {vec2} a new 2D vector
	 */
	vec2.clone = function(a) {
	    var out = new glMatrix.ARRAY_TYPE(2);
	    out[0] = a[0];
	    out[1] = a[1];
	    return out;
	};
	
	/**
	 * Creates a new vec2 initialized with the given values
	 *
	 * @param {Number} x X component
	 * @param {Number} y Y component
	 * @returns {vec2} a new 2D vector
	 */
	vec2.fromValues = function(x, y) {
	    var out = new glMatrix.ARRAY_TYPE(2);
	    out[0] = x;
	    out[1] = y;
	    return out;
	};
	
	/**
	 * Copy the values from one vec2 to another
	 *
	 * @param {vec2} out the receiving vector
	 * @param {vec2} a the source vector
	 * @returns {vec2} out
	 */
	vec2.copy = function(out, a) {
	    out[0] = a[0];
	    out[1] = a[1];
	    return out;
	};
	
	/**
	 * Set the components of a vec2 to the given values
	 *
	 * @param {vec2} out the receiving vector
	 * @param {Number} x X component
	 * @param {Number} y Y component
	 * @returns {vec2} out
	 */
	vec2.set = function(out, x, y) {
	    out[0] = x;
	    out[1] = y;
	    return out;
	};
	
	/**
	 * Adds two vec2's
	 *
	 * @param {vec2} out the receiving vector
	 * @param {vec2} a the first operand
	 * @param {vec2} b the second operand
	 * @returns {vec2} out
	 */
	vec2.add = function(out, a, b) {
	    out[0] = a[0] + b[0];
	    out[1] = a[1] + b[1];
	    return out;
	};
	
	/**
	 * Subtracts vector b from vector a
	 *
	 * @param {vec2} out the receiving vector
	 * @param {vec2} a the first operand
	 * @param {vec2} b the second operand
	 * @returns {vec2} out
	 */
	vec2.subtract = function(out, a, b) {
	    out[0] = a[0] - b[0];
	    out[1] = a[1] - b[1];
	    return out;
	};
	
	/**
	 * Alias for {@link vec2.subtract}
	 * @function
	 */
	vec2.sub = vec2.subtract;
	
	/**
	 * Multiplies two vec2's
	 *
	 * @param {vec2} out the receiving vector
	 * @param {vec2} a the first operand
	 * @param {vec2} b the second operand
	 * @returns {vec2} out
	 */
	vec2.multiply = function(out, a, b) {
	    out[0] = a[0] * b[0];
	    out[1] = a[1] * b[1];
	    return out;
	};
	
	/**
	 * Alias for {@link vec2.multiply}
	 * @function
	 */
	vec2.mul = vec2.multiply;
	
	/**
	 * Divides two vec2's
	 *
	 * @param {vec2} out the receiving vector
	 * @param {vec2} a the first operand
	 * @param {vec2} b the second operand
	 * @returns {vec2} out
	 */
	vec2.divide = function(out, a, b) {
	    out[0] = a[0] / b[0];
	    out[1] = a[1] / b[1];
	    return out;
	};
	
	/**
	 * Alias for {@link vec2.divide}
	 * @function
	 */
	vec2.div = vec2.divide;
	
	/**
	 * Returns the minimum of two vec2's
	 *
	 * @param {vec2} out the receiving vector
	 * @param {vec2} a the first operand
	 * @param {vec2} b the second operand
	 * @returns {vec2} out
	 */
	vec2.min = function(out, a, b) {
	    out[0] = Math.min(a[0], b[0]);
	    out[1] = Math.min(a[1], b[1]);
	    return out;
	};
	
	/**
	 * Returns the maximum of two vec2's
	 *
	 * @param {vec2} out the receiving vector
	 * @param {vec2} a the first operand
	 * @param {vec2} b the second operand
	 * @returns {vec2} out
	 */
	vec2.max = function(out, a, b) {
	    out[0] = Math.max(a[0], b[0]);
	    out[1] = Math.max(a[1], b[1]);
	    return out;
	};
	
	/**
	 * Scales a vec2 by a scalar number
	 *
	 * @param {vec2} out the receiving vector
	 * @param {vec2} a the vector to scale
	 * @param {Number} b amount to scale the vector by
	 * @returns {vec2} out
	 */
	vec2.scale = function(out, a, b) {
	    out[0] = a[0] * b;
	    out[1] = a[1] * b;
	    return out;
	};
	
	/**
	 * Adds two vec2's after scaling the second operand by a scalar value
	 *
	 * @param {vec2} out the receiving vector
	 * @param {vec2} a the first operand
	 * @param {vec2} b the second operand
	 * @param {Number} scale the amount to scale b by before adding
	 * @returns {vec2} out
	 */
	vec2.scaleAndAdd = function(out, a, b, scale) {
	    out[0] = a[0] + (b[0] * scale);
	    out[1] = a[1] + (b[1] * scale);
	    return out;
	};
	
	/**
	 * Calculates the euclidian distance between two vec2's
	 *
	 * @param {vec2} a the first operand
	 * @param {vec2} b the second operand
	 * @returns {Number} distance between a and b
	 */
	vec2.distance = function(a, b) {
	    var x = b[0] - a[0],
	        y = b[1] - a[1];
	    return Math.sqrt(x*x + y*y);
	};
	
	/**
	 * Alias for {@link vec2.distance}
	 * @function
	 */
	vec2.dist = vec2.distance;
	
	/**
	 * Calculates the squared euclidian distance between two vec2's
	 *
	 * @param {vec2} a the first operand
	 * @param {vec2} b the second operand
	 * @returns {Number} squared distance between a and b
	 */
	vec2.squaredDistance = function(a, b) {
	    var x = b[0] - a[0],
	        y = b[1] - a[1];
	    return x*x + y*y;
	};
	
	/**
	 * Alias for {@link vec2.squaredDistance}
	 * @function
	 */
	vec2.sqrDist = vec2.squaredDistance;
	
	/**
	 * Calculates the length of a vec2
	 *
	 * @param {vec2} a vector to calculate length of
	 * @returns {Number} length of a
	 */
	vec2.length = function (a) {
	    var x = a[0],
	        y = a[1];
	    return Math.sqrt(x*x + y*y);
	};
	
	/**
	 * Alias for {@link vec2.length}
	 * @function
	 */
	vec2.len = vec2.length;
	
	/**
	 * Calculates the squared length of a vec2
	 *
	 * @param {vec2} a vector to calculate squared length of
	 * @returns {Number} squared length of a
	 */
	vec2.squaredLength = function (a) {
	    var x = a[0],
	        y = a[1];
	    return x*x + y*y;
	};
	
	/**
	 * Alias for {@link vec2.squaredLength}
	 * @function
	 */
	vec2.sqrLen = vec2.squaredLength;
	
	/**
	 * Negates the components of a vec2
	 *
	 * @param {vec2} out the receiving vector
	 * @param {vec2} a vector to negate
	 * @returns {vec2} out
	 */
	vec2.negate = function(out, a) {
	    out[0] = -a[0];
	    out[1] = -a[1];
	    return out;
	};
	
	/**
	 * Returns the inverse of the components of a vec2
	 *
	 * @param {vec2} out the receiving vector
	 * @param {vec2} a vector to invert
	 * @returns {vec2} out
	 */
	vec2.inverse = function(out, a) {
	  out[0] = 1.0 / a[0];
	  out[1] = 1.0 / a[1];
	  return out;
	};
	
	/**
	 * Normalize a vec2
	 *
	 * @param {vec2} out the receiving vector
	 * @param {vec2} a vector to normalize
	 * @returns {vec2} out
	 */
	vec2.normalize = function(out, a) {
	    var x = a[0],
	        y = a[1];
	    var len = x*x + y*y;
	    if (len > 0) {
	        //TODO: evaluate use of glm_invsqrt here?
	        len = 1 / Math.sqrt(len);
	        out[0] = a[0] * len;
	        out[1] = a[1] * len;
	    }
	    return out;
	};
	
	/**
	 * Calculates the dot product of two vec2's
	 *
	 * @param {vec2} a the first operand
	 * @param {vec2} b the second operand
	 * @returns {Number} dot product of a and b
	 */
	vec2.dot = function (a, b) {
	    return a[0] * b[0] + a[1] * b[1];
	};
	
	/**
	 * Computes the cross product of two vec2's
	 * Note that the cross product must by definition produce a 3D vector
	 *
	 * @param {vec3} out the receiving vector
	 * @param {vec2} a the first operand
	 * @param {vec2} b the second operand
	 * @returns {vec3} out
	 */
	vec2.cross = function(out, a, b) {
	    var z = a[0] * b[1] - a[1] * b[0];
	    out[0] = out[1] = 0;
	    out[2] = z;
	    return out;
	};
	
	/**
	 * Performs a linear interpolation between two vec2's
	 *
	 * @param {vec2} out the receiving vector
	 * @param {vec2} a the first operand
	 * @param {vec2} b the second operand
	 * @param {Number} t interpolation amount between the two inputs
	 * @returns {vec2} out
	 */
	vec2.lerp = function (out, a, b, t) {
	    var ax = a[0],
	        ay = a[1];
	    out[0] = ax + t * (b[0] - ax);
	    out[1] = ay + t * (b[1] - ay);
	    return out;
	};
	
	/**
	 * Generates a random vector with the given scale
	 *
	 * @param {vec2} out the receiving vector
	 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
	 * @returns {vec2} out
	 */
	vec2.random = function (out, scale) {
	    scale = scale || 1.0;
	    var r = glMatrix.RANDOM() * 2.0 * Math.PI;
	    out[0] = Math.cos(r) * scale;
	    out[1] = Math.sin(r) * scale;
	    return out;
	};
	
	/**
	 * Transforms the vec2 with a mat2
	 *
	 * @param {vec2} out the receiving vector
	 * @param {vec2} a the vector to transform
	 * @param {mat2} m matrix to transform with
	 * @returns {vec2} out
	 */
	vec2.transformMat2 = function(out, a, m) {
	    var x = a[0],
	        y = a[1];
	    out[0] = m[0] * x + m[2] * y;
	    out[1] = m[1] * x + m[3] * y;
	    return out;
	};
	
	/**
	 * Transforms the vec2 with a mat2d
	 *
	 * @param {vec2} out the receiving vector
	 * @param {vec2} a the vector to transform
	 * @param {mat2d} m matrix to transform with
	 * @returns {vec2} out
	 */
	vec2.transformMat2d = function(out, a, m) {
	    var x = a[0],
	        y = a[1];
	    out[0] = m[0] * x + m[2] * y + m[4];
	    out[1] = m[1] * x + m[3] * y + m[5];
	    return out;
	};
	
	/**
	 * Transforms the vec2 with a mat3
	 * 3rd vector component is implicitly '1'
	 *
	 * @param {vec2} out the receiving vector
	 * @param {vec2} a the vector to transform
	 * @param {mat3} m matrix to transform with
	 * @returns {vec2} out
	 */
	vec2.transformMat3 = function(out, a, m) {
	    var x = a[0],
	        y = a[1];
	    out[0] = m[0] * x + m[3] * y + m[6];
	    out[1] = m[1] * x + m[4] * y + m[7];
	    return out;
	};
	
	/**
	 * Transforms the vec2 with a mat4
	 * 3rd vector component is implicitly '0'
	 * 4th vector component is implicitly '1'
	 *
	 * @param {vec2} out the receiving vector
	 * @param {vec2} a the vector to transform
	 * @param {mat4} m matrix to transform with
	 * @returns {vec2} out
	 */
	vec2.transformMat4 = function(out, a, m) {
	    var x = a[0], 
	        y = a[1];
	    out[0] = m[0] * x + m[4] * y + m[12];
	    out[1] = m[1] * x + m[5] * y + m[13];
	    return out;
	};
	
	/**
	 * Perform some operation over an array of vec2s.
	 *
	 * @param {Array} a the array of vectors to iterate over
	 * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed
	 * @param {Number} offset Number of elements to skip at the beginning of the array
	 * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array
	 * @param {Function} fn Function to call for each vector in the array
	 * @param {Object} [arg] additional argument to pass to fn
	 * @returns {Array} a
	 * @function
	 */
	vec2.forEach = (function() {
	    var vec = vec2.create();
	
	    return function(a, stride, offset, count, fn, arg) {
	        var i, l;
	        if(!stride) {
	            stride = 2;
	        }
	
	        if(!offset) {
	            offset = 0;
	        }
	        
	        if(count) {
	            l = Math.min((count * stride) + offset, a.length);
	        } else {
	            l = a.length;
	        }
	
	        for(i = offset; i < l; i += stride) {
	            vec[0] = a[i]; vec[1] = a[i+1];
	            fn(vec, vec, arg);
	            a[i] = vec[0]; a[i+1] = vec[1];
	        }
	        
	        return a;
	    };
	})();
	
	/**
	 * Returns a string representation of a vector
	 *
	 * @param {vec2} vec vector to represent as a string
	 * @returns {String} string representation of the vector
	 */
	vec2.str = function (a) {
	    return 'vec2(' + a[0] + ', ' + a[1] + ')';
	};
	
	module.exports = vec2;


/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	var Filter, Material, barrel_filter_chromeab_code, barrel_filter_code, box_filter_code,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;
	
	Material = __webpack_require__(19).Material;
	
	box_filter_code = "return (get(-1,-1)+get(0,-1)+get(1,-1)+\n        get(-1, 0)+get(0, 0)+get(1, 0)+\n        get(-1, 1)+get(0, 1)+get(1, 1))/9.0;";
	
	barrel_filter_code = "vec4 HmdWarpParam = vec4(1.0,0.22,0.24,0.0);\nvec2 c = vec2(coord.x - (VP_TO_LENS), coord.y * INV_RATIO);\nfloat rSq = c.x * c.x + c.y * c.y;\nvec2 rvector = c * ( HmdWarpParam.x + HmdWarpParam.y * rSq +\n        HmdWarpParam.z * rSq * rSq\n        + HmdWarpParam.w * rSq * rSq * rSq\n        ) * INV_FOV_SCALE;\nrvector.y *= RATIO;\nrvector.x += VP_TO_IPD;\nreturn all(equal(rvector, clamp(rvector, vec2(-1), vec2(1))))?\n        gettex(rvector):vec3(0);";
	
	barrel_filter_chromeab_code = "vec4 HmdWarpParam = vec4(1.0,0.22,0.24,0.0);\nvec4 u_chromAbParam = vec4(0.996, -0.004, 1.0038, 0.0);\nvec2 c = vec2(coord.x - (VP_TO_LENS), coord.y * INV_RATIO);\nfloat rSq = c.x * c.x + c.y * c.y;\nvec2 rvector = c * ( HmdWarpParam.x + HmdWarpParam.y * rSq +\n        HmdWarpParam.z * rSq * rSq\n        + HmdWarpParam.w * rSq * rSq * rSq\n        );\nfloat inv_fov_scale = INV_FOV_SCALE;\nif (any(notEqual(step(0.985, rvector*inv_fov_scale)+step(-0.985, rvector*inv_fov_scale), vec2(1.0, 1.0)))) {\n  return vec3(0);\n}\nvec2 rvec_blue = rvector * (u_chromAbParam.z + u_chromAbParam.w * rSq);\nvec2 rvec_red  = rvector * (u_chromAbParam.x + u_chromAbParam.y * rSq);\nvec2 scale = vec2(inv_fov_scale, inv_fov_scale * RATIO);\nrvector *= scale;\nrvec_blue *= scale;\nrvec_red *= scale;\nfloat vp_to_ipd = VP_TO_IPD;\nrvector.x += vp_to_ipd;\nrvec_red.x += vp_to_ipd;\nrvec_blue.x += vp_to_ipd;\nvec2 asdf = vec2(0.00048828125);\nreturn vec3(gettex(rvec_red+asdf).r+gettex(rvec_red-asdf).r,\n            gettex(rvector+asdf).g+gettex(rvector-asdf).g,\n            gettex(rvec_blue+asdf).b+gettex(rvec_blue-asdf).b)*0.5;";
	
	Filter = (function(superClass) {
	  extend(Filter, superClass);
	
	  function Filter(render_manager, code, name) {
	    var fs, gl, prog, quad, vs;
	    if (name == null) {
	      name = 'filter';
	    }
	    vs = "precision highp float;\nprecision highp int;\nattribute vec3 vertex;\nuniform vec2 src_size, pixel_ratio;\nuniform vec4 src_rect, dst_rect;\nvarying vec2 src_co, dst_co, uv, coord;\nvarying vec2 src_offset, src_scale;\n\nvoid main(){\n    coord = (vertex.xy*2.0)-vec2(1.0,1.0);\n    gl_Position = vec4(coord, 0.0, 1.0);\n    src_co = src_rect.xy + src_rect.zw * vertex.xy;\n    dst_co = dst_rect.xy + dst_rect.zw * vertex.xy;\n    uv = src_co / src_size;\n    src_scale = src_rect.zw / src_size;\n    src_offset = src_rect.xy / src_size;\n}";
	    fs = "precision highp float;\nuniform sampler2D source;\nuniform vec2 src_size;\nvarying vec2 src_co, dst_co, uv, coord;\nvarying vec2 src_offset, src_scale;\nvec3 get(vec2 off){\n    return texture2D(source, uv+off/src_size).rgb;\n}\nvec3 get(float x, float y){\n    vec2 off = vec2(x, y);\n    return texture2D(source, uv+off/src_size).rgb;\n}\nvec3 get(int x, int y){\n    vec2 off = vec2(x, y);\n    return texture2D(source, uv+off/src_size).rgb;\n}\nvec3 gettex(vec2 co){\n    return texture2D(source, (co/2.0+vec2(0.5,0.5))*src_scale+src_offset).rgb;\n}\nvec3 filter(){" + code + "}\nvoid main(){\n    gl_FragColor = vec4(filter(), 1.0);\n}";
	    gl = render_manager.gl;
	    Filter.__super__.constructor.call(this, render_manager.context, name, fs, [], [], vs);
	    prog = this._program;
	    gl.uniform1i(gl.getUniformLocation(prog, 'source'), 0);
	    if (!render_manager.quad) {
	      render_manager.quad = quad = gl.createBuffer();
	      gl.bindBuffer(gl.ARRAY_BUFFER, quad);
	      gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0]), gl.STATIC_DRAW);
	    }
	  }
	
	  return Filter;
	
	})(Material);
	
	module.exports = {
	  box_filter_code: box_filter_code,
	  barrel_filter_code: barrel_filter_code,
	  barrel_filter_chromeab_code: barrel_filter_chromeab_code,
	  Filter: Filter
	};


/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	var Material, _active_program, load_material, load_textures_of_material, mat2, mat3, mat4, quat, ref, vec2, vec3, vec4;
	
	ref = __webpack_require__(8), mat2 = ref.mat2, mat3 = ref.mat3, mat4 = ref.mat4, vec2 = ref.vec2, vec3 = ref.vec3, vec4 = ref.vec4, quat = ref.quat;
	
	load_material = function(scene, data) {
	  var mat, name;
	  name = data.name;
	  mat = scene.materials[name] = new Material(scene.context, name, [scene.context.SHADER_LIB, data['fragment']], data.uniforms, data.attributes, "", scene);
	  return mat.double_sided = !!data.double_sided;
	};
	
	load_textures_of_material = function(scene, data) {
	  var j, len, ref1, u;
	  ref1 = data.uniforms;
	  for (j = 0, len = ref1.length; j < len; j++) {
	    u = ref1[j];
	    if (u.type === 13 && scene) {
	      scene.loader.load_texture(u.image, u.filepath, u.filter, u.wrap, u.size);
	    }
	  }
	};
	
	_active_program = null;
	
	Material = (function() {
	  function Material(context, name1, fs, uniforms, attributes, vs, scene1) {
	    var a, a_name, armature_deform_code, attribute_asgn, attribute_decl, extrude_code, fb, fragment_shader, gl, i, j, k, l, lamp_data, lamps, len, len1, len2, m, multiplier, n, num_bones, num_particles, num_shapes, o, p, prog, q, r, ref1, ref2, ref3, ref4, ref5, ref6, ref7, s, shape_key_code, strnd, t, tex, tex_uniforms, u, uniform_decl, v, var_color, var_custom, var_inv_model_view_matrix, var_inv_object_matrix, var_model_view_matrix, var_object_matrix, var_strand, var_strand_type, vertex_shader, vnormal, vtype;
	    this.context = context;
	    this.name = name1;
	    if (vs == null) {
	      vs = "";
	    }
	    this.scene = scene1;
	    if (this.context.all_materials.indexOf(this) === -1) {
	      this.context.all_materials.push(this);
	    }
	    gl = this.context.render_manager.gl;
	    this.textures = [];
	    this.uv_layer_attribs = {};
	    this.color_attribs = {};
	    tex_uniforms = [];
	    lamps = {};
	    this.lamps = [];
	    this.is_shadow_material = false;
	    this.attrib_locs = {
	      "vnormal": -1
	    };
	    this.users = [];
	    this.uniforms_config = uniforms;
	    this.attributes_config = attributes;
	    this.uv_multiplier = 1;
	    this.shape_multiplier = 1;
	    this.group_id = -1;
	    var_model_view_matrix = "model_view_matrix";
	    var_inv_model_view_matrix = "";
	    var_object_matrix = "";
	    var_inv_object_matrix = "";
	    var_color = "";
	    var_strand = "";
	    var_strand_type = "float";
	    var_custom = [];
	    for (j = 0, len = uniforms.length; j < len; j++) {
	      u = uniforms[j];
	      if (u.type === 6 || u.type === 7 || u.type === 11 || u.type === 15) {
	        l = lamps[u.lamp] || {
	          vardir: '',
	          varpos: '',
	          varmat: '',
	          varcolor3: '',
	          varcolor4: '',
	          dist: ''
	        };
	        lamps[u.lamp] = l;
	      }
	      if (u.type === 1) {
	        var_model_view_matrix = u.varname;
	      } else if (u.type === 2) {
	        var_object_matrix = u.varname;
	      } else if (u.type === 3) {
	        var_inv_model_view_matrix = u.varname;
	      } else if (u.type === 4) {
	        var_inv_object_matrix = u.varname;
	      } else if (u.type === 5) {
	        var_color = u.varname;
	      } else if (u.type === 6) {
	        l.vardir = u.varname;
	      } else if (u.type === 7) {
	        l.varpos = u.varname;
	      } else if (u.type === 9) {
	        l.varmat = u.varname;
	      } else if (u.type === 10) {
	        l.varenergy = u.varname;
	      } else if (u.type === 11) {
	        if (u.datatype === 4) {
	          l.varcolor3 = u.varname;
	        } else {
	          l.varcolor4 = u.varname;
	        }
	      } else if (u.type === 16) {
	        l.dist = u.varname;
	      } else if (u.type === 14) {
	        if (this.context.render_manager.extensions.texture_float_linear != null) {
	          this.textures.push({
	            loaded: true,
	            tex: this.scene.objects[u.lamp].shadow_fb.texture
	          });
	          tex_uniforms.push(u.varname);
	        }
	      } else if (u.type === 13 && this.scene) {
	        tex = this.scene.loader.load_texture(u.image, u.filepath, u.filter, u.wrap, u.size);
	        this.textures.push(tex);
	        tex.users.push(this);
	        tex_uniforms.push(u.varname);
	      } else if (u.type === 77) {
	        var_strand = u.varname;
	        var_strand_type = u.gltype;
	      } else if (u.type === -1) {
	        var_custom.push(u.varname);
	      } else {
	        console.log(u);
	        console.log("Warning: unknown uniform", u.varname, u.type, "of data type", ['0', '1i', '1f', '2f', '3f', '4f', 'm3', 'm4', '4ub'][u.datatype]);
	      }
	    }
	    uniform_decl = "";
	    attribute_decl = "";
	    attribute_asgn = "";
	    armature_deform_code = "";
	    extrude_code = "";
	    num_shapes = 0;
	    num_bones = 0;
	    num_particles = 0;
	    this.num_bone_uniforms = 0;
	    for (k = 0, len1 = attributes.length; k < len1; k++) {
	      a = attributes[k];
	      v = 'var' + a.varname.slice(3);
	      if (a.type < 14) {
	        vtype = "vec3";
	        multiplier = "";
	        if (a.type === 5) {
	          this.uv_layer_attribs[a.name] = a.varname;
	          vtype = "vec2";
	          multiplier = "*uv_multiplier";
	        } else if (a.type === 6) {
	          this.color_attribs[a.name] = a.varname;
	          vtype = "vec4";
	        } else {
	          console.log("Warning: unknown attribute type", a.type);
	        }
	        attribute_decl += "attribute " + vtype + " " + a.varname + ";\n" + "varying " + vtype + " " + v + ";\n";
	        attribute_asgn += v + "=" + a.varname + multiplier + ";\n";
	        this.attrib_locs[a.varname] = -1;
	      } else if (a.type === 18) {
	        attribute_decl += "attribute vec4 tangent;\n" + "varying vec4 " + v + ";\n";
	        attribute_asgn += v + ".xyz = normalize((" + var_model_view_matrix + "*vec4(tangent.xyz,0)).xyz);\n";
	        attribute_asgn += v + ".w = tangent.w;\n";
	        this.attrib_locs["tangent"] = -1;
	      } else if (a.type === 99) {
	        num_shapes = a.count;
	        for (i = m = 0, ref1 = num_shapes; 0 <= ref1 ? m < ref1 : m > ref1; i = 0 <= ref1 ? ++m : --m) {
	          attribute_decl += "attribute vec3 shape" + i + ";\n";
	          attribute_decl += "attribute vec3 shapenor" + i + ";\n";
	          this.attrib_locs["shape" + i] = -1;
	          this.attrib_locs["shapenor" + i] = -1;
	        }
	        uniform_decl += "uniform float shapef[" + num_shapes + "];";
	      } else if (a.type === 88) {
	        num_bones = a.count;
	        this.num_bone_uniforms = num_bones;
	        attribute_decl += "attribute vec4 weights;\n";
	        attribute_decl += "attribute vec4 b_indices;\n";
	        this.attrib_locs["weights"] = -1;
	        this.attrib_locs["b_indices"] = -1;
	        uniform_decl += "uniform mat4 bones[" + this.num_bone_uniforms + "];\n";
	        armature_deform_code = "vec4 blendco = vec4(0);\nvec3 blendnor = vec3(0);\nmat4 m;\nivec4 inds = ivec4(b_indices);\nint idx;\nfor(int i=0; i<4; ++i){\n    m = bones[inds[i]];\n    blendco += m * co4 * weights[i];\n    blendnor += mat3(m[0].xyz, m[1].xyz, m[2].xyz) * normal * weights[i];\n}\nco4 = blendco; normal = blendnor;";
	      } else if (a.type === 77) {
	        if (var_strand === "") {
	          var_strand = "strand";
	        }
	        uniform_decl += "uniform " + var_strand_type + " " + var_strand + ";\n";
	        num_particles = a.count;
	        for (i = n = 0, ref2 = num_particles; 0 <= ref2 ? n < ref2 : n > ref2; i = 0 <= ref2 ? ++n : --n) {
	          attribute_decl += "attribute vec3 particle" + i + ";\n";
	          this.attrib_locs["particle" + i] = -1;
	        }
	      } else {
	        attribute_decl += "varying vec3 " + v + ";\n";
	        attribute_asgn += v + " = co;\n";
	      }
	    }
	    shape_key_code = "";
	    if (num_shapes) {
	      shape_key_code = "float relf = 0.0;\nvec3 n;";
	      for (i = o = 0, ref3 = num_shapes; 0 <= ref3 ? o < ref3 : o > ref3; i = 0 <= ref3 ? ++o : --o) {
	        shape_key_code += "co += shape" + i + " * shapef[" + i + "] * shape_multiplier;\nrelf += shapef[" + i + "];";
	      }
	      shape_key_code += "normal *= clamp(1.0 - relf, 0.0, 1.0);\n";
	      for (i = p = 0, ref4 = num_shapes; 0 <= ref4 ? p < ref4 : p > ref4; i = 0 <= ref4 ? ++p : --p) {
	        shape_key_code += "n = shapenor" + i + " * 0.007874;\nnormal += n * Math.max(0.0, shapef[" + i + "]);";
	      }
	      vnormal = "vnormal * 0.007874";
	    } else {
	      vnormal = "vnormal";
	    }
	    if (num_particles) {
	      strnd = var_strand;
	      if (var_strand_type !== "float") {
	        strnd += ".x";
	      }
	      extrude_code = "co4 = vec4(mix(co4.xyz, particle0, " + strnd + ") ,1.0);";
	    }
	    this.vs_code = vs = vs || "precision highp float;\nprecision highp int;\nuniform mat4 " + var_model_view_matrix + ";\nuniform mat4 projection_matrix;\nuniform mat3 normal_matrix;\nuniform float shape_multiplier;\nuniform float uv_multiplier;\nattribute vec3 vertex;\nattribute vec3 vnormal;\nvarying vec3 varposition;\nvarying vec3 varnormal;" + attribute_decl + "        " + uniform_decl + "void main()\n{\n    vec3 co = vertex;\n    vec3 normal = " + vnormal + ";" + shape_key_code + attribute_asgn + "vec4 co4 = vec4(co, 1.0);" + armature_deform_code + "            " + extrude_code + "vec4 global_co = " + var_model_view_matrix + " * co4;\n    varposition = global_co.xyz;\n    varnormal = normalize(normal_matrix * normal);\n    gl_Position = projection_matrix * global_co;\n}";
	    vertex_shader = gl.createShader(gl.VERTEX_SHADER);
	    gl.shaderSource(vertex_shader, vs);
	    gl.compileShader(vertex_shader);
	    if (!gl.getShaderParameter(vertex_shader, gl.COMPILE_STATUS) && !gl.isContextLost()) {
	      console.log("Error compiling vertex shader of material", name);
	      console.log(gl.getShaderInfoLog(vertex_shader));
	      gl.deleteShader(vertex_shader);
	      return;
	    }
	    this.fs_code = fs;
	    fragment_shader = gl.createShader(gl.FRAGMENT_SHADER);
	    fs = fs.splice ? fs.join('') : fs;
	    gl.shaderSource(fragment_shader, fs);
	    gl.compileShader(fragment_shader);
	    if (!gl.getShaderParameter(fragment_shader, gl.COMPILE_STATUS) && !gl.isContextLost()) {
	      console.log("Error compiling fragment shader of material", name);
	      console.log(gl.getShaderInfoLog(fragment_shader));
	      gl.deleteShader(fragment_shader);
	      return;
	    }
	    prog = gl.createProgram();
	    gl.attachShader(prog, vertex_shader);
	    gl.attachShader(prog, fragment_shader);
	    gl.bindAttribLocation(prog, 0, 'vertex');
	    gl.linkProgram(prog);
	    if (!gl.getProgramParameter(prog, gl.LINK_STATUS) && !gl.isContextLost()) {
	      console.log("Error linking shader of material", name);
	      console.log(attributes);
	      console.log(gl.getProgramInfoLog(prog));
	      gl.deleteProgram(prog);
	      gl.deleteShader(vertex_shader);
	      gl.deleteShader(fragment_shader);
	      return;
	    }
	    gl.useProgram(prog);
	    this.u_model_view_matrix = gl.getUniformLocation(prog, var_model_view_matrix);
	    this.u_projection_matrix = gl.getUniformLocation(prog, "projection_matrix");
	    this.u_normal_matrix = gl.getUniformLocation(prog, "normal_matrix");
	    this.u_shape_multiplier = gl.getUniformLocation(prog, "shape_multiplier");
	    this.u_uv_multiplier = gl.getUniformLocation(prog, "uv_multiplier");
	    this.u_group_id = gl.getUniformLocation(prog, "group_id");
	    this.u_mesh_id = gl.getUniformLocation(prog, "mesh_id");
	    gl.uniform1f(this.u_shape_multiplier, this.shape_multiplier);
	    gl.uniform1f(this.u_uv_multiplier, this.uv_multiplier);
	    this.u_inv_model_view_matrix = gl.getUniformLocation(prog, var_inv_model_view_matrix);
	    this.u_var_object_matrix = gl.getUniformLocation(prog, var_inv_object_matrix);
	    this.u_var_inv_object_matrix = gl.getUniformLocation(prog, var_inv_object_matrix);
	    this.u_color = gl.getUniformLocation(prog, var_color);
	    this.u_fb_size = gl.getUniformLocation(prog, "fb_size");
	    this.u_strand = gl.getUniformLocation(prog, var_strand);
	    this.u_shapef = [];
	    for (i = q = 0, ref5 = num_shapes; 0 <= ref5 ? q < ref5 : q > ref5; i = 0 <= ref5 ? ++q : --q) {
	      this.u_shapef[i] = gl.getUniformLocation(prog, "shapef[" + i + "]");
	    }
	    this.u_bones = [];
	    for (i = r = 0, ref6 = this.num_bone_uniforms; 0 <= ref6 ? r < ref6 : r > ref6; i = 0 <= ref6 ? ++r : --r) {
	      this.u_bones[i] = gl.getUniformLocation(prog, "bones[" + i + "]");
	    }
	    this.u_custom = [];
	    for (s = 0, len2 = var_custom.length; s < len2; s++) {
	      v = var_custom[s];
	      this.u_custom.push(gl.getUniformLocation(prog, v));
	    }
	    fb = this.context.render_manager.common_filter_fb;
	    if (fb && (this.u_fb_size != null)) {
	      gl.uniform2f(this.u_fb_size, fb.size_x, fb.size_y);
	    }
	    this.a_vertex = gl.getAttribLocation(prog, "vertex");
	    gl.enableVertexAttribArray(this.a_vertex);
	    for (a_name in this.attrib_locs) {
	      a = gl.getAttribLocation(prog, a_name) | 0;
	      this.attrib_locs[a_name] = a;
	    }
	    for (i = t = 0, ref7 = tex_uniforms.length; 0 <= ref7 ? t < ref7 : t > ref7; i = 0 <= ref7 ? ++t : --t) {
	      gl.uniform1i(gl.getUniformLocation(prog, tex_uniforms[i]), i);
	    }
	    for (i in lamps) {
	      lamp_data = lamps[i];
	      this.lamps.push([this.scene.objects[i], gl.getUniformLocation(prog, lamp_data.varpos), gl.getUniformLocation(prog, lamp_data.varcolor3), gl.getUniformLocation(prog, lamp_data.varcolor4), gl.getUniformLocation(prog, lamp_data.dist), gl.getUniformLocation(prog, lamp_data.vardir), gl.getUniformLocation(prog, lamp_data.varmat), gl.getUniformLocation(prog, lamp_data.varenergy)]);
	    }
	    this._program = prog;
	  }
	
	  Material.prototype.use = function() {
	    var prog;
	    prog = this._program;
	    if (_active_program !== prog) {
	      this.context.render_manager.gl.useProgram(prog);
	    }
	    return prog;
	  };
	
	  Material.prototype.reupload = function() {
	    return this.constructor(this.name, this.fs_code, this.uniforms_config, this.attributes_config, this.vs_code, this.scene);
	  };
	
	  Material.prototype.destroy = function() {
	    return this.context.render_manager.gl.deleteProgram(this._program);
	  };
	
	  Material.prototype.debug_set_uniform = function(utype, uname, value) {
	    var loc;
	    this.context.render_manager.gl.useProgram(this._program);
	    loc = this.context.render_manager.gl.getUniformLocation(this._program, uname);
	    return this.context.render_manager.gl['uniform' + utype](loc, value);
	  };
	
	  Material.prototype.debug_set_custom_uniform = function(utype, index, value) {
	    this.context.render_manager.gl.useProgram(this._program);
	    return this.context.render_manager.gl['uniform' + utype](this.u_custom[index], value);
	  };
	
	  Material.prototype.clone_to_scene = function(scene) {
	    var cloned, dest_scene_lamps, dlamp, j, k, l, lamps, len, len1, ref1;
	    dest_scene_lamps = scene.lamps.slice(0);
	    cloned = scene.materials[this.name] = Object.create(this);
	    lamps = cloned.lamps = [];
	    ref1 = this.lamps;
	    for (j = 0, len = ref1.length; j < len; j++) {
	      l = ref1[j];
	      l = l.slice(0);
	      if (l[0]) {
	        for (k = 0, len1 = dest_scene_lamps.length; k < len1; k++) {
	          dlamp = dest_scene_lamps[k];
	          if (dlamp.lamp_type === l[0].lamp_type) {
	            l[0] = dlamp;
	            dest_scene_lamps.remove(dlamp);
	            break;
	          }
	        }
	      }
	      lamps.push(l);
	    }
	    return cloned;
	  };
	
	  return Material;
	
	})();
	
	module.exports = {
	  load_material: load_material,
	  load_textures_of_material: load_textures_of_material,
	  Material: Material
	};


/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	var Filter, Framebuffer, MainFramebuffer,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;
	
	Filter = __webpack_require__(18).Filter;
	
	Framebuffer = (function() {
	  function Framebuffer(render_manager, size_x, size_y, tex_type, tex_format) {
	    var fb, gl, internal_format, rb, tex;
	    this.render_manager = render_manager;
	    if (tex_type == null) {
	      tex_type = this.render_manager.gl.FLOAT;
	    }
	    if (tex_format == null) {
	      tex_format = this.render_manager.gl.RGBA;
	    }
	    this.context = this.render_manager.context;
	    gl = this.render_manager.gl;
	    this.size_x = size_x;
	    this.size_y = size_y;
	    this.texture = tex = gl.createTexture();
	    gl.bindTexture(gl.TEXTURE_2D, tex);
	    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
	    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
	    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
	    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
	    this.tex_type = tex_type;
	    internal_format = this.tex_format = tex_format;
	    if (tex_type == null) {
	      tex_type = this.render_manager.gl.FLOAT;
	    }
	    if (tex_format == null) {
	      tex_format = this.render_manager.gl.RGBA;
	    }
	    if (tex_type === this.render_manager.gl.FLOAT) {
	      if (!this.render_manager.extensions['texture_float']) {
	        tex_type === this.render_manager.gl.UNSIGNED_BYTE;
	      } else if (this.context.MYOU_PARAMS.nodejs) {
	        internal_format = 0x8814;
	      }
	    }
	    gl.texImage2D(gl.TEXTURE_2D, 0, internal_format, size_x, size_y, 0, tex_format, tex_type, null);
	    this.render_buffer = rb = gl.createRenderbuffer();
	    gl.bindRenderbuffer(gl.RENDERBUFFER, rb);
	    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, size_x, size_y);
	    this.framebuffer = fb = gl.createFramebuffer();
	    gl.bindFramebuffer(gl.FRAMEBUFFER, fb);
	    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex, 0);
	    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, rb);
	    gl.bindTexture(gl.TEXTURE_2D, null);
	    gl.bindRenderbuffer(gl.RENDERBUFFER, null);
	    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
	  }
	
	  Framebuffer.prototype.recreate = function() {
	    if (this.framebuffer) {
	      return this.constructor(this.size_x, this.size_y, this.tex_type, this.tex_format);
	    }
	  };
	
	  Framebuffer.prototype.enable = function(rect) {
	    var left, size_x, size_y, top;
	    if (rect == null) {
	      rect = null;
	    }
	    if (rect == null) {
	      left = top = 0;
	      size_x = this.size_x;
	      size_y = this.size_y;
	    } else {
	      left = rect[0];
	      top = rect[1];
	      size_x = rect[2];
	      size_y = rect[3];
	    }
	    this.current_size_x = size_x;
	    this.current_size_y = size_y;
	    this.render_manager.gl.bindFramebuffer(this.render_manager.gl.FRAMEBUFFER, this.framebuffer);
	    this.render_manager.gl.viewport(left, top, size_x, size_y);
	    return Framebuffer.active_rect = [left, top, size_x, size_y];
	  };
	
	  Framebuffer.prototype.disable = function() {
	    return this.render_manager.gl.bindFramebuffer(this.render_manager.gl.FRAMEBUFFER, null);
	  };
	
	  Framebuffer.prototype.draw_with_filter = function(filter, src_rect) {
	    var gl, l, prog;
	    prog = filter.use();
	    gl = this.render_manager.gl;
	    gl.uniform2f(gl.getUniformLocation(prog, 'src_size'), this.size_x, this.size_y);
	    l = gl.getUniformLocation(prog, 'src_rect');
	    if (l && l._ !== -1) {
	      gl.uniform4f(l, src_rect[0], src_rect[1], src_rect[2], src_rect[3]);
	    }
	    l = gl.getUniformLocation(prog, 'dst_rect');
	    if (l && l._ !== -1) {
	      gl.uniform4fv(l, Framebuffer.active_rect);
	    }
	    gl.bindBuffer(gl.ARRAY_BUFFER, this.render_manager.quad);
	    gl.activeTexture(gl.TEXTURE0);
	    gl.bindTexture(gl.TEXTURE_2D, this.texture);
	    this.render_manager.change_enabled_attributes(1 << filter.a_vertex);
	    gl.vertexAttribPointer(filter.a_vertex, 3.0, gl.FLOAT, false, 0, 0);
	    return gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
	  };
	
	  Framebuffer.prototype.destroy = function() {
	    this.render_manager.gl.deleteRenderbuffer(this.render_buffer);
	    return this.render_manager.gl.deleteFramebuffer(this.framebuffer);
	  };
	
	  return Framebuffer;
	
	})();
	
	MainFramebuffer = (function(superClass) {
	  extend(MainFramebuffer, superClass);
	
	  function MainFramebuffer(render_manager) {
	    this.render_manager = render_manager;
	    this.framebuffer = null;
	  }
	
	  return MainFramebuffer;
	
	})(Framebuffer);
	
	module.exports = {
	  Framebuffer: Framebuffer,
	  MainFramebuffer: MainFramebuffer
	};


/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	var GL_BYTE, GL_FLOAT, GL_INT, GL_SHORT, GL_TRIANGLES, GL_UNSIGNED_BYTE, GL_UNSIGNED_INT, GL_UNSIGNED_SHORT, GameObject, Mesh, MeshData, load_material, load_textures_of_material, mat2, mat3, mat4, mesh_datas, quat, ref, ref1, vec2, vec3, vec4,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;
	
	ref = __webpack_require__(8), mat2 = ref.mat2, mat3 = ref.mat3, mat4 = ref.mat4, vec2 = ref.vec2, vec3 = ref.vec3, vec4 = ref.vec4, quat = ref.quat;
	
	GameObject = __webpack_require__(22).GameObject;
	
	ref1 = __webpack_require__(19), load_material = ref1.load_material, load_textures_of_material = ref1.load_textures_of_material;
	
	GL_TRIANGLES = 4;
	
	GL_BYTE = 0x1400;
	
	GL_UNSIGNED_BYTE = 0x1401;
	
	GL_SHORT = 0x1402;
	
	GL_UNSIGNED_SHORT = 0x1403;
	
	GL_INT = 0x1404;
	
	GL_UNSIGNED_INT = 0x1405;
	
	GL_FLOAT = 0x1406;
	
	mesh_datas = {};
	
	MeshData = (function() {
	  function MeshData(context) {
	    this.context = context;
	    this.type = 'MESH';
	    this.users = [];
	    this.hash = '';
	    this.varray = null;
	    this.iarray = null;
	    this.vertex_buffers = [];
	    this.index_buffers = [];
	    this.num_indices = [];
	    this.attrib_pointers = [];
	    this.attrib_bitmasks = [];
	    this.stride = 0;
	    this.draw_method = GL_TRIANGLES;
	    this.phy_convex_hull = null;
	    this.phy_mesh = null;
	  }
	
	  MeshData.prototype.reupload = function() {
	    var j, len, new_data, ref2, u;
	    if (this.users[0]) {
	      new_data = this.users[0].load_from_va_ia(this.varray, this.iarray);
	      ref2 = this.users;
	      for (j = 0, len = ref2.length; j < len; j++) {
	        u = ref2[j];
	        u.data.remove(u);
	        u.data = new_data;
	        u.configure_materials();
	      }
	    }
	  };
	
	  MeshData.prototype.remove = function(ob) {
	    this.users.remove(ob.data);
	    if (this.users.length === 0) {
	      return delete this.context.meshes[this.hash];
	    }
	  };
	
	  return MeshData;
	
	})();
	
	Mesh = (function(superClass) {
	  extend(Mesh, superClass);
	
	  function Mesh(context) {
	    this.context = context;
	    Mesh.__super__.constructor.call(this, this.context);
	    this.type = 'MESH';
	    this.data = null;
	    this.materials = [];
	    this.material_names = [];
	    this.passes = [0];
	    this.shapes = {};
	    this._shape_names = [];
	    this.armature = null;
	    this.sort_dot = 0;
	    this.custom_uniform_values = [];
	    this.active_mesh_index = 0;
	    this.altmeshes = [];
	    this.last_lod_object = null;
	    this.culled_in_last_frame = false;
	    this.hash = '';
	    this.elements = [];
	    this.offsets = [];
	    this.stride = 0;
	    this.mesh_id = 0;
	    this.all_f = false;
	    this.mesh_name = '';
	  }
	
	  Mesh.prototype.load_from_arraybuffer = function(data) {
	    var ia, ilen, offset, va, vlen;
	    vlen = this.offsets[this.offsets.length - 2];
	    ilen = this.offsets[this.offsets.length - 1];
	    offset = this.pack_offset || 0;
	    va = new Float32Array(data, offset, vlen);
	    ia = new Uint16Array(data, offset + vlen * 4, ilen);
	    return this.load_from_va_ia(va, ia);
	  };
	
	  Mesh.prototype.load_from_lists = function(vertices, indices) {
	    this.offsets = [0, 0, vertices.length, indices.length];
	    return this.load_from_va_ia(new Float32Array(vertices), new Uint16Array(indices));
	  };
	
	  Mesh.prototype.load_from_va_ia = function(va, ia) {
	    var bytes, data, gl, i, i2, ib, j, k, l, len, len1, m, mat, matname, mesh_id, num_submeshes, offsets, ref2, ref3, ref4, ref5, vb;
	    if (this.data != null) {
	      this.data.remove(this);
	    }
	    data = this.data = mesh_datas[this.hash] = new MeshData(this.context);
	    data.hash = this.hash;
	    data.users.push(this);
	    data.varray = va;
	    data.iarray = ia;
	    if (this.mesh_id) {
	      mesh_id = this.mesh_id | 0;
	      bytes = new Uint8Array(va.buffer, va.byteOffset, va.byteLength);
	      if (bytes[15] !== mesh_id) {
	        i = 0;
	        while (i < bytes.length) {
	          bytes[i] = mesh_id;
	          i += this.stride;
	        }
	      }
	    }
	    offsets = this.offsets;
	    num_submeshes = (offsets.length / 2) - 1;
	    gl = this.context.render_manager.gl;
	    for (i = j = 0, ref2 = num_submeshes; 0 <= ref2 ? j < ref2 : j > ref2; i = 0 <= ref2 ? ++j : --j) {
	      i2 = i * 2;
	      vb = gl.createBuffer();
	      gl.bindBuffer(gl.ARRAY_BUFFER, vb);
	      gl.bufferData(gl.ARRAY_BUFFER, va.subarray(offsets[i2], offsets[i2 + 2]), gl.STATIC_DRAW);
	      data.vertex_buffers.push(vb);
	      ib = gl.createBuffer();
	      if (offsets[i2 + 1] !== offsets[i2 + 3]) {
	        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, ib);
	        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, ia.subarray(offsets[i2 + 1], offsets[i2 + 3]), gl.STATIC_DRAW);
	      } else {
	        pass;
	      }
	      ref3 = this.altmeshes;
	      for (k = 0, len = ref3.length; k < len; k++) {
	        m = ref3[k];
	        pass;
	      }
	      data.index_buffers.push(ib);
	      data.num_indices.push(offsets[i2 + 3] - offsets[i2 + 1]);
	    }
	    data.stride = this.stride;
	    if (this.scene) {
	      if (this.materials.length !== 0) {
	        this.configure_materials();
	      } else if (!(this.scene.enabled && this.scene.loaded)) {
	        ref4 = this.material_names;
	        for (l = 0, len1 = ref4.length; l < len1; l++) {
	          matname = ref4[l];
	          mat = this.scene.unloaded_material_data[matname];
	          if (mat) {
	            load_textures_of_material(this.scene, mat);
	          }
	        }
	      }
	    }
	    if (this.scene && this.scene.world) {
	      this.instance_physics();
	    }
	    if ((ref5 = this.context.main_loop) != null) {
	      ref5.reset_timeout();
	    }
	    return data;
	  };
	
	  Mesh.prototype.update_iarray = function() {
	    var gl, i, i2, ia, j, num_submeshes, offsets, ref2;
	    if (!this.data) {
	      return;
	    }
	    offsets = this.offsets;
	    num_submeshes = offsets.length / 2 - 1;
	    ia = this.data.iarray;
	    gl = this.context.render_manager.gl;
	    for (i = j = 0, ref2 = num_submeshes; 0 <= ref2 ? j < ref2 : j > ref2; i = 0 <= ref2 ? ++j : --j) {
	      i2 = i * 2;
	      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.data.index_buffers[i]);
	      gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, ia.subarray(offsets[i2 + 1], offsets[i2 + 3]), gl.STATIC_DRAW);
	    }
	  };
	
	  Mesh.prototype.configure_materials = function(materials) {
	    var a_normal, attr, attrib_bitmasks, attrib_pointers, attribs, bitmask, color, cuv, data, e, etype, gl_float_byte, gl_float_unsigned_byte, i, j, k, l, len, len1, len10, len11, len2, len3, len4, len5, len6, len7, len8, len9, m, mat, mi, mname, n, num_values, o, o_b_indices, o_colors, o_particles, o_shapes, o_shapes_b, o_tangent, o_uvs, o_uvs_s, o_weights, p, q, r, ref2, ref3, ref4, ref5, ref6, ref7, s, scene, stride, t, uv, v, varname, w, x, y, z;
	    if (materials == null) {
	      materials = [];
	    }
	    if (materials.length === 0) {
	      if ((this.context.render_manager.frame_start + 3000) < performance.now()) {
	        return false;
	      }
	      scene = this.scene;
	      ref2 = this.material_names;
	      for (j = 0, len = ref2.length; j < len; j++) {
	        mname = ref2[j];
	        if (mname === 'UNDEFINED_MATERIAL') {
	          console.warn('Mesh ' + this.name + ' has undefined material');
	        }
	        if (scene) {
	          data = scene.unloaded_material_data[mname];
	          if (data) {
	            load_material(scene, data);
	            delete scene.unloaded_material_data[mname];
	          }
	        }
	        mat = scene.materials[mname];
	        if (mat) {
	          materials.push(mat);
	        } else {
	          return true;
	        }
	      }
	    }
	    for (k = 0, len1 = materials.length; k < len1; k++) {
	      m = materials[k];
	      m.users.remove(this);
	      m.users.push(this);
	    }
	    this.materials = materials;
	    this._shape_names = [];
	    o_shapes = [];
	    o_shapes_b = [];
	    o_tangent = [];
	    o_particles = [];
	    o_uvs = [];
	    o_uvs_s = [];
	    o_colors = [];
	    o_weights = 0;
	    o_b_indices = 0;
	    stride = 3 * 4;
	    ref3 = this.elements;
	    for (l = 0, len2 = ref3.length; l < len2; l++) {
	      e = ref3[l];
	      etype = e[0];
	      if (etype === 'normal') {
	        stride += this.all_f ? 3 * 4 : 4;
	      } else if (etype === 'shape') {
	        o_shapes.push(stride);
	        this.shapes[e[1]] = 0;
	        this._shape_names.push(e[1]);
	        stride += 4 * 4;
	      } else if (etype === 'shape_b') {
	        o_shapes_b.push(stride);
	        this.shapes[e[1]] = 0;
	        this._shape_names.push(e[1]);
	        stride += 2 * 4;
	      } else if (etype === 'tangent') {
	        o_tangent.push(stride);
	        stride += this.all_f ? 4 * 4 : 4;
	      } else if (etype === 'particles') {
	        for (i = n = 0, ref4 = e[1]; 0 <= ref4 ? n < ref4 : n > ref4; i = 0 <= ref4 ? ++n : --n) {
	          o_particles.push(stride);
	          stride += 3 * 4;
	        }
	      } else if (etype === 'uv') {
	        o_uvs.push([e[1], stride]);
	        stride += 2 * 4;
	      } else if (etype === 'uv_s') {
	        o_uvs_s.push([e[1], stride]);
	        stride += 2 * 2;
	      } else if (etype === 'color') {
	        o_colors.push([e[1], stride]);
	        stride += 4;
	      } else if (etype === 'weights') {
	        this.armature = this.parent;
	        o_weights = stride;
	        stride += 4 * 4;
	        o_b_indices = stride;
	        stride += this.all_f ? 4 * 4 : 4;
	      } else {
	        print("Unknown element" + etype);
	      }
	    }
	    if (o_uvs.length) {
	      o_uvs.push(['0', o_uvs[0][1]]);
	    }
	    if (o_colors.length) {
	      o_colors.push(['0', o_colors[0][1]]);
	    }
	    attrib_pointers = [];
	    attrib_bitmasks = [];
	    mi = 0;
	    for (p = 0, len3 = materials.length; p < len3; p++) {
	      mat = materials[p];
	      attribs = [[mat.a_vertex, 3, GL_FLOAT, 0]];
	      a_normal = mat.attrib_locs["vnormal"];
	      gl_float_byte = this.all_f ? GL_FLOAT : GL_BYTE;
	      gl_float_unsigned_byte = this.all_f ? GL_FLOAT : GL_UNSIGNED_BYTE;
	      if (a_normal !== -1) {
	        attribs.push([a_normal, 3, gl_float_byte, 12]);
	      }
	      i = 0;
	      for (q = 0, len4 = o_shapes.length; q < len4; q++) {
	        o = o_shapes[q];
	        attribs.push([mat.attrib_locs["shape" + i], 3, GL_FLOAT, o]);
	        attribs.push([mat.attrib_locs["shapenor" + i], 3, GL_BYTE, o + 12]);
	        i += 1;
	      }
	      for (r = 0, len5 = o_shapes_b.length; r < len5; r++) {
	        o = o_shapes_b[r];
	        attribs.push([mat.attrib_locs["shape" + i], 3, GL_BYTE, o]);
	        attribs.push([mat.attrib_locs["shapenor" + i], 3, GL_BYTE, o + 4]);
	        i += 1;
	      }
	      if (o_tangent.length && mat.attrib_locs["tangent"]) {
	        attribs.push([mat.attrib_locs["tangent"], 4, gl_float_byte, o_tangent]);
	      }
	      i = 0;
	      for (s = 0, len6 = o_particles.length; s < len6; s++) {
	        o = o_particles[s];
	        attribs.push([mat.attrib_locs["particle" + i], 3, GL_FLOAT, o]);
	        i += 1;
	      }
	      for (t = 0, len7 = o_uvs.length; t < len7; t++) {
	        uv = o_uvs[t];
	        varname = mat.uv_layer_attribs[uv[0]];
	        if (varname) {
	          attribs.push([mat.attrib_locs[varname], 2, GL_FLOAT, uv[1]]);
	        }
	      }
	      for (v = 0, len8 = o_uvs_s.length; v < len8; v++) {
	        uv = o_uvs_s[v];
	        varname = mat.uv_layer_attribs[uv[0]];
	        if (varname) {
	          attribs.push([mat.attrib_locs[varname], 2, GL_UNSIGNED_SHORT, uv[1]]);
	        }
	      }
	      for (w = 0, len9 = o_colors.length; w < len9; w++) {
	        color = o_colors[w];
	        varname = mat.color_attribs[color[0]];
	        if (varname) {
	          attribs.push([mat.attrib_locs[varname], 4, GL_UNSIGNED_BYTE, color[1]]);
	        }
	      }
	      if (this.armature) {
	        attribs.push([mat.attrib_locs['weights'], 4, GL_FLOAT, o_weights]);
	        attribs.push([mat.attrib_locs['b_indices'], 4, gl_float_unsigned_byte, o_b_indices]);
	      }
	      bitmask = 0;
	      ref5 = reversed(attribs);
	      for (x = 0, len10 = ref5.length; x < len10; x++) {
	        attr = ref5[x];
	        if (attr[0] !== -1) {
	          bitmask |= 1 << attr[0];
	        } else {
	          attribs.pop(attribs.indexOf(attr));
	        }
	      }
	      attrib_pointers.push(attribs);
	      attrib_bitmasks.push(bitmask);
	      mi += 1;
	    }
	    this.data.attrib_pointers = attrib_pointers;
	    this.data.attrib_bitmasks = attrib_bitmasks;
	    num_values = 0;
	    ref6 = this.materials;
	    for (y = 0, len11 = ref6.length; y < len11; y++) {
	      m = ref6[y];
	      num_values = Math.max(num_values, m.u_custom.length);
	    }
	    if (this.custom_uniform_values.length === 0) {
	      this.custom_uniform_values = cuv = [];
	      for (i = z = 0, ref7 = num_values; 0 <= ref7 ? z < ref7 : z > ref7; i = 0 <= ref7 ? ++z : --z) {
	        cuv.push(null);
	      }
	    }
	    return true;
	  };
	
	  return Mesh;
	
	})(GameObject);
	
	module.exports = {
	  Mesh: Mesh
	};


/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	var Animation, BoxShape, CapsuleShape, CharacterBody, CompoundShape, ConvexShape, CylinderShape, GameObject, MIRROR_X, MIRROR_XY, MIRROR_XYZ, MIRROR_XZ, MIRROR_Y, MIRROR_YZ, MIRROR_Z, NO_MIRROR, RigidBody, STransform, SphereShape, StaticBody, TriangleMeshShape, add_body, add_child_shape, allow_sleeping, get_convex_hull_edges, make_ghost, mat2, mat3, mat4, quat, ref, ref1, remove_body, set_angular_factor, set_linear_factor, update_ob_physics, vec2, vec3, vec4;
	
	ref = __webpack_require__(8), mat2 = ref.mat2, mat3 = ref.mat3, mat4 = ref.mat4, vec2 = ref.vec2, vec3 = ref.vec3, vec4 = ref.vec4, quat = ref.quat;
	
	Animation = __webpack_require__(23).Animation;
	
	ref1 = __webpack_require__(24), update_ob_physics = ref1.update_ob_physics, BoxShape = ref1.BoxShape, SphereShape = ref1.SphereShape, CylinderShape = ref1.CylinderShape, CapsuleShape = ref1.CapsuleShape, ConvexShape = ref1.ConvexShape, TriangleMeshShape = ref1.TriangleMeshShape, CompoundShape = ref1.CompoundShape, get_convex_hull_edges = ref1.get_convex_hull_edges, add_child_shape = ref1.add_child_shape, RigidBody = ref1.RigidBody, StaticBody = ref1.StaticBody, CharacterBody = ref1.CharacterBody, add_body = ref1.add_body, remove_body = ref1.remove_body, allow_sleeping = ref1.allow_sleeping, make_ghost = ref1.make_ghost, set_linear_factor = ref1.set_linear_factor, set_angular_factor = ref1.set_angular_factor;
	
	NO_MIRROR = 1;
	
	MIRROR_X = 2;
	
	MIRROR_Y = 4;
	
	MIRROR_Z = 8;
	
	MIRROR_XY = 16;
	
	MIRROR_XZ = 32;
	
	MIRROR_YZ = 64;
	
	MIRROR_XYZ = 128;
	
	GameObject = (function() {
	  function GameObject(context) {
	    this.context = context;
	    this.use_physics = false;
	    this.debug = false;
	    if (this.context != null) {
	      this.use_physics = this.context.MYOU_PARAMS.load_physics_engine;
	    }
	    this.position = vec3.create();
	    this.rotation = quat.create();
	    this.radius = 0;
	    this.rotation_order = 'Q';
	    this.scale = vec3.set(vec3.create(), 1, 1, 1);
	    this.dimensions = vec3.create();
	    this.color = vec4.set(vec4.create(), 1, 1, 1, 1);
	    this.alpha = 1;
	    this.offset_scale = vec3.set(vec3.create(), 1, 1, 1);
	    this.scene = null;
	    this.dupli_group = null;
	    this.visible = true;
	    this._world_position = vec3.create();
	    this._sqdist = 0;
	    this.parent = null;
	    this.children = [];
	    this["static"] = false;
	    this.world_matrix = mat4.create();
	    this.rotation_matrix = mat3.create();
	    this.normal_matrix = mat3.create();
	    this.custom_uniform_values = [];
	    this.properties = {};
	    this.animations = {};
	    this.name = null;
	    this.original_name = null;
	    this.mirrors = 1;
	    this.lod_objects = [];
	    this.parent_bone_index = -1;
	    this.body = null;
	    this.shape = null;
	    this.physics_type = 'NO_COLLISION';
	    if (this.use_physics) {
	      this.physical_radius = 1;
	      this.anisotropic_friction = false;
	      this.friction_coefficients = vec3.set(vec3.create(), 1, 1, 1);
	      this.collision_group = 1;
	      this.collision_mask = 255;
	      this.collision_shape = null;
	      this.collision_margin = 0;
	      this.collision_compound = false;
	      this.mass = 0;
	      this.no_sleeping = false;
	      this.is_ghost = false;
	      this.linear_factor = vec3.set(vec3.create(), 1, 1, 1);
	      this.angular_factor = vec3.set(vec3.create(), 1, 1, 1);
	      this.form_factor = 0.4;
	      this.friction = 0.5;
	      this.elasticity = 0;
	      this.phy_mesh = null;
	      this.phy_he = vec3.create();
	      this.phy_debug_mesh = null;
	      this.phy_debug_hull = null;
	      this._use_visual_mesh = false;
	      this.step_height = 0.15;
	      this.jump_force = 10;
	      this.max_fall_speed = 55;
	      this.last_position = vec3.create();
	    }
	    this.actions = [];
	    this.particle_systems = null;
	  }
	
	  GameObject.prototype.instance_physics = function(use_visual_mesh) {
	    var body, comp, data, dim, has_collision, he, inv, is_hull, is_tmesh, mass, ob, p, parent, parent_posrot, pos, posrot, radius, rot, scale, shape, va_ia;
	    if (use_visual_mesh == null) {
	      use_visual_mesh = false;
	    }
	    if (this.visible_mesh) {
	      this.visible_mesh.instance_physics();
	      return;
	    }
	    if (this.body) {
	      remove_body(this.scene.world, this.body);
	      this.scene.rigid_bodies.remove(this);
	      this.scene.static_ghosts.remove(this);
	      this.body = null;
	      this.phy_debug_mesh = null;
	    }
	    mass = this.mass;
	    shape = null;
	    has_collision = this.physics_type !== 'NO_COLLISION';
	    if (has_collision) {
	      if (!this.scene.world) {
	        return;
	      }
	      is_hull = this.collision_shape === 'CONVEX_HULL';
	      is_tmesh = this.collision_shape === 'TRIANGLE_MESH';
	      he = this.phy_he;
	      dim = this.dimensions;
	      if (dim[0] === 0 && dim[1] === 0 && dim[2] === 0) {
	        he = vec3.scale(he, this.scale, this.physical_radius);
	      } else {
	        vec3.scale(he, dim, 0.5);
	      }
	      if (this.collision_shape === 'BOX') {
	        shape = new BoxShape(he[0], he[1], he[2], this.collision_margin);
	        this.phy_debug_mesh = this.context.render_manager.debug.box;
	      } else if (this.collision_shape === 'SPHERE') {
	        radius = Math.max(he[0], he[1], he[2]);
	        he = [radius, radius, radius];
	        shape = new SphereShape(radius, this.collision_margin);
	        this.phy_debug_mesh = this.context.render_manager.debug.sphere;
	      } else if (this.collision_shape === 'CYLINDER') {
	        radius = Math.max(he[0], he[1]);
	        he = [radius, radius, he[2]];
	        shape = new CylinderShape(radius, he[2], this.collision_margin);
	        this.phy_debug_mesh = this.context.render_manager.debug.cylinder;
	      } else if (this.collision_shape === 'CAPSULE') {
	        radius = Math.max(he[0], he[1]);
	        he = [radius, radius, he[2]];
	        shape = new CapsuleShape(radius, he[2], this.collision_margin);
	        this.phy_debug_mesh = this.context.render_manager.debug.cylinder;
	      } else if (is_hull || is_tmesh) {
	        if (this.physics_mesh) {
	          if (use_visual_mesh) {
	            ob = this;
	          } else {
	            ob = this.physics_mesh;
	          }
	        } else {
	          use_visual_mesh = true;
	          ob = this;
	        }
	        data = ob.data;
	        if (!data) {
	          if (this.visible) {
	            this.scene.loader.load_mesh_data(ob);
	          }
	          return;
	        }
	        if (is_hull) {
	          shape = data.phy_convex_hull;
	        } else {
	          shape = data.phy_mesh;
	          if (this.mirrors & 2) {
	            shape = data.phy_mesh_mx;
	          }
	        }
	        if (shape && (!use_visual_mesh) !== (!this._use_visual_mesh)) {
	          shape.mesh && destroy(shape.mesh);
	          destroy(shape);
	          shape = null;
	        }
	        this._use_visual_mesh = use_visual_mesh;
	        if (!shape) {
	          scale = vec3.clone(this.scale);
	          while (p) {
	            vec3.scale(scale, scale, p.scale[2]);
	            p = p.parent;
	          }
	          if (this.mirrors & 2) {
	            scale[0] = -scale[0];
	          }
	          if (is_hull) {
	            shape = new ConvexShape(data.varray, ob.stride / 4, this.scale, this.collision_margin);
	            data.phy_convex_hull = shape;
	            if (this.debug && !this.phy_debug_hull) {
	              va_ia = get_convex_hull_edges(data.varray, ob.stride / 4, scale);
	              this.phy_debug_hull = this.context.render_manager.debug.debug_mesh_from_va_ia(va_ia[0], va_ia[1]);
	            }
	            this.phy_debug_mesh = this.phy_debug_hull;
	          } else {
	            shape = TriangleMeshShape(data.varray, data.iarray.subarray(0, ob.offsets[2]), ob.stride / 4, scale, this.collision_margin, this.name);
	            if (this.mirrors & 2) {
	              data.phy_mesh_mx = shape;
	            } else {
	              data.phy_mesh = shape;
	            }
	          }
	        }
	        vec3.copy(he, this.scale);
	      } else {
	        print("Warning: Unknown shape", this.collision_shape);
	      }
	      if (this.collision_compound && shape) {
	        if (this.parent && this.parent.collision_compound) {
	          parent = this.parent;
	          while (parent.parent && parent.parent.collision_compound) {
	            parent = parent.parent;
	          }
	          posrot = this.get_world_pos_rot();
	          pos = posrot[0];
	          rot = posrot[1];
	          parent_posrot = parent.get_world_pos_rot();
	          vec3.sub(pos, pos, parent_posrot[0]);
	          inv = quat.invert([], parent_posrot[1]);
	          vec3.transformQuat(pos, pos, inv);
	          quat.mul(rot, inv, rot);
	          comp = parent.shape;
	          add_child_shape(comp, shape, pos, rot);
	          shape = null;
	        } else {
	          comp = new CompoundShape;
	          add_child_shape(comp, shape, [0, 0, 0], [0, 0, 0, 1]);
	          shape = comp;
	        }
	      } else {
	        this.collision_compound = false;
	      }
	      if (shape) {
	        posrot = this.get_world_pos_rot();
	        pos = posrot[0];
	        if (this.mirrors & 2) {
	          pos[0] = -pos[0];
	        }
	        rot = posrot[1];
	        if (this.physics_type === 'RIGID_BODY') {
	          body = new RigidBody(mass, shape, pos, rot, this.friction, this.elasticity, this.form_factor);
	          set_linear_factor(body, this.linear_factor);
	          set_angular_factor(body, this.angular_factor);
	          this.scene.rigid_bodies.push(this);
	        } else if (this.physics_type === 'DYNAMIC') {
	          body = new RigidBody(mass, shape, pos, rot, this.friction, this.elasticity, this.form_factor);
	          set_linear_factor(body, this.linear_factor);
	          set_angular_factor(body, [0, 0, 0]);
	          this.scene.rigid_bodies.push(this);
	        } else if (this.physics_type === 'STATIC' || this.physics_type === 'SENSOR') {
	          body = new StaticBody(shape, pos, rot, this.friction, this.elasticity);
	        } else if (this.physics_type === 'CHARACTER') {
	          body = CharacterBody(shape, pos, rot, this.step_height, 2, -this.scene.world.getGravity().z() * 1, this.jump_force, this.max_fall_speed, PI_2);
	          this.scene.rigid_bodies.push(this);
	        } else {
	          print("Warning: Type not handled", this.physics_type);
	        }
	        this.shape = shape;
	      } else {
	        body = null;
	      }
	      if (body) {
	        add_body(this.scene.world, body, this.collision_group, this.collision_mask);
	        body.owner = this;
	        if (this.no_sleeping) {
	          allow_sleeping(body, false);
	        }
	        if (this.is_ghost || this.physics_type === 'SENSOR') {
	          this.scene.static_ghosts.push(this);
	          make_ghost(body, true);
	        }
	        if (this.physics_type === 'CHARACTER') {
	          this.scene.kinematic_characters.push(this);
	        }
	        update_ob_physics(this);
	      }
	      return this.body = body;
	    }
	  };
	
	  GameObject.prototype._update_matrices = function() {
	    var a, axis, axisn, bi, cosa, isx, isy, isz, j, nm, ox, oy, oz, pos, rm, scl, sina, w, wm, x, y, z;
	    rm = this.rotation_matrix;
	    if (this.rotation_order === 'Q') {
	      x = this.rotation[0];
	      y = this.rotation[1];
	      z = this.rotation[2];
	      w = this.rotation[3];
	      rm[0] = w * w + x * x - y * y - z * z;
	      rm[1] = 2 * (x * y + z * w);
	      rm[2] = 2 * (x * z - y * w);
	      rm[3] = 2 * (x * y - z * w);
	      rm[4] = w * w - x * x + y * y - z * z;
	      rm[5] = 2 * (z * y + x * w);
	      rm[6] = 2 * (x * z + y * w);
	      rm[7] = 2 * (y * z - x * w);
	      rm[8] = w * w - x * x - y * y + z * z;
	    } else {
	      for (axisn = j = 0; j < 3; axisn = ++j) {
	        axis = this.rotation_order[axisn];
	        mat3.identity(rm);
	        a = this.rotation[{
	          'X': 0,
	          'Y': 1,
	          'Z': 2
	        }[axis]];
	        cosa = Math.cos(a);
	        sina = Math.sin(a);
	        if (axis === 'X') {
	          rm[4] = cosa;
	          rm[5] = sina;
	          rm[7] = -sina;
	          rm[8] = cosa;
	        } else if (axis === 'Y') {
	          rm[0] = cosa;
	          rm[2] = -sina;
	          rm[6] = sina;
	          rm[8] = cosa;
	        } else if (axis === 'Z') {
	          rm[0] = cosa;
	          rm[1] = sina;
	          rm[3] = -sina;
	          rm[4] = cosa;
	        }
	        mat3.multiply(m, rm, m);
	      }
	    }
	    pos = this.position;
	    ox = this.offset_scale[0];
	    oy = this.offset_scale[1];
	    oz = this.offset_scale[2];
	    scl = this.scale;
	    isx = 1 / scl[0];
	    isy = 1 / scl[1];
	    isz = 1 / scl[2];
	    nm = this.normal_matrix;
	    nm[0] = rm[0] * isx;
	    nm[1] = rm[1] * isx;
	    nm[2] = rm[2] * isx;
	    nm[3] = rm[3] * isy;
	    nm[4] = rm[4] * isy;
	    nm[5] = rm[5] * isy;
	    nm[6] = rm[6] * isz;
	    nm[7] = rm[7] * isz;
	    nm[8] = rm[8] * isz;
	    wm = this.world_matrix;
	    wm[0] = rm[0] * ox * scl[0];
	    wm[1] = rm[1] * oy * scl[0];
	    wm[2] = rm[2] * oz * scl[0];
	    wm[4] = rm[3] * ox * scl[1];
	    wm[5] = rm[4] * oy * scl[1];
	    wm[6] = rm[5] * oz * scl[1];
	    wm[8] = rm[6] * ox * scl[2];
	    wm[9] = rm[7] * oy * scl[2];
	    wm[10] = rm[8] * oz * scl[2];
	    wm[12] = pos[0];
	    wm[13] = pos[1];
	    wm[14] = pos[2];
	    if (this.parent) {
	      bi = this.parent_bone_index;
	      mat3.mul(rm, this.parent.rotation_matrix, rm);
	      mat3.mul(nm, this.parent.normal_matrix, nm);
	      return mat4.mul(this.world_matrix, this.parent.world_matrix, this.world_matrix);
	    }
	  };
	
	  GameObject.prototype.calc_bounding_box = function() {
	    var dim_half;
	    this.bounding_box_low = vec4.create();
	    this.bounding_box_high = vec4.create();
	    this.bounding_box_low[3] = this.bounding_box_high[3] = 1;
	    dim_half = vec3.create();
	    vec3.scale(dim_half, this.dimensions, 0.5);
	    vec3.sub(this.bounding_box_low, this.position, dim_half);
	    return vec3.add(this.bounding_box_high, this.position, dim_half);
	  };
	
	  GameObject.prototype.get_world_position = function() {
	    var p, pos;
	    p = this.parent;
	    pos = vec3.copy(this._world_position, this.position);
	    while (p) {
	      vec3.mul(pos, pos, p.scale);
	      vec3.transformQuat(pos, pos, p.rotation);
	      vec3.add(pos, pos, p.position);
	      p = p.parent;
	    }
	    return pos;
	  };
	
	  GameObject.prototype.get_world_rotation = function() {
	    var p, rot;
	    p = this.parent;
	    rot = quat.clone(this.rotation);
	    while (p) {
	      quat.mul(rot, p.rotation, rot);
	      p = p.parent;
	    }
	    return rot;
	  };
	
	  GameObject.prototype.get_world_pos_rot = function() {
	    var p, pos, rot;
	    p = this.parent;
	    pos = vec3.clone(this.position);
	    rot = quat.clone(this.rotation);
	    while (p) {
	      vec3.mul(pos, pos, p.scale);
	      vec3.transformQuat(pos, pos, p.rotation);
	      vec3.add(pos, pos, p.position);
	      quat.mul(rot, p.rotation, rot);
	      p = p.parent;
	    }
	    return [pos, rot];
	  };
	
	  GameObject.prototype.clone = function(scene) {
	    var i, j, mat, materials, n, ref2;
	    if (scene == null) {
	      scene = this.scene;
	    }
	    n = Object.create(this);
	    n.position = vec3.clone(this.position);
	    n.rotation = vec4.clone(this.rotation);
	    n.scale = vec3.clone(this.scale);
	    n.dimensions = vec3.clone(this.dimensions);
	    n.offset_scale = vec3.clone(this.offset_scale);
	    n.world_matrix = mat4.clone(this.world_matrix);
	    n.rotation_matrix = mat3.clone(this.rotation_matrix);
	    n.normal_matrix = mat3.clone(this.normal_matrix);
	    n.color = vec4.clone(this.color);
	    n.custom_uniform_values = this.custom_uniform_values.slice(0);
	    n.properties = Object.create(this.properties);
	    n.actions = this.actions.slice(0);
	    n.passes = this.passes && this.passes.slice(0);
	    if (n.materials && scene !== this.scene) {
	      n.materials = materials = n.materials.slice(0);
	      for (i = j = 0, ref2 = materials.length; 0 <= ref2 ? j < ref2 : j > ref2; i = 0 <= ref2 ? ++j : --j) {
	        mat = materials[i] = materials[i].clone_to_scene(scene);
	      }
	    }
	    scene.add_object(n, this.name);
	    if (this.body) {
	      n.body = null;
	      n.instance_physics(this._use_visual_mesh);
	    }
	    return n;
	  };
	
	  GameObject.prototype.remove = function(recursive) {
	    return this.scene.remove_object(recursive);
	  };
	
	  GameObject.prototype.add_animation = function(anim_id, action) {
	    var anim;
	    if (Object.keys(this.animations).length === 0) {
	      this.scene.context.all_anim_objects.push(this);
	    }
	    anim = this.animations[anim_id] = new Animation;
	    anim.action = action;
	    anim.owner = this;
	    this._recalc_affected_channels();
	    return anim;
	  };
	
	  GameObject.prototype.del_animation = function(anim_id) {
	    delete this.animations[anim_id];
	    if (Object.keys(this.animations.length === 0)) {
	      this.scene.context.all_anim_objects.remove(this);
	    }
	    return this._recalc_affected_channels();
	  };
	
	  GameObject.prototype._recalc_affected_channels = function() {
	    var affected, anim, c, i, key, path, ref2;
	    affected = {};
	    i = 0;
	    ref2 = this.animations;
	    for (key in ref2) {
	      anim = ref2[key];
	      for (path in anim.action.channels) {
	        c = affected[path];
	        if (c == null) {
	          c = affected[path] = true;
	        }
	      }
	      i += 1;
	    }
	    return this.affected_anim_channels = affected;
	  };
	
	  GameObject.prototype.set_altmesh = function(index) {
	    return set_altmesh(this, index);
	  };
	
	  return GameObject;
	
	})();
	
	STransform = (function() {
	  function STransform() {
	    this.position = [0, 0, 0];
	    this.rotation = [0, 0, 0, 1];
	    this.scale = 1;
	  }
	
	  STransform.prototype.to_mat4 = function(out) {
	    var s, w, x, y, z;
	    x = this.rotation[0];
	    y = this.rotation[1];
	    z = this.rotation[2];
	    w = this.rotation[3];
	    s = this.scale;
	    out[0] = (w * w + x * x - y * y - z * z) * s;
	    out[1] = 2 * (x * y + z * w) * s;
	    out[2] = 2 * (x * z - y * w) * s;
	    out[3] = 0;
	    out[4] = 2 * (x * y - z * w) * s;
	    out[5] = (w * w - x * x + y * y - z * z) * s;
	    out[6] = 2 * (z * y + x * w) * s;
	    out[7] = 0;
	    out[8] = 2 * (x * z + y * w) * s;
	    out[9] = 2 * (y * z - x * w) * s;
	    out[10] = (w * w - x * x - y * y + z * z) * s;
	    out[11] = 0;
	    out[12] = this.position[0];
	    out[13] = this.position[1];
	    out[14] = this.position[2];
	    return out[15] = 1;
	  };
	
	  STransform.prototype.transform = function(out, other) {
	    vec3.add(out.position, other.position, out.position);
	    quat.mul(out.rotation.other.rotation, out.rotation);
	    return out.scale *= other.scale;
	  };
	
	  STransform.prototype.invert = function(out) {
	    var pos, rot, scale;
	    scale = out.scale = 1 / this.scale;
	    rot = quat.invert(out.rotation, this.rotation);
	    pos = vec3.scale(out.position, this.position, -scale);
	    return vec3.transformQuat(pos, pos, rot);
	  };
	
	  STransform.prototype.randomize = function() {
	    this.rotation = [Math.random() - 0.5, Math.random() - 0.5, Math.random() - 0.5, Math.random() - 0.5];
	    quat.normalize(this.rotation, this.rotation);
	    this.position = [Math.random() - 0.5, Math.random() - 0.5, Math.random() - 0.5];
	    return this.scale = Math.random() * 2 + 0.1;
	  };
	
	  return STransform;
	
	})();
	
	module.exports = {
	  GameObject: GameObject,
	  STransform: STransform
	};


/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	var Action, Animation, actions, akEq, animations, cubic_root, evaluate_all_animations, mat2, mat3, mat4, quat, ref, solve_roots, stop_all_animations, update_ob_physics, vec2, vec3, vec4;
	
	actions = {};
	
	animations = {};
	
	ref = __webpack_require__(8), mat2 = ref.mat2, mat3 = ref.mat3, mat4 = ref.mat4, vec2 = ref.vec2, vec3 = ref.vec3, vec4 = ref.vec4, quat = ref.quat;
	
	update_ob_physics = __webpack_require__(24).update_ob_physics;
	
	Action = (function() {
	  function Action(name, channels, markers) {
	    var ch, i, l, len, len1, m, path, ref1;
	    if (markers == null) {
	      markers = {};
	    }
	    this.name = name;
	    this.channels = {};
	    this.markers = markers;
	    for (l = 0, len = channels.length; l < len; l++) {
	      ch = channels[l];
	      path = ch[0] + '.' + ch[1] + '.' + ch[2];
	      this.channels[path] = ch;
	      ref1 = ch[3];
	      for (m = 0, len1 = ref1.length; m < len1; m++) {
	        i = ref1[m];
	        if (i.length === 0) {
	          console.error('Empty channel on ' + name + ' -> ' + path);
	        }
	      }
	    }
	    return;
	  }
	
	  Action.prototype.get = function(channel_path, time) {
	    var ch, idx, l, last_x, len, ref1, ret_vec, rr, spline, v;
	    ret_vec = [];
	    ref1 = this.channels[channel_path][3];
	    for (l = 0, len = ref1.length; l < len; l++) {
	      ch = ref1[l];
	      last_x = ch[ch.length - 4];
	      if (time > last_x) {
	        ret_vec.push(ch[ch.length - 3]);
	      } else if (time <= ch[2]) {
	        ret_vec.push(ch[3]);
	      } else {
	        idx = 2;
	        while (ch[idx] < time) {
	          idx += 6;
	        }
	        spline = ch.slice(idx - 6, idx + 2);
	        rr = solve_roots(time, spline[0], spline[2], spline[4], spline[6]);
	        rr = Math.max(0, Math.min(1, rr));
	        v = interpolate(rr, spline[1], spline[3], spline[5], spline[7]);
	        ret_vec.push(v);
	      }
	    }
	    return ret_vec;
	  };
	
	  return Action;
	
	})();
	
	Animation = (function() {
	  function Animation() {}
	
	  Animation.prototype.action = null;
	
	  Animation.prototype.speed = 0;
	
	  Animation.prototype.pos = 0;
	
	  Animation.prototype.weight = 1;
	
	  Animation.prototype.factor = 1;
	
	  Animation.prototype.blendin_total = 0;
	
	  Animation.prototype.blendout_total = 0;
	
	  Animation.prototype.blendin_remaining = 0;
	
	  Animation.prototype.blendout_remaining = 0;
	
	  Animation.prototype.owner = null;
	
	  return Animation;
	
	})();
	
	evaluate_all_animations = function(context, frame_duration_ms) {
	  var anim, anim_id, blend, blended, bo_r, chan, frame_factor, i, j, k, l, len, len1, m, n, name, o, ob, orig_chan, p, path, prop, r, ref1, ref2, ref3, ref4, ref5, s, target, type, v, w, weight, wi, wo;
	  frame_factor = frame_duration_ms * 0.06;
	  ref1 = context.all_anim_objects;
	  for (l = 0, len = ref1.length; l < len; l++) {
	    ob = ref1[l];
	    blended = [];
	    for (path in ob.affected_anim_channels) {
	      blend = null;
	      weight = 0;
	      type = name = prop = '';
	      ref2 = ob.animations;
	      for (k in ref2) {
	        anim = ref2[k];
	        orig_chan = anim.action.channels[path];
	        if (!orig_chan) {
	          continue;
	        }
	        v = anim.action.get(path, anim.pos);
	        w = anim.weight * anim.factor;
	        for (i = m = 0, ref3 = v.length; 0 <= ref3 ? m < ref3 : m > ref3; i = 0 <= ref3 ? ++m : --m) {
	          v[i] *= w;
	        }
	        if (blend == null) {
	          blend = v;
	          type = orig_chan[0];
	          name = orig_chan[1];
	          prop = orig_chan[2];
	        } else {
	          for (i = n = 0, ref4 = blend.length; 0 <= ref4 ? n < ref4 : n > ref4; i = 0 <= ref4 ? ++n : --n) {
	            blend[i] += v[i];
	          }
	        }
	        weight += w;
	      }
	      blended.push([type, name, prop, blend, weight]);
	    }
	    for (o = 0, len1 = blended.length; o < len1; o++) {
	      chan = blended[o];
	      type = chan[0];
	      name = chan[1];
	      prop = chan[2];
	      if (type === 'object') {
	        target = ob;
	      } else if (type === 'pose') {
	        target = ob.bones[name];
	      } else if (type === 'shape') {
	        target = ob.shapes;
	        prop = name;
	      } else {
	        console.log("Unknown channel type:", type);
	      }
	      v = chan[3];
	      wi = Math.max(1 - chan[4], 0);
	      wo = 1 / Math.max(chan[4], 1);
	      if (v.length === 1) {
	        v = v[0];
	        target[prop] = (target[prop] * wi) + v * wo;
	      } else {
	        p = target[prop];
	        for (j = r = 0, ref5 = v.length; 0 <= ref5 ? r < ref5 : r > ref5; j = 0 <= ref5 ? ++r : --r) {
	          p[j] = p[j] * wi + v[j] * wo;
	        }
	        if (prop === 'rotation') {
	          quat.normalize(p, p);
	        }
	      }
	      i += 1;
	    }
	    for (anim_id in ob.animations) {
	      anim = ob.animations[anim_id];
	      s = anim.speed * frame_factor;
	      anim.pos += s;
	      if (s === 0) {
	        continue;
	      }
	      bo_r = anim.blendout_remaining;
	      if (bo_r > 0) {
	        bo_r -= frame_factor;
	        if (bo_r <= 0) {
	          pass;
	        } else {
	          anim.blendout_remaining = bo_r;
	          anim.weight = bo_r / anim.blendout_total;
	        }
	      }
	    }
	    update_ob_physics(ob);
	  }
	};
	
	stop_all_animations = function() {
	  var anim_id, l, len, ob, ref1;
	  ref1 = _all_anim_objects.slice(0);
	  for (l = 0, len = ref1.length; l < len; l++) {
	    ob = ref1[l];
	    for (anim_id in ob.animations) {
	      ob.del_animation(anim_id);
	    }
	  }
	};
	
	cubic_root = function(d) {
	  if (d > 0) {
	    return Math.pow(d, 0.3333333333333333);
	  } else {
	    return -Math.pow(-d, 0.3333333333333333);
	  }
	};
	
	solve_roots = function(x, p0, p1, p2, p3, s) {
	  var S, a, aa, ao3, b, c, c0, c1, c2, c3, cp, d, p, phi, q, t, tPI, u, v;
	  tPI = (4.0 * Math.atan(1.0)) * 0.3333333333333333;
	  s = 0.0;
	  c0 = p0 - x;
	  c1 = -3.0 * p0 + 3.0 * p1;
	  c2 = 3.0 * p0 - 6.0 * p1 + 3.0 * p2;
	  c3 = -p0 + 3.0 * p1 - 3.0 * p2 + p3;
	  if (Math.abs(c3) <= 0.000000119209290) {
	    if (Math.abs(c1) > 0.000000119209290) {
	      s = -c0 / c1;
	    }
	    if (akEq(s)) {
	      return 1;
	    }
	    if (Math.abs(c0) <= 0.000000119209290) {
	      return 1;
	    }
	    return 0;
	  }
	  a = c2 / c3;
	  b = c1 / c3;
	  c = c0 / c3;
	  ao3 = a * 0.3333333333333333;
	  aa = a * a;
	  p = 0.3333333333333333 * (-0.3333333333333333 * aa + b);
	  q = 0.5 * (2 / 27 * a * aa - 0.3333333333333333 * a * b + c);
	  cp = p * p * p;
	  d = q * q + cp;
	  if (Math.abs(d) <= 0.000000119209290) {
	    if (Math.abs(q) <= 0.000000119209290) {
	      s = 0.0;
	      console.log('triple');
	      return s;
	    } else {
	      u = cubic_root(-q);
	      s = 2.0 * u;
	      if (!akEq(s - ao3)) {
	        s = -u;
	      }
	    }
	  } else if (d < 0.0) {
	    phi = 0.3333333333333333 * Math.acos(-q / Math.sqrt(-cp));
	    t = 2.0 * Math.sqrt(-p);
	    s = t * Math.cos(phi);
	    if (!akEq(s - ao3)) {
	      s = -t * Math.cos(phi + tPI);
	      if (!akEq(s - ao3)) {
	        s = -t * Math.cos(phi - tPI);
	      }
	    }
	  } else {
	    S = Math.sqrt(d);
	    u = cubic_root(S - q);
	    v = -cubic_root(S + q);
	    s = u + v;
	  }
	  s -= ao3;
	  return s;
	};
	
	akEq = function(v) {
	  return v >= -0.000000119209290 && v < 1 + 0.000000119209290;
	};
	
	module.exports = {
	  Action: Action,
	  Animation: Animation,
	  evaluate_all_animations: evaluate_all_animations,
	  stop_all_animations: stop_all_animations
	};


/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	var BoxShape, CapsuleShape, CharacterBody, CompoundShape, ConvexShape, CylinderShape, PHYSICS_ENGINE_SIZE, PHYSICS_ENGINE_URL, PhyQuat, PhyVec3, PhysicsWorld, Ray, RigidBody, SphereShape, StaticBody, TriangleMeshShape, _character_controllers, _phy_obs_ptrs, _tmp_ClosestRayResultCallback, _tmp_Quaternion, _tmp_Transform, _tmp_Vector3, _tmp_Vector3b, _tmp_Vector3c, activate_body, add_body, add_child_shape, allow_sleeping, apply_central_force, apply_central_impulse, apply_force, character_jump, colliding_bodies, deactivate_body, destroy, destroy_body, destroy_world, get_angular_velocity, get_convex_hull_edges, get_last_char_phy, get_linear_velocity, get_mass, make_ghost, mat2, mat3, mat4, ob_to_phy, on_ground, phy_to_ob, physics_engine_init, quat, ray_intersect_body, ray_intersect_body_absolute, ray_intersect_body_bool, ray_intersect_body_bool_not_target, ref, remove_body, set_angular_factor, set_angular_velocity, set_body_activation_state, set_body_deactivation_time, set_character_jump_force, set_character_velocity, set_gravity, set_linear_factor, set_linear_velocity, set_mass, set_max_fall_speed, set_phy_scale, step_world, update_ob_physics, vec2, vec3, vec4, xyz;
	
	ref = __webpack_require__(8), mat2 = ref.mat2, mat3 = ref.mat3, mat4 = ref.mat4, vec2 = ref.vec2, vec3 = ref.vec3, vec4 = ref.vec4, quat = ref.quat;
	
	PHYSICS_ENGINE_URL = 'ammo.asm.js';
	
	PHYSICS_ENGINE_SIZE = 3776745;
	
	_phy_obs_ptrs = {};
	
	_tmp_Vector3 = _tmp_Vector3b = _tmp_Vector3c = _tmp_Quaternion = _tmp_Transform = _tmp_ClosestRayResultCallback = destroy = null;
	
	physics_engine_init = function() {
	  _tmp_Vector3 = new Ammo.btVector3(0, 0, 0);
	  _tmp_Vector3b = new Ammo.btVector3(0, 0, 0);
	  _tmp_Vector3c = new Ammo.btVector3(0, 0, 0);
	  _tmp_Quaternion = new Ammo.btQuaternion(0, 0, 0, 0);
	  _tmp_Transform = new Ammo.btTransform;
	  _tmp_ClosestRayResultCallback = new Ammo.ClosestRayResultCallback(new Ammo.btVector3(0, 0, 0), new Ammo.btVector3(0, 0, 0));
	  return destroy = Ammo.destroy || function(o) {
	    return o.destroy();
	  };
	};
	
	xyz = function(v) {
	  var p;
	  p = v.ptr >> 2;
	  return Ammo.HEAPF32.subarray(p, p + 3);
	};
	
	PhysicsWorld = function() {
	  var broadphase, configuration, dispatcher, solver, world;
	  configuration = new Ammo.btDefaultCollisionConfiguration;
	  dispatcher = new Ammo.btCollisionDispatcher(configuration);
	  broadphase = new Ammo.btDbvtBroadphase;
	  solver = new Ammo.btSequentialImpulseConstraintSolver;
	  world = new Ammo.btDiscreteDynamicsWorld(dispatcher, broadphase, solver, configuration);
	  world.pointers = [solver, broadphase, dispatcher, configuration];
	  return world;
	};
	
	destroy_world = function(world) {
	  var k, len, p, pointers;
	  pointers = world.pointers;
	  destroy(world);
	  for (k = 0, len = pointers.length; k < len; k++) {
	    p = pointers[k];
	    destroy(p);
	  }
	};
	
	PhyVec3 = function(x, y, z) {
	  return new Ammo.btVector3(x, y, z);
	};
	
	PhyQuat = function(x, y, z, w) {
	  return new Ammo.btQuaternion(x, y, z, w);
	};
	
	BoxShape = function(x, y, z, margin) {
	  var shape;
	  _tmp_Vector3.setValue(x, y, z);
	  shape = new Ammo.btBoxShape(_tmp_Vector3);
	  shape.setMargin(margin);
	  return shape;
	};
	
	SphereShape = function(radius, margin) {
	  var shape;
	  shape = new Ammo.btSphereShape(radius);
	  shape.setMargin(margin);
	  return shape;
	};
	
	CylinderShape = function(radius, height, margin) {
	  var shape;
	  _tmp_Vector3.setValue(radius, radius, height);
	  shape = new Ammo.btCylinderShapeZ(_tmp_Vector3);
	  shape.setMargin(margin);
	  return shape;
	};
	
	CapsuleShape = function(radius, height, margin) {
	  var shape;
	  shape = new Ammo.btCapsuleShapeZ(radius, (height - radius) * 2);
	  shape.setMargin(margin);
	  return shape;
	};
	
	ConvexShape = function(vertices, vstride, scale, margin) {
	  var i, j, k, p, ref1, shape, vlen;
	  vlen = vertices.length / vstride;
	  shape = new Ammo.btConvexHullShape;
	  p = shape.ptr;
	  i = 0;
	  for (i = k = 0, ref1 = vlen; 0 <= ref1 ? k < ref1 : k > ref1; i = 0 <= ref1 ? ++k : --k) {
	    j = i * vstride;
	    _tmp_Vector3.setValue(vertices[j], vertices[j + 1], vertices[j + 2]);
	    shape.addPoint(_tmp_Vector3);
	  }
	  _tmp_Vector3.setValue(scale[0], scale[1], scale[2]);
	  shape.setLocalScaling(_tmp_Vector3);
	  shape.setMargin(margin);
	  return shape;
	};
	
	get_convex_hull_edges = function(vertices, vstride) {
	  var f, faces, i, i3, i6, i9, indices, j, k, l, ref1, ref2, verts, vlen;
	  vlen = vertices.length / vstride;
	  verts = [];
	  for (i = k = 0, ref1 = vlen; 0 <= ref1 ? k < ref1 : k > ref1; i = 0 <= ref1 ? ++k : --k) {
	    j = i * vstride;
	    verts.push([vertices[j], vertices[j + 1], vertices[j + 2]]);
	  }
	  faces = convexHull(verts);
	  verts = new Float32Array(faces.length * 9);
	  indices = new Int16Array(faces.length * 6);
	  for (i = l = 0, ref2 = faces.length; 0 <= ref2 ? l < ref2 : l > ref2; i = 0 <= ref2 ? ++l : --l) {
	    i3 = i * 3;
	    i6 = i * 6;
	    i9 = i * 9;
	    f = faces[i].vertices;
	    verts.set(f[0], i9);
	    verts.set(f[1], i9 + 3);
	    verts.set(f[2], i9 + 6);
	    indices[i6] = i3;
	    indices[i6 + 1] = i3 + 1;
	    indices[i6 + 2] = i3 + 1;
	    indices[i6 + 3] = i3 + 2;
	    indices[i6 + 4] = i3 + 2;
	    indices[i6 + 5] = i3;
	    i += 1;
	  }
	  return [verts, indices];
	};
	
	TriangleMeshShape = function(vertices, indices, vstride, scale, margin, name) {
	  var HEAPF32, inds, k, mesh, offset, ref1, shape, v, verts, vlen;
	  vlen = vertices.length / vstride;
	  inds = Ammo._malloc(indices.length * 4);
	  Ammo.HEAPU32.set(indices, inds >> 2);
	  verts = Ammo._malloc(vlen * 3 * 4);
	  offset = verts >> 2;
	  HEAPF32 = Ammo.HEAPF32;
	  for (v = k = 0, ref1 = vlen; 0 <= ref1 ? k < ref1 : k > ref1; v = 0 <= ref1 ? ++k : --k) {
	    HEAPF32.set(vertices.subarray(v * vstride, v * vstride + 3), offset);
	    offset += 3;
	  }
	  mesh = new Ammo.btTriangleIndexVertexArray(indices.length / 3, inds, 3 * 4, vertices.length / 3, verts, 3 * 4);
	  shape = new Ammo.btBvhTriangleMeshShape(mesh, true, true);
	  _tmp_Vector3.setValue(scale[0], scale[1], scale[2]);
	  shape.setLocalScaling(_tmp_Vector3);
	  shape.setMargin(margin);
	  return shape;
	};
	
	CompoundShape = function() {
	  return new Ammo.btCompoundShape;
	};
	
	RigidBody = function(mass, shape, position, rotation, friction, elasticity, form_factor) {
	  var body, inertia, localInertia, myMotionState, rbInfo, startTransform;
	  inertia = form_factor * mass / 3;
	  localInertia = new Ammo.btVector3(inertia, inertia, inertia);
	  shape.calculateLocalInertia(mass, localInertia);
	  startTransform = new Ammo.btTransform;
	  _tmp_Vector3.setValue(position[0], position[1], position[2]);
	  startTransform.setOrigin(_tmp_Vector3);
	  _tmp_Quaternion.setValue(rotation[0], rotation[1], rotation[2], rotation[3]);
	  startTransform.setRotation(_tmp_Quaternion);
	  myMotionState = new Ammo.btDefaultMotionState(startTransform);
	  rbInfo = new Ammo.btRigidBodyConstructionInfo(mass, myMotionState, shape, localInertia);
	  rbInfo.set_m_friction(friction);
	  rbInfo.set_m_restitution(elasticity);
	  body = new Ammo.btRigidBody(rbInfo);
	  body.pointers = [rbInfo, myMotionState, startTransform, localInertia];
	  if (body.getPtr) {
	    _phy_obs_ptrs[body.getPtr()] = body;
	  } else {
	    _phy_obs_ptrs[body.ptr] = body;
	  }
	  return body;
	};
	
	StaticBody = function(shape, position, rotation, friction, elasticity) {
	  return RigidBody(0, shape, position, rotation, friction, elasticity, 0);
	};
	
	_character_controllers = [];
	
	CharacterBody = function(shape, position, rotation, step_height, axis, gravity, jump_speed, fall_speed, max_slope) {
	  var body, char, startTransform;
	  body = new Ammo.btPairCachingGhostObject;
	  body.setCollisionFlags(16);
	  body.setCollisionShape(shape);
	  char = body.char = new Ammo.btKinematicCharacterController(body, shape, step_height, axis);
	  char.setGravity(gravity);
	  char.setJumpSpeed(jump_speed);
	  char.setFallSpeed(fall_speed);
	  char.setMaxSlope(max_slope);
	  _character_controllers.push(body.char);
	  startTransform = new Ammo.btTransform;
	  _tmp_Vector3.setValue(position[0], position[1], position[2]);
	  startTransform.setOrigin(_tmp_Vector3);
	  _tmp_Quaternion.setValue(rotation[0], rotation[1], rotation[2], rotation[3]);
	  startTransform.setRotation(_tmp_Quaternion);
	  body.setWorldTransform(startTransform);
	  body.pointers = [body.char, startTransform];
	  if (body.getPtr) {
	    _phy_obs_ptrs[body.getPtr()] = body;
	  } else {
	    _phy_obs_ptrs[body.ptr] = body;
	  }
	  return body;
	};
	
	destroy_body = function(body) {
	  var k, len, p, pointers;
	  if (body.getPtr) {
	    delete _phy_obs_ptrs[body.getPtr()];
	  } else {
	    delete _phy_obs_ptrs[body.ptr];
	  }
	  if (body.char) {
	    _character_controllers.remove(body.char);
	  }
	  pointers = body.pointers;
	  destroy(body);
	  for (k = 0, len = pointers.length; k < len; k++) {
	    p = pointers[k];
	    destroy(p);
	  }
	};
	
	Ray = (function() {
	  function Ray() {
	    this.origin = new Ammo.btVector3(0, 0, 0);
	    this.rayto = new Ammo.btVector3(0, 0, 0);
	  }
	
	  Ray.prototype.destroy = function() {
	    destroy(this.origin);
	    return destroy(this.rayto);
	  };
	
	  return Ray;
	
	})();
	
	add_child_shape = function(comp, shape, p, o) {
	  _tmp_Vector3.setValue(p[0], p[1], p[2]);
	  _tmp_Quaternion.setValue(o[0], o[1], o[2], o[3]);
	  _tmp_Transform.setOrigin(_tmp_Vector3);
	  _tmp_Transform.setRotation(_tmp_Quaternion);
	  return comp.addChildShape(_tmp_Transform, shape);
	};
	
	set_gravity = function(world, x, y, z) {
	  _tmp_Vector3.setValue(x, y, z);
	  return world.setGravity(_tmp_Vector3);
	};
	
	add_body = function(world, body, collision_filter_group, collision_filter_mask) {
	  if (body.char) {
	    world.addCollisionObject(body, collision_filter_group, collision_filter_mask);
	    return world.addAction(body.char);
	  } else {
	    return world.addRigidBody(body, collision_filter_group, collision_filter_mask);
	  }
	};
	
	remove_body = function(world, body) {
	  if (body.char) {
	    world.removeAction(body.char);
	    world.removeCollisionObject(body);
	  } else {
	    world.removeRigidBody(body);
	  }
	  return destroy_body(body);
	};
	
	step_world = function(world, time_step) {
	  return world.stepSimulation(time_step, 10);
	};
	
	set_body_deactivation_time = function(body, time) {
	  return body.setDeactivationTime(time);
	};
	
	activate_body = function(body) {
	  return body.activate();
	};
	
	update_ob_physics = function(ob) {
	  var pos, posrot, rot;
	  if (ob.body != null) {
	    if (ob.parent) {
	      posrot = ob.get_world_pos_rot();
	      pos = posrot[0];
	      rot = posrot[1];
	    } else {
	      pos = ob.position;
	      rot = ob.rotation;
	    }
	    _tmp_Vector3.setValue(pos[0], pos[1], pos[2]);
	    _tmp_Transform.setOrigin(_tmp_Vector3);
	    _tmp_Quaternion.setValue(rot[0], rot[1], rot[2], rot[3]);
	    _tmp_Transform.setRotation(_tmp_Quaternion);
	    ob.body.setWorldTransform(_tmp_Transform);
	    return ob.body.activate();
	  }
	};
	
	set_phy_scale = function(ob, scale) {
	  var body, world;
	  world = ob.scene.world;
	  body = ob.body;
	  world.removeRigidBody(body);
	  ob.phy_he = scale;
	  _tmp_Vector3.setValue(scale[0], scale[1], scale[2]);
	  ob.shape.setImplicitShapeDimensions(_tmp_Vector3);
	  return world.addRigidBody(body, ob.collision_group, ob.collision_mask);
	};
	
	deactivate_body = function(body) {
	  return body.setActivationState(2);
	};
	
	set_body_activation_state = function(body, bool_state) {
	  if (bool_state) {
	    return body.activate();
	  } else {
	    return body.setActivationState(2);
	  }
	};
	
	allow_sleeping = function(body, allow) {
	  if (allow) {
	    return body.setActivationState(1);
	  } else {
	    return body.setActivationState(4);
	  }
	};
	
	make_ghost = function(body, is_ghost) {
	  if (is_ghost) {
	    return body.setCollisionFlags(body.getCollisionFlags() | 4);
	  } else {
	    return body.setCollisionFlags(body.getCollisionFlags() & -5);
	  }
	};
	
	colliding_bodies = function(body) {
	  var b0, b1, dispatcher, has_contact, i, j, k, l, m, num_contacts, p, point, ref1, ref2, ret;
	  ret = [];
	  p = body.ptr;
	  dispatcher = scene.world.getDispatcher();
	  for (i = k = 0, ref1 = dispatcher.getNumManifolds(); 0 <= ref1 ? k < ref1 : k > ref1; i = 0 <= ref1 ? ++k : --k) {
	    m = dispatcher.getManifoldByIndexInternal(i);
	    num_contacts = m.getNumContacts();
	    if (num_contacts !== 0) {
	      has_contact = false;
	      for (j = l = 0, ref2 = num_contacts; 0 <= ref2 ? l < ref2 : l > ref2; j = 0 <= ref2 ? ++l : --l) {
	        point = m.getContactPoint(j);
	        if (point.get_m_distance1() < 0) {
	          has_contact = true;
	        }
	      }
	      if (has_contact) {
	        b0 = m.getBody0();
	        b1 = m.getBody1();
	        if (b0 === p) {
	          ret.push(_phy_obs_ptrs[b1]);
	        } else if (b1 === p) {
	          ret.push(_phy_obs_ptrs[b0]);
	        }
	      }
	    }
	  }
	  return ret;
	};
	
	get_linear_velocity = function(body, local) {
	  var ir, new_v, v;
	  if (local == null) {
	    local = false;
	  }
	  v = body.getLinearVelocity();
	  if (local) {
	    ir = quat.invert([], body.owner.get_world_rotation());
	    new_v = vec3.transformQuat([], [v.x(), v.y(), v.z()], ir);
	    return new_v;
	  }
	  return [v.x(), v.y(), v.z()];
	};
	
	set_linear_velocity = function(body, v) {
	  _tmp_Vector3.setValue(v[0], v[1], v[2]);
	  return body.setLinearVelocity(_tmp_Vector3);
	};
	
	set_character_velocity = function(body, v) {
	  _tmp_Vector3.setValue(v[0] * 0.016666666666666666, v[1] * 0.016666666666666666, v[2] * 0.016666666666666666);
	  return body.char.setWalkDirection(_tmp_Vector3);
	};
	
	set_character_jump_force = function(body, f) {
	  body.char.setJumpSpeed(f);
	  return body.owner.jump_force = f;
	};
	
	character_jump = function(body) {
	  return body.char.jump();
	};
	
	on_ground = function(body) {
	  return body.char.onGround();
	};
	
	set_max_fall_speed = function(body, f) {
	  body.char.setFallSpeed(f);
	  return body.owner.max_fall_speed = f;
	};
	
	get_angular_velocity = function(body, local) {
	  var ir, new_v, v;
	  if (local == null) {
	    local = false;
	  }
	  v = body.getAngularVelocity();
	  if (local) {
	    ir = quat.invert([], body.owner.get_world_rotation());
	    new_v = vec3.transformQuat([], [v.x(), v.y(), v.z()], ir);
	    return new_v;
	  }
	  return [v.x(), v.y(), v.z()];
	};
	
	set_angular_velocity = function(body, v) {
	  _tmp_Vector3.setValue(v[0], v[1], v[2]);
	  return body.setAngularVelocity(_tmp_Vector3);
	};
	
	get_mass = function(body) {
	  return body.owner.mass;
	};
	
	set_mass = function(body) {
	  return print('set_mass not implemented');
	};
	
	apply_force = function(body, force, rel_pos) {
	  _tmp_Vector3.setValue(force[0], force[1], force[2]);
	  _tmp_Vector3b.setValue(rel_pos[0], rel_pos[1], rel_pos[2]);
	  return body.applyForce(_tmp_Vector3, _tmp_Vector3b);
	};
	
	apply_central_force = function(body, force) {
	  var f;
	  f = Math.pow(1 / frame_factor, 1.025);
	  _tmp_Vector3.setValue(force[0] * f, force[1] * f, force[2] * f);
	  return body.applyCentralForce(_tmp_Vector3);
	};
	
	apply_central_impulse = function(body, force) {
	  _tmp_Vector3.setValue(force[0], force[1], force[2]);
	  return body.applyCentralImpulse(_tmp_Vector3);
	};
	
	set_linear_factor = function(body, factor) {
	  _tmp_Vector3.setValue(factor[0], factor[1], factor[2]);
	  return body.setLinearFactor(_tmp_Vector3);
	};
	
	set_angular_factor = function(body, factor) {
	  _tmp_Vector3.setValue(factor[0], factor[1], factor[2]);
	  return body.setAngularFactor(_tmp_Vector3);
	};
	
	ob_to_phy = function(ob_list) {
	  var k, len, ob, pos, posrot, rot;
	  for (k = 0, len = ob_list.length; k < len; k++) {
	    ob = ob_list[k];
	    if (ob.parent) {
	      posrot = ob.get_world_pos_rot();
	      pos = posrot[0];
	      rot = posrot[1];
	    } else {
	      pos = ob.position;
	      rot = ob.rotation;
	    }
	    _tmp_Vector3.setValue(pos[0], pos[1], pos[2]);
	    _tmp_Transform.setOrigin(_tmp_Vector3);
	    _tmp_Quaternion.setValue(rot[0], rot[1], rot[2], rot[3]);
	    _tmp_Transform.setRotation(_tmp_Quaternion);
	    ob.body.setWorldTransform(_tmp_Transform);
	  }
	};
	
	phy_to_ob = function(ob_list) {
	  var body, brot, k, len, ob, origin, pos, rot, transform;
	  for (k = 0, len = ob_list.length; k < len; k++) {
	    ob = ob_list[k];
	    body = ob.body;
	    if (body.getMotionState) {
	      transform = _tmp_Transform;
	      body.getMotionState().getWorldTransform(transform);
	    } else {
	      transform = body.getWorldTransform(transform);
	    }
	    pos = ob.position;
	    origin = transform.getOrigin();
	    pos[0] = origin.x();
	    pos[1] = origin.y();
	    pos[2] = origin.z();
	    rot = ob.rotation;
	    brot = transform.getRotation();
	    rot[0] = brot.x();
	    rot[1] = brot.y();
	    rot[2] = brot.z();
	    rot[3] = brot.w();
	  }
	};
	
	get_last_char_phy = function(ob_list) {
	  var body, k, len, ob, origin, pos, transform;
	  for (k = 0, len = ob_list.length; k < len; k++) {
	    ob = ob_list[k];
	    body = ob.body;
	    transform = body.getWorldTransform(transform);
	    pos = ob.last_position;
	    origin = transform.getOrigin();
	    pos[0] = origin.x();
	    pos[1] = origin.y();
	    pos[2] = origin.z();
	  }
	};
	
	ray_intersect_body = function(scene, origin, direction, int_mask) {
	  var callback, cob, hit_normal, hit_point, point, ray_origin, ray_rayto, result;
	  if (int_mask == null) {
	    int_mask = -1;
	  }
	  if (!scene.world) {
	    return [];
	  }
	  ray_origin = _tmp_Vector3b;
	  ray_origin.setValue(origin[0], origin[1], origin[2]);
	  ray_rayto = _tmp_Vector3c;
	  ray_rayto.setValue(origin[0] + direction[0], origin[1] + direction[1], origin[2] + direction[2]);
	  callback = _tmp_ClosestRayResultCallback;
	  callback.set_m_rayFromWorld(ray_origin);
	  callback.set_m_rayToWorld(ray_rayto);
	  callback.set_m_collisionFilterGroup(-1);
	  callback.set_m_collisionFilterMask(int_mask);
	  callback.set_m_collisionObject(0);
	  callback.set_m_closestHitFraction(1);
	  callback.set_m_flags(0);
	  scene.world.rayTest(ray_origin, ray_rayto, callback);
	  result = [];
	  point = vec3.create();
	  if (callback.hasHit()) {
	    hit_point = _tmp_Vector3;
	    hit_point.setInterpolate3(ray_origin, ray_rayto, callback.get_m_closestHitFraction());
	    hit_normal = callback.get_m_hitNormalWorld();
	    point[0] = hit_point.x();
	    point[1] = hit_point.y();
	    point[2] = hit_point.z();
	    cob = callback.get_m_collisionObject();
	    return {
	      body: _phy_obs_ptrs[cob.ptr || cob.getPtr()],
	      point: point,
	      normal: [hit_normal.x(), hit_normal.y(), hit_normal.z()],
	      distance: vec3.dist(point, origin)
	    };
	  }
	  return null;
	};
	
	ray_intersect_body_absolute = function(scene, rayfrom, rayto, int_mask) {
	  var callback, cob, hit_normal, hit_point, n, p, ray_origin, ray_rayto;
	  ray_origin = _tmp_Vector3;
	  ray_rayto = _tmp_Vector3b;
	  ray_origin.setValue(rayfrom[0], rayfrom[1], rayfrom[2]);
	  ray_rayto.setValue(rayto[0], rayto[1], rayto[2]);
	  callback = _tmp_ClosestRayResultCallback;
	  callback.set_m_rayFromWorld(ray_origin);
	  callback.set_m_rayToWorld(ray_rayto);
	  callback.set_m_collisionFilterGroup(-1);
	  callback.set_m_collisionFilterMask(int_mask);
	  callback.set_m_collisionObject(0);
	  callback.set_m_closestHitFraction(1);
	  callback.set_m_flags(0);
	  scene.world.rayTest(ray_origin, ray_rayto, callback);
	  if (callback.hasHit()) {
	    hit_point = _tmp_Vector3c;
	    hit_point.setInterpolate3(ray_origin, ray_rayto, callback.get_m_closestHitFraction());
	    hit_normal = callback.get_m_hitNormalWorld();
	    cob = callback.get_m_collisionObject();
	    p = hit_point.ptr >> 2;
	    n = hit_normal.ptr >> 2;
	    return [_phy_obs_ptrs[cob.ptr], new Float32Array(Ammo.HEAPF32.subarray(p, p + 3)), new Float32Array(Ammo.HEAPF32.subarray(n, n + 3))];
	  }
	  return null;
	};
	
	ray_intersect_body_bool = function(scene, rayfrom, rayto, mask) {
	  var callback, cp, cp32;
	  cp = _tmp_ClosestRayResultCallback.ptr;
	  cp32 = cp >> 2;
	  _tmp_Vector3.setValue(rayfrom[0], rayfrom[1], rayfrom[2]);
	  _tmp_Vector3b.setValue(rayto[0], rayto[1], rayto[2]);
	  callback = _tmp_ClosestRayResultCallback;
	  callback.set_m_collisionFilterGroup(-1);
	  callback.set_m_collisionFilterMask(mask);
	  callback.set_m_collisionObject(0);
	  callback.set_m_closestHitFraction(1);
	  callback.set_m_flags(0);
	  scene.world.rayTest(_tmp_Vector3, _tmp_Vector3b, callback);
	  return callback.hasHit();
	};
	
	ray_intersect_body_bool_not_target = function(scene, rayfrom, rayto, mask, target_body) {
	  var callback, cp, cp32;
	  cp = _tmp_ClosestRayResultCallback.ptr;
	  cp32 = cp >> 2;
	  _tmp_Vector3.setValue(rayfrom[0], rayfrom[1], rayfrom[2]);
	  _tmp_Vector3b.setValue(rayto[0], rayto[1], rayto[2]);
	  callback = _tmp_ClosestRayResultCallback;
	  callback.set_m_collisionFilterGroup(-1);
	  callback.set_m_collisionFilterMask(mask);
	  callback.set_m_collisionObject(0);
	  callback.set_m_closestHitFraction(1);
	  callback.set_m_flags(0);
	  scene.world.rayTest(_tmp_Vector3, _tmp_Vector3b, callback);
	  return callback.hasHit() && callback.get_m_collisionObject().ptr !== target_body.ptr;
	};
	
	module.exports = {
	  PHYSICS_ENGINE_URL: PHYSICS_ENGINE_URL,
	  physics_engine_init: physics_engine_init,
	  PhysicsWorld: PhysicsWorld,
	  destroy_world: destroy_world,
	  set_gravity: set_gravity,
	  step_world: step_world,
	  update_ob_physics: update_ob_physics,
	  set_phy_scale: set_phy_scale,
	  ob_to_phy: ob_to_phy,
	  phy_to_ob: phy_to_ob,
	  get_last_char_phy: get_last_char_phy,
	  BoxShape: BoxShape,
	  SphereShape: SphereShape,
	  CylinderShape: CylinderShape,
	  CapsuleShape: CapsuleShape,
	  ConvexShape: ConvexShape,
	  TriangleMeshShape: TriangleMeshShape,
	  CompoundShape: CompoundShape,
	  get_convex_hull_edges: get_convex_hull_edges,
	  add_child_shape: add_child_shape,
	  RigidBody: RigidBody,
	  StaticBody: StaticBody,
	  CharacterBody: CharacterBody,
	  add_body: add_body,
	  remove_body: remove_body,
	  destroy_body: destroy_body,
	  set_body_deactivation_time: set_body_deactivation_time,
	  activate_body: activate_body,
	  deactivate_body: deactivate_body,
	  set_body_activation_state: set_body_activation_state,
	  colliding_bodies: colliding_bodies,
	  allow_sleeping: allow_sleeping,
	  make_ghost: make_ghost,
	  get_linear_velocity: get_linear_velocity,
	  set_linear_velocity: set_linear_velocity,
	  set_character_jump_force: set_character_jump_force,
	  character_jump: character_jump,
	  on_ground: on_ground,
	  set_max_fall_speed: set_max_fall_speed,
	  get_angular_velocity: get_angular_velocity,
	  set_angular_velocity: set_angular_velocity,
	  get_mass: get_mass,
	  set_mass: set_mass,
	  apply_force: apply_force,
	  apply_central_force: apply_central_force,
	  apply_central_impulse: apply_central_impulse,
	  set_linear_factor: set_linear_factor,
	  set_angular_factor: set_angular_factor,
	  Ray: Ray,
	  ray_intersect_body: ray_intersect_body,
	  ray_intersect_body_absolute: ray_intersect_body_absolute,
	  ray_intersect_body_bool: ray_intersect_body_bool,
	  ray_intersect_body_bool_not_target: ray_intersect_body_bool_not_target
	};


/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, __filename, __dirname) {var Action, Armature, Camera, Curve, EMULATE_WORKERS, GameObject, Group, Lamp, Loader, Mesh, NUM_WORKERS_32, NUM_WORKERS_64, PHYSICS_ENGINE_URL, Scene, Viewport, WEBSOCKET_PORT, WebSocketLoader, XhrLoader, get_scene, mat2, mat3, mat4, physics_engine_init, profile_tex_upload_times, quat, ref, ref1, ref2, script_tag_loaded_callbacks, set_altmesh, vec2, vec3, vec4,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;
	
	ref = __webpack_require__(8), mat2 = ref.mat2, mat3 = ref.mat3, mat4 = ref.mat4, vec2 = ref.vec2, vec3 = ref.vec3, vec4 = ref.vec4, quat = ref.quat;
	
	Action = __webpack_require__(23).Action;
	
	Group = __webpack_require__(27).Group;
	
	Viewport = __webpack_require__(28).Viewport;
	
	Camera = __webpack_require__(29).Camera;
	
	Lamp = __webpack_require__(30).Lamp;
	
	Mesh = __webpack_require__(21).Mesh;
	
	ref1 = __webpack_require__(31), Scene = ref1.Scene, get_scene = ref1.get_scene;
	
	Curve = __webpack_require__(32).Curve;
	
	GameObject = __webpack_require__(22).GameObject;
	
	Armature = __webpack_require__(33).Armature;
	
	ref2 = __webpack_require__(24), PHYSICS_ENGINE_URL = ref2.PHYSICS_ENGINE_URL, physics_engine_init = ref2.physics_engine_init;
	
	NUM_WORKERS_64 = 2;
	
	NUM_WORKERS_32 = 1;
	
	WEBSOCKET_PORT = 9971;
	
	EMULATE_WORKERS = !process.browser || navigator.userAgent.toString().indexOf('Edge/12.') !== -1;
	
	profile_tex_upload_times = [];
	
	script_tag_loaded_callbacks = {};
	
	Loader = (function() {
	  Loader.prototype.current_scene = null;
	
	  function Loader(context) {
	    this.context = context;
	  }
	
	  Loader.prototype.load = function(data) {
	    var d, j, len, onload, scene, start;
	    scene = null;
	    start = performance.now();
	    onload = (function(_this) {
	      return function() {
	        var base1;
	        scene.enabled = true;
	        console.log('Scene "' + scene.name + '" loaded in ' + ((performance.now() - start) * 0.001).toFixed(2) + ' seconds');
	        _this.remove_queue_listener(0, onload);
	        if (typeof (base1 = _this.context).onload_main_scene === "function") {
	          base1.onload_main_scene();
	        }
	        _this.context.onload_main_scene = null;
	        return scene.decrement_task_count();
	      };
	    })(this);
	    this.add_queue_listener(0, onload);
	    for (j = 0, len = data.length; j < len; j++) {
	      d = data[j];
	      this.load_datablock(d);
	    }
	    scene = this.current_scene;
	    scene.increment_task_count();
	    return console.log('Loading scene "' + scene.name + '"');
	  };
	
	  Loader.prototype.load_datablock = function(data) {
	    var j, len, len1, n, o, old_mat, ref3, ref4, scene, u, vp;
	    if (data.scene) {
	      this.current_scene = this.context.scenes[data.scene];
	    }
	    if (data.type === 'SCENE') {
	      this.current_scene = scene = get_scene(this.context, data.name);
	      scene.loader = scene.loader || this;
	      scene.set_gravity(data.gravity);
	      scene.background_color = data.background_color;
	      scene.debug_physics = this.context.MYOU_PARAMS.debug_physics || data.debug_physics;
	      scene.active_camera_name = data.active_camera;
	      scene.stereo = data.stereo;
	      scene.stereo_eye_separation = data.stereo_eye_separation;
	      scene.tree_name = data.tree_name;
	    } else if (data.type === 'MATERIAL') {
	      this.current_scene.unloaded_material_data[data.name] = data;
	      old_mat = this.current_scene.materials[data.name];
	      if (old_mat != null) {
	        old_mat.destroy();
	        ref3 = old_mat.users;
	        for (j = 0, len = ref3.length; j < len; j++) {
	          u = ref3[j];
	          u.materials = [];
	        }
	      }
	    } else if (data.type === 'SHADER_LIB') {
	      if (this.context.render_manager.extensions.compressed_texture_s3tc) {
	        this.context.SHADER_LIB = data.code.replace('normal = 2.0*(vec3(-color.r, color.g, color.b) - vec3(-0.5, 0.5, 0.5));', 'normal = 2.0*(vec3(-color.a, -color.g, color.b) - vec3(-0.5, -0.5, 0.5));');
	      } else {
	        this.context.SHADER_LIB = data.code.replace('normal = 2.0*(vec3(-color.r, color.g, color.b) - vec3(-0.5, 0.5, 0.5));', 'normal = 2.0*(vec3(-color.r, -color.g, color.b) - vec3(-0.5, -0.5, 0.5));').replace('normal = normalize(vec3(-color.a, -color.g, color.b) - vec3(-0.5, -0.5, 0.5));', 'normal = 2.0*(vec3(-color.r, -color.g, color.b) - vec3(-0.5, -0.5, 0.5));');
	      }
	    } else if (data.type === 'JSFILE') {
	      this.current_scene.loader.load_script_with_tag_callback(data.uri, function() {
	        return pass;
	      });
	    } else if (data.type === 'JSCODE') {
	      window["eval"](data.code);
	    } else if (data.type === 'ACTION') {
	      this.context.actions[data.name] = new Action(data.name, data.channels, data.markers);
	    } else if (data.type === 'GROUP') {
	      this.context.groups[data.name] = new Group(data.objects, data.offset);
	    } else if (data.type === 'DELETE') {
	      ref4 = data.names;
	      for (o = 0, len1 = ref4.length; o < len1; o++) {
	        n = ref4[o];
	        this.current_scene.remove_object(this.current_scene.objects[n]);
	      }
	    } else if (data.type === 'STOP_RENDER') {
	      this.current_scene.enabled = false;
	    } else if (data.type === 'START_RENDER') {
	      this.current_scene.enabled = true;
	    } else if (data.type === 'DEBUG_VIEW') {
	      vp = this.context.render_manager.viewports[0];
	      if (vp && vp.camera) {
	        if (!vp.debug_camera) {
	          vp.debug_camera = vp.camera.clone();
	          vp.debug_camera.projection_matrix = new Float32Array(16);
	          vp.debug_camera.projection_matrix_inv = new Float32Array(16);
	          vp.debug_camera.parent = null;
	        }
	        vp.debug_camera.cam_type = data.cam_type;
	        vp.debug_camera.position = data.position;
	        vp.debug_camera.rotation = data.rotation;
	        vp.debug_camera.recalculate_projection();
	        vp.debug_camera._update_matrices();
	      }
	    } else if (data.type === 'NO_DEBUG_VIEW') {
	      vp = this.context.render_manager.viewports[0];
	      if (vp) {
	        vp.debug_camera = null;
	      }
	    } else {
	      this.load_object(data);
	    }
	  };
	
	  Loader.prototype.load_object = function(data) {
	    var addme, alm, d, j, len, len1, len2, load_mesh_properties, lod_data, lod_ob, m, o, ob, p, q, r, ref3, ref4, scene, tex_size, v;
	    addme = false;
	    scene = this.current_scene;
	    ob = scene.objects[data.name];
	    if (data.type === 'MESH') {
	      if (!ob) {
	        ob = new Mesh(this.context);
	        ob.name = data.name;
	        ob["static"] = data["static"] || false;
	        ob.passes = data.passes;
	        scene.add_object(ob, data.name, data.parent, data.parent_bone);
	      }
	      vec4.copy(ob.color, data.color);
	      load_mesh_properties = (function(_this) {
	        return function(ob, data) {
	          if (ob.hash !== data.hash) {
	            ob.hash = data.hash;
	            ob.elements = data.elements;
	            ob.offsets = data.offsets;
	            ob.stride = data.stride;
	            ob.mesh_name = data.mesh_name;
	            ob.material_names = data.materials;
	            ob.all_f = data.all_f;
	            ob.shape_multiplier = data.shape_multiplier || 1;
	            ob.uv_multiplier = data.uv_multiplier || 1;
	            ob.pack_offset = data.pack_offset;
	            ob.packed_file = data.packed_file;
	            if (ob.hash in _this.context.mesh_datas) {
	              ob.data && ob.data.remove(ob);
	              ob.data = _this.context.mesh_datas[ob.hash];
	              ob.data.users.push(ob);
	              return ob.instance_physics();
	            } else if (data.visible) {
	              return scene.loader.load_mesh_data(ob);
	            }
	          }
	        };
	      })(this);
	      load_mesh_properties(ob, data);
	      if ('alternative_meshes' in data) {
	        alm = data.alternative_meshes;
	        ob.altmeshes.splice(0);
	        for (j = 0, len = alm.length; j < len; j++) {
	          d = alm[j];
	          d.visible = data.visible;
	          d.materials = data.materials;
	          m = new Mesh(this.context);
	          m.name = ob.name;
	          m.scene = ob.scene;
	          ob.altmeshes.push(m);
	          load_mesh_properties(m, d);
	        }
	        ob.active_mesh_index = data.active_mesh_index;
	      }
	      if ('phy_mesh' in data) {
	        data.phy_mesh.visible = data.visible;
	        m = ob.physics_mesh = new Mesh(this.context);
	        m.visible_mesh = ob;
	        m.name = ob.name;
	        m.scene = ob.scene;
	        load_mesh_properties(m, data.phy_mesh);
	      }
	      if (data.lod_levels) {
	        ob.lod_objects = [];
	        ref3 = data.lod_levels;
	        for (o = 0, len1 = ref3.length; o < len1; o++) {
	          lod_data = ref3[o];
	          lod_data.elements = data.elements;
	          lod_data.stride = data.stride;
	          lod_data.materials = data.materials;
	          lod_data.visible = data.visible;
	          lod_ob = new Mesh(this.context);
	          lod_ob.scene = ob.scene;
	          load_mesh_properties(lod_ob, lod_data);
	          ob.lod_objects.push({
	            factor: lod_data.factor,
	            distance: 1 / lod_data.factor,
	            object: lod_ob
	          });
	        }
	      }
	      ob.zindex = 1;
	      if ('zindex' in data) {
	        ob.zindex = data.zindex;
	      }
	    } else if (data.type === 'CURVE') {
	      if (!ob) {
	        ob = new Curve(this.context);
	        ob.name = data.name;
	        ob["static"] = data["static"] || false;
	        scene.add_object(ob, data.name, data.parent, data.parent_bone);
	      }
	      ob.set_curves(data.curves, data.resolution, data.nodes);
	    } else if (data.type === 'CAMERA') {
	      if (!ob) {
	        ob = new Camera(this.context);
	        ob.name = data.name;
	        ob["static"] = data["static"] || false;
	        scene.add_object(ob, data.name, data.parent, data.parent_bone);
	        if (data.name === scene.active_camera_name) {
	          scene.active_camera = ob;
	          if (this.context.render_manager.viewports.length === 0) {
	            v = new Viewport(this.context.render_manager, ob);
	          }
	          if (scene.stereo) {
	            stereo_manager.enable(v);
	          }
	        }
	      }
	      ob.near_plane = data.clip_start;
	      ob.far_plane = data.clip_end;
	      if (!this.context.render_manager.vrstate) {
	        ob.field_of_view = data.angle;
	      }
	      ob.ortho_scale = data.ortho_scale;
	      ob.cam_type = data.cam_type;
	      ob.sensor_fit = data.sensor_fit;
	      ob.recalculate_projection();
	    } else if (data.type === 'LAMP') {
	      if (!ob) {
	        ob = new Lamp(this.context);
	        ob.name = data.name;
	        ob["static"] = data["static"] || false;
	        if (data.lamp_type !== 'POINT' && data.shadow && (this.context.render_manager.extensions.texture_float_linear != null)) {
	          tex_size = data.tex_size != null ? data.tex_size : 256;
	          ob.init_shadow(data.frustum_size, data.clip_start, data.clip_end, closest_pow2(tex_size));
	        }
	        scene.add_object(ob, data.name, data.parent, data.parent_bone);
	      }
	      ob.lamp_type = data.lamp_type;
	      ob.color.set(data.color);
	      if (data.energy != null) {
	        ob.energy = data.energy;
	      }
	      ob.falloff_distance = data.falloff_distance;
	    } else if (data.type === 'ARMATURE') {
	      if (!ob) {
	        ob = new Armature(this.context);
	        ob.name = data.name;
	        ob["static"] = data["static"] || false;
	        scene.add_object(ob, data.name, data.parent, data.parent_bone);
	      }
	      if (data.bones) {
	        ob.bones = {};
	        ob.children = [];
	        ob.unfc = data.unfc;
	        ob.add_bones(data.bones);
	      }
	      ob.apply_pose(data.pose);
	    } else if (data.type === 'EMPTY') {
	      if (!ob) {
	        ob = new GameObject(this.context);
	        ob.name = data.name;
	        ob["static"] = data["static"] || false;
	        vec4.copy(ob.color, data.color);
	        scene.add_object(ob, data.name, data.parent, data.parent_bone);
	      }
	    } else {
	      console.log("Warning: unsupported type", data.type);
	      return;
	    }
	    if ('particles' in data) {
	      ob.particle_systems = [];
	      ref4 = data.particles;
	      for (q = 0, len2 = ref4.length; q < len2; q++) {
	        p = ref4[q];
	        if ('formula' in p) {
	          p.formula = (new Function('return ' + p.formula))();
	        }
	        ob.particle_systems.push({
	          'properties': p
	        });
	      }
	    }
	    vec3.copy(ob.position, data.pos);
	    r = data.rot;
	    quat.copy(ob.rotation, [r[1], r[2], r[3], r[0]]);
	    ob.rotation_order = data.rot_mode;
	    vec3.copy(ob.scale, data.scale);
	    vec3.copy(ob.offset_scale, data.offset_scale);
	    ob.visible = data.visible;
	    ob.mirrors = data.mirrors || 1;
	    vec3.copy(ob.dimensions, data.dimensions);
	    ob.radius = vec3.len(ob.dimensions) * 0.5;
	    ob.properties = data.properties || {};
	    ob.actions = data.actions || [];
	    ob.physics_type = data.phy_type;
	    if (this.context.MYOU_PARAMS.load_physics_engine) {
	      ob.physical_radius = data.radius;
	      ob.anisotropic_friction = data.use_anisotropic_friction;
	      ob.friction_coefficients = data.friction_coefficients;
	      ob.collision_group = data.collision_group;
	      ob.collision_mask = data.collision_mask;
	      ob.collision_shape = data.collision_bounds_type;
	      ob.collision_margin = data.collision_margin;
	      ob.collision_compound = data.collision_compound;
	      ob.mass = data.mass;
	      ob.no_sleeping = data.no_sleeping;
	      ob.is_ghost = data.is_ghost;
	      vec3.copy(ob.linear_factor, data.linear_factor);
	      vec3.copy(ob.angular_factor, data.angular_factor);
	      ob.form_factor = data.form_factor;
	      ob.friction = data.friction;
	      ob.elasticity = data.elasticity;
	      ob.step_height = data.step_height;
	      ob.jump_force = data.jump_force;
	      ob.max_fall_speed = data.max_fall_speed;
	      if (scene.world) {
	        ob.instance_physics();
	      }
	    }
	    if (ob["static"]) {
	      ob._update_matrices();
	    }
	    return ob.dupli_group = data.dupli_group;
	  };
	
	  Loader.prototype.load_texture = function(name, path, filter, wrap, size) {
	    var add_level_buffer, base, ext, f, gl, img, load_565, load_levels, load_single_level, reupload, src, tex, wrap_const;
	    if (wrap == null) {
	      wrap = 'R';
	    }
	    if (size == null) {
	      size = 0;
	    }
	    tex = this.context.render_manager.textures[name] || null;
	    if (tex != null) {
	      return tex;
	    }
	    gl = this.context.render_manager.gl;
	    wrap_const = {
	      'C': gl.CLAMP_TO_EDGE,
	      'R': gl.REPEAT,
	      'M': gl.MIRRORED_REPEAT
	    }[wrap];
	    if (name.startswith('special:')) {
	      return {
	        'name': name
	      };
	    }
	    tex = {
	      'tex': gl.createTexture(),
	      'size': size
	    };
	    this.context.render_manager.textures[name] = tex;
	    tex.name = name;
	    tex.users = [];
	    tex.loaded = false;
	    if (path.slice(-4) === '.crn') {
	      base = this.data_dir + '/textures/';
	      src = base + path;
	      ext = this.context.render_manager.extensions.compressed_texture_s3tc;
	      tex.level_buffers = null;
	      tex.num_additional_levels = 0;
	      load_levels = (function(_this) {
	        return function(num_additional_levels, width, height, format, buffers, common_data) {
	          var buffers_len, data, gl_linear_nearest, i, internal_format, j, mipmap_filter, ref3;
	          gl.bindTexture(gl.TEXTURE_2D, tex.tex);
	          if (format === 0) {
	            internal_format = ext.COMPRESSED_RGBA_S3TC_DXT1_EXT;
	          } else {
	            internal_format = ext.COMPRESSED_RGBA_S3TC_DXT5_EXT;
	          }
	          buffers_len = buffers.length;
	          if (_this.context.MYOU_PARAMS.no_mipmaps) {
	            buffers_len = 1;
	          }
	          for (i = j = 0, ref3 = buffers_len; 0 <= ref3 ? j < ref3 : j > ref3; i = 0 <= ref3 ? ++j : --j) {
	            data = new Uint8Array(buffers[i]);
	            gl.compressedTexImage2D(gl.TEXTURE_2D, i, internal_format, width >> i, height >> i, 0, data);
	          }
	          gl_linear_nearest = filter ? gl.LINEAR : gl.NEAREST;
	          if (buffers_len > 1) {
	            mipmap_filter = {
	              C: filter ? gl.LINEAR_MIPMAP_NEAREST : gl.NEAREST_MIPMAP_NEAREST,
	              R: filter ? gl.LINEAR_MIPMAP_LINEAR : gl.NEAREST_MIPMAP_LINEAR
	            }[wrap];
	            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, mipmap_filter);
	          } else {
	            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl_linear_nearest);
	          }
	          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl_linear_nearest);
	          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, wrap_const);
	          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, wrap_const);
	          tex.level_buffers = buffers;
	          tex.num_additional_levels = num_additional_levels;
	          tex.common_data = common_data;
	          tex.loaded = true;
	          tex.width = width;
	          tex.height = height;
	          tex.format = format;
	          _this.context.main_loop.reset_timeout();
	          return true;
	        };
	      })(this);
	      load_565 = (function(_this) {
	        return function(data) {
	          var gl_linear_nearest, height, width;
	          gl.bindTexture(gl.TEXTURE_2D, tex.tex);
	          data = new Uint16Array(data);
	          width = height = Math.sqrt(data.length);
	          gl_linear_nearest = filter ? gl.LINEAR : gl.NEAREST;
	          gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGB, width, height, 0, gl.RGB, gl.UNSIGNED_SHORT_5_6_5, data);
	          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl_linear_nearest);
	          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl_linear_nearest);
	          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, wrap_const);
	          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, wrap_const);
	          tex.loaded = true;
	          tex.width = width;
	          tex.height = height;
	          _this.context.main_loop.reset_timeout();
	          return true;
	        };
	      })(this);
	      if (ext) {
	        this.add_task(src, load_levels, 'load_crunch');
	      } else {
	        this.add_task(src + '.565', load_565, '');
	      }
	      load_single_level = function(width, height, format, buffers) {
	        return pass;
	      };
	      reupload = tex.reupload = function() {
	        if (tex.tex) {
	          gl.deleteTexture(tex.tex);
	        }
	        tex.tex = gl.createTexture();
	        return load_levels(n, tex.width, tex.height, tex.format, tex.level_buffers, tex.common_data);
	      };
	      add_level_buffer = function(width, height, format, buffer) {
	        var buffers;
	        if (this.context.render_manager.context_lost_count) {
	          return;
	        }
	        gl.deleteTexture(tex.tex);
	        tex.tex = gl.createTexture();
	        buffers = tex.level_buffers;
	        buffers.insert(0, buffer);
	        return load_levels(tex.num_additional_levels, width, height, format, buffers, tex.common_data);
	      };
	      tex.load_additional_level = (function(_this) {
	        return function(queue_id) {
	          var common_data, file_name, n;
	          if (queue_id == null) {
	            queue_id = 1;
	          }
	          if (_this.context.render_manager.context_lost_count) {
	            return;
	          }
	          if (tex.num_additional_levels) {
	            n = tex.num_additional_levels = tex.num_additional_levels - 1;
	            file_name = src + '.' + n;
	            common_data = tex.common_data.slice(0);
	            _this.add_task(file_name, add_level_buffer, 'load_crunch_extra', common_data, queue_id);
	            return true;
	          }
	          return false;
	        };
	      })(this);
	    } else if (path.slice(-4) === '.dds') {
	      base = this.data_dir + '/textures/';
	      src = base + path;
	      ext = this.context.render_manager.extensions.compressed_texture_s3tc;
	      f = function(data) {
	        var mipmaps, x;
	        gl.bindTexture(gl.TEXTURE_2D, tex.tex);
	        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);
	        mipmaps = uploadDDSLevels(gl, ext, data);
	        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
	        x = mipmaps > 1 ? gl.LINEAR_MIPMAP_LINEAR : gl.LINEAR;
	        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, x);
	        tex.loaded = true;
	        return true;
	      };
	      this.add_task(src, f, '');
	    } else {
	      this.pending_operations += 1;
	      img = new Image;
	      tex.reupload = function() {
	        if (tex.tex) {
	          gl.deleteTexture(tex.tex);
	        }
	        tex.tex = gl.createTexture();
	        return img.onload();
	      };
	      img.onload = (function(_this) {
	        return function() {
	          var gl_linear_nearest, gl_linear_nearest_mipmap;
	          gl.bindTexture(gl.TEXTURE_2D, tex.tex);
	          gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);
	          gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, img);
	          gl_linear_nearest = filter ? gl.LINEAR : gl.NEAREST;
	          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl_linear_nearest);
	          gl_linear_nearest_mipmap = filter ? gl.LINEAR_MIPMAP_LINEAR : gl.NEAREST_MIPMAP_NEAREST;
	          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl_linear_nearest_mipmap);
	          gl.generateMipmap(gl.TEXTURE_2D);
	          ext = _this.context.render_manager.extensions.texture_filter_anisotropic;
	          if (_this.context.MYOU_PARAMS.anisotropic_filter && ext) {
	            gl.texParameterf(gl.TEXTURE_2D, ext.TEXTURE_MAX_ANISOTROPY_EXT, 4);
	          }
	          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, wrap_const);
	          gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, wrap_const);
	          gl.bindTexture(gl.TEXTURE_2D, null);
	          return tex.loaded = true;
	        };
	      })(this);
	      img.onerror = function() {
	        return console.log("Image not found: " + path);
	      };
	      if (path.slice(0, 5) === 'data:') {
	        img.src = path;
	      } else {
	        base = this.data_dir + '/textures/';
	        img.src = base + path;
	      }
	    }
	    tex.path = path;
	    return tex;
	  };
	
	  return Loader;
	
	})();
	
	WebSocketLoader = (function() {
	  function WebSocketLoader(address, loader) {
	    var ws;
	    this.pending = "";
	    this.num_pending = 0;
	    ws = new WebSocket(address);
	    this.keep_alive_int;
	    ws.onopen = (function(_this) {
	      return function(x) {
	        console.log("Connected to debug WebSocket");
	        f(function() {
	          return ws.send('keepalive');
	        });
	        return _this.keep_alive_int = setInterval(f, 10000);
	      };
	    })(this);
	    ws.onmessage = (function(_this) {
	      return function(e) {
	        var data;
	        if (!_this.num_pending && e.data[0] !== '{' && e.data[0] !== '[') {
	          _this.num_pending = Math.floor(e.data);
	        } else if (_this.num_pending) {
	          _this.pending += e.data;
	          _this.num_pending -= 1;
	        }
	        if (!_this.num_pending) {
	          data = JSON.parse(_this.pending || e.data);
	          _this.pending = "";
	          if (hasattr(data, 'length')) {
	            return _this.load(data);
	          } else {
	            return _this.load_datablock(data);
	          }
	        }
	      };
	    })(this);
	    ws.onclose = (function(_this) {
	      return function(x) {
	        var code, f;
	        console.log(x);
	        x = x || {
	          'code': 1006,
	          'reason': ''
	        };
	        code = ['NORMAL', 'GOING_AWAY', 'PROTOCOL_ERROR', 'UNSUPPORTED', '', 'NO_STATUS', 'ABNORMAL', 'INCONSISTENT_DATA', '', 'TOO_LARGE', '', '', '', '', '', 'TLS_ERROR'][x.code - 1000];
	        console.log("Disconnected with code", code, x.reason);
	        console.log("Reconnecting in 1 second");
	        clearInterval(_this.keep_alive_int);
	        f = function() {
	          return WebSocketLoader(address, loader);
	        };
	        return setTimeout(f, 1000);
	      };
	    })(this);
	  }
	
	  return WebSocketLoader;
	
	})();
	
	XhrLoader = (function(superClass) {
	  extend(XhrLoader, superClass);
	
	  function XhrLoader(context, data_dir, workers) {
	    var blob, coffee_compile, crunch_code, cs_load_worker, dir, ext, fs, j, num_workers, onmessage, path, prog, ref3, scripts_dir, task_cb, w, worker, worker_code, worker_uri, xhrloader;
	    if (data_dir == null) {
	      data_dir = '';
	    }
	    if (workers == null) {
	      workers = null;
	    }
	    scripts_dir = data_dir + '/scripts/';
	    this.context = context;
	    this.loaded = 0;
	    this.total = 0;
	    this.total_loaded = 0;
	    this.physics_engine_loaded = false;
	    this.pending_meshes = {};
	    this.data_dir = data_dir;
	    this.full_local_path = location.href.split('#')[0].split('/').slice(0, -1).join('/') + '/';
	    if (scripts_dir.indexOf('/') > 0) {
	      scripts_dir = this.full_local_path + scripts_dir;
	    }
	    this.scripts_dir = scripts_dir;
	    this.workers = workers = workers || [];
	    this.remaining_tasks = [0];
	    this.queue_listeners = [[]];
	    this.next_task_id = 0;
	    this.task_cb = task_cb = {};
	    prog = document.getElementById('progress');
	    xhrloader = this;
	    onmessage = function(e) {
	      var data, f, finished, j, len, len1, loaded, o, queue_id, ref3, total_loaded, w;
	      data = e.data;
	      if (data[0] === 'log') {
	        return console.log(data[1]);
	      } else if (data[0] === 'progress') {
	        queue_id = data[1];
	        loaded = data[2];
	        this.last_progress[queue_id] = Math.max(this.last_progress[queue_id], loaded);
	        total_loaded = 0;
	        for (j = 0, len = workers.length; j < len; j++) {
	          w = workers[j];
	          total_loaded += w.last_progress[queue_id];
	        }
	        this.total_loaded = total_loaded;
	        if (prog) {
	          return prog.style.width = (total_loaded / this.context.MYOU_PARAMS.total_size * 448) + 'px';
	        }
	      } else if (data[0] === 'done') {
	        return queue_id = data[1];
	      } else if (data[2] === 'error') {
	        return console.log('error', data[3], data[4], data);
	      } else {
	        queue_id = data[1];
	        finished = true;
	        ref3 = task_cb[data[0]];
	        for (o = 0, len1 = ref3.length; o < len1; o++) {
	          f = ref3[o];
	          finished = finished && f.apply(null, data[2]);
	        }
	        if (finished) {
	          this.remaining[queue_id] -= 1;
	          xhrloader.remaining_tasks[queue_id] -= 1;
	          return xhrloader.check_queue_finished(queue_id);
	        }
	      }
	    };
	    ext = this.context.render_manager.extensions.compressed_texture_s3tc;
	    worker_code = "COMPRESSED_TEXTURE_SUPPORT = " + (ext != null) + "\n";
	    if (process.browser) {
	      crunch_code = __webpack_require__(34);
	      worker_code += crunch_code + __webpack_require__(35);
	    } else {
	      fs = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"fs\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	      path = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"path\""); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
	      coffee_compile = __webpack_require__(!(function webpackMissingModule() { var e = new Error("Cannot find module \"coffee-script\""); e.code = 'MODULE_NOT_FOUND'; throw e; }())).compile;
	      dir = path.dirname(__filename);
	      cs_load_worker = fs.readFileSync(dir + '/load_worker.coffee', 'utf8');
	      crunch_code = fs.readFileSync(path.join(__dirname, '../myou_bl_plugin/build/crunch.js'), 'utf8');
	      worker_code += crunch_code + coffee_compile(cs_load_worker, {
	        bare: true
	      });
	    }
	    if (EMULATE_WORKERS) {
	      worker = new Function("function importScripts(url){\n    xhr = new XMLHttpRequest;\n    xhr.open('GET', url, false);\n    xhr.send();\n    window.eval(xhr.response.replace('var Crunch','window.Crunch'));\n}\n" + worker_code + "\nvar fake = {\n    onmessage: null,\n    postMessage: function(msg){\n        onmessage({data:msg})\n        }\n    }\n\npost_message = function(msg){\n    fake.onmessage({data:msg})\n    };\nreturn fake")();
	      worker.id = w;
	      worker.last_progress = [0];
	      worker.remaining = [0];
	      worker.onmessage = onmessage;
	      workers.push(worker);
	      NUM_WORKERS_32 = NUM_WORKERS_64 = 1;
	      return;
	    }
	    blob = new Blob([worker_code], {
	      'type': 'application/javascript'
	    });
	    worker_uri = (window.URL || window.webkitURL).createObjectURL(blob);
	    num_workers = NUM_WORKERS_32;
	    if (is_64_bit_os) {
	      num_workers = NUM_WORKERS_64;
	    }
	    for (w = j = 0, ref3 = num_workers; 0 <= ref3 ? j < ref3 : j > ref3; w = 0 <= ref3 ? ++j : --j) {
	      worker = new Worker(worker_uri);
	      worker.id = w;
	      worker.last_progress = [0];
	      worker.remaining = [0];
	      worker.onmessage = onmessage;
	      workers.push(worker);
	    }
	  }
	
	  XhrLoader.prototype.check_queue_finished = function(queue_id) {
	    var f, j, k, len, ref3, ref4, remaining, results, scene;
	    remaining = this.remaining_tasks[queue_id];
	    if (remaining === 0) {
	      ref3 = this.context.scenes;
	      for (k in ref3) {
	        scene = ref3[k];
	        if (scene && !scene.world && this.physics_engine_loaded) {
	          scene.on_physics_engine_loaded();
	        }
	      }
	      ref4 = this.queue_listeners[queue_id];
	      results = [];
	      for (j = 0, len = ref4.length; j < len; j++) {
	        f = ref4[j];
	        if (f) {
	          results.push(f());
	        } else {
	          results.push(void 0);
	        }
	      }
	      return results;
	    } else if (remaining < 0) {
	      return raise("Too many finished tasks!");
	    }
	  };
	
	  XhrLoader.prototype.add_task = function(uri, callback, decoder, extra_data, queue_id) {
	    var cb_list, id, num_workers, worker;
	    if (queue_id == null) {
	      queue_id = 0;
	    }
	    id = this.next_task_id;
	    cb_list = this.task_cb[id] = this.task_cb[id] || [];
	    cb_list.push(callback);
	    num_workers = NUM_WORKERS_32;
	    if (is_64_bit_os) {
	      num_workers = NUM_WORKERS_64;
	    }
	    worker = this.workers[id % num_workers];
	    this.remaining_tasks[queue_id] = (this.remaining_tasks[queue_id] | 0) + 1;
	    worker.remaining[queue_id] = (worker.remaining[queue_id] | 0) + 1;
	    if (!/^http/.test(uri)) {
	      uri = this.full_local_path + uri;
	    }
	    if (extra_data && (extra_data.byteArray != null)) {
	      worker.postMessage(['get', queue_id, id, uri, decoder, extra_data], [extra_data]);
	    } else {
	      worker.postMessage(['get', queue_id, id, uri, decoder, extra_data]);
	    }
	    return this.next_task_id += 1;
	  };
	
	  XhrLoader.prototype.add_anon_task = function(queue_id) {
	    var id;
	    id = this.next_task_id;
	    this.remaining_tasks[queue_id] = this.remaining_tasks[queue_id] | 0 + 1;
	    this.next_task_id += 1;
	    return this.next_task_id;
	  };
	
	  XhrLoader.prototype.finish_anon_task = function(queue_id) {
	    this.remaining_tasks[queue_id] -= 1;
	    return this.check_queue_finished(queue_id);
	  };
	
	  XhrLoader.prototype.add_queue_listener = function(queue_id, f) {
	    var l;
	    l = this.queue_listeners[queue_id] = this.queue_listeners[queue_id] || [];
	    return l.push(f);
	  };
	
	  XhrLoader.prototype.remove_queue_listener = function(queue_id, f) {
	    var l;
	    l = this.queue_listeners[queue_id];
	    if (l) {
	      return l.remove(f);
	    }
	  };
	
	  XhrLoader.prototype.load_scene = function(scene_name, filter_function) {
	    var base, f;
	    f = (function(_this) {
	      return function(data) {
	        var d;
	        d = JSON.parse(data);
	        if (filter_function) {
	          d = filter_function(d);
	        }
	        _this.load(d);
	        return true;
	      };
	    })(this);
	    base = this.data_dir + '/scenes/';
	    return this.add_task(base + scene_name + '/all.json', f, 'text');
	  };
	
	  XhrLoader.prototype.load_physics_engine = function() {
	    var script;
	    if (!window.global_ammo_promise) {
	      window.global_ammo_promise = new Promise(function(resolve, reject) {
	        var check_ammo_is_loaded;
	        check_ammo_is_loaded = function() {
	          var ref3;
	          if (typeof Ammo === "undefined" || Ammo === null) {
	            if ((ref3 = window.Module) != null ? ref3.allocate : void 0) {
	              return reject("There was an error initializing physics");
	            } else {
	              return setTimeout(check_ammo_is_loaded, 300);
	            }
	          } else {
	            return resolve();
	          }
	        };
	        return setTimeout(check_ammo_is_loaded, 300);
	      });
	      script = document.createElement('script');
	      script.type = 'text/javascript';
	      script.async = true;
	      script.src = this.scripts_dir + PHYSICS_ENGINE_URL;
	      document.body.appendChild(script);
	    }
	    return window.global_ammo_promise = global_ammo_promise.then((function(_this) {
	      return function() {
	        var k, ref3, scene;
	        physics_engine_init();
	        _this.physics_engine_loaded = true;
	        ref3 = _this.context.scenes;
	        for (k in ref3) {
	          scene = ref3[k];
	          if (scene && !scene.world) {
	            scene.on_physics_engine_loaded();
	          }
	        }
	      };
	    })(this));
	  };
	
	  XhrLoader.prototype.load_script = function(uri, func) {
	    var f;
	    if (func == null) {
	      func = null;
	    }
	    if (location.protocol === "chrome-extension:") {
	      func();
	      return;
	    }
	    f = function(data) {
	      if (this.context.MYOU_PARAMS.debug) {
	        data = "console.log('Loading " + uri + "');\n" + data;
	      }
	      window["eval"](data);
	      if (func) {
	        func();
	      }
	      return true;
	    };
	    return this.add_task(this.data_dir + uri, f, 'text');
	  };
	
	  XhrLoader.prototype.load_script_with_tag_callback = function(uri, func) {
	    var f, queue_id, script, script_file_name;
	    if (func == null) {
	      func = null;
	    }
	    script_file_name = uri.split('/').pop(-1).split('?')[0];
	    queue_id = 0;
	    this.add_anon_task(queue_id);
	    f = (function(_this) {
	      return function() {
	        _this.finish_anon_task(queue_id);
	        delete script_tag_loaded_callbacks[script_file_name];
	        if (func) {
	          return func();
	        }
	      };
	    })(this);
	    script_tag_loaded_callbacks[script_file_name] = f;
	    script = document.createElement('script');
	    script.type = 'text/javascript';
	    script.async = true;
	    script.src = this.data_dir + uri;
	    return document.body.appendChild(script);
	  };
	
	  XhrLoader.prototype.load_mesh_data = function(mesh_object, min_lod) {
	    var alt, any_loaded, base, file_name, j, last_lod, len, len1, lod_ob, lod_objects, non_packed, o, packed, pending_meshes, ref3, uri;
	    if (min_lod == null) {
	      min_lod = 1;
	    }
	    if (mesh_object.type !== 'MESH') {
	      return false;
	    }
	    file_name = mesh_object.packed_file || mesh_object.hash;
	    pending_meshes = this.pending_meshes;
	    ref3 = mesh_object.altmeshes;
	    for (j = 0, len = ref3.length; j < len; j++) {
	      alt = ref3[j];
	      if (alt !== mesh_object) {
	        this.load_mesh_data(alt);
	      }
	    }
	    any_loaded = false;
	    lod_objects = mesh_object.lod_objects;
	    last_lod = lod_objects[lod_objects.length - 1];
	    if (last_lod) {
	      min_lod = Math.max(min_lod, last_lod.factor);
	    }
	    for (o = 0, len1 = lod_objects.length; o < len1; o++) {
	      lod_ob = lod_objects[o];
	      if (lod_ob.factor <= min_lod) {
	        any_loaded = this.load_mesh_data(lod_ob.object) || any_loaded;
	      }
	    }
	    if (min_lod < 1 || mesh_object.data) {
	      return any_loaded;
	    }
	    if (file_name in pending_meshes) {
	      if (pending_meshes[file_name].indexOf(mesh_object === -1)) {
	        pending_meshes[file_name].push(mesh_object);
	      }
	    } else {
	      pending_meshes[file_name] = [];
	      base = this.data_dir + '/scenes/';
	      uri = base + mesh_object.scene.name + '/' + file_name + '.mesh';
	      packed = (function(_this) {
	        return function(data) {
	          var m, others;
	          m = mesh_object;
	          others = pending_meshes[file_name];
	          while (m) {
	            m.data && m.data.remove(m);
	            m.data = _this.context.mesh_datas[m.hash];
	            if (m.data) {
	              m.data.users.push(m);
	            } else {
	              m.load_from_arraybuffer(data);
	            }
	            m = others.pop();
	          }
	          delete pending_meshes[file_name];
	          return true;
	        };
	      })(this);
	      non_packed = function(data) {
	        var len2, m, q, ref4;
	        mesh_object.load_from_arraybuffer(data);
	        ref4 = pending_meshes[file_name];
	        for (q = 0, len2 = ref4.length; q < len2; q++) {
	          m = ref4[q];
	          m.data && m.data.remove(m);
	          m.data = mesh_object.data;
	          m.data.users.push(m);
	          if (!m.body) {
	            m.instance_physics();
	          }
	        }
	        delete pending_meshes[file_name];
	        return true;
	      };
	      if (mesh_object.packed_file) {
	        this.add_task(uri, packed, '');
	      } else {
	        this.add_task(uri, non_packed, '');
	      }
	    }
	    return true;
	  };
	
	  return XhrLoader;
	
	})(Loader);
	
	set_altmesh = function(ob, i) {
	  return ob.active_mesh_index = i;
	};
	
	module.exports = {
	  XhrLoader: XhrLoader,
	  WebSocketLoader: WebSocketLoader,
	  Loader: Loader
	};
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(26), "/index.js", "/"))

/***/ },
/* 26 */
/***/ function(module, exports) {

	// shim for using process in browser
	
	var process = module.exports = {};
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;
	
	function cleanUpNextTick() {
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}
	
	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = setTimeout(cleanUpNextTick);
	    draining = true;
	
	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    clearTimeout(timeout);
	}
	
	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        setTimeout(drainQueue, 0);
	    }
	};
	
	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};
	
	function noop() {}
	
	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	
	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};
	
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 27 */
/***/ function(module, exports) {

	var Group;
	
	Group = (function() {
	  function Group(objects, offset) {
	    this.objects = objects;
	    this.offset = offset;
	  }
	
	  return Group;
	
	})();
	
	module.exports = {
	  Group: Group
	};


/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	var Viewport, mat2, mat3, mat4, quat, ref, vec2, vec3, vec4;
	
	ref = __webpack_require__(8), mat2 = ref.mat2, mat3 = ref.mat3, mat4 = ref.mat4, vec2 = ref.vec2, vec3 = ref.vec3, vec4 = ref.vec4, quat = ref.quat;
	
	Viewport = (function() {
	  function Viewport(render_manager, camera, rect, custom_size, dest_buffer) {
	    if (rect == null) {
	      rect = [0, 0, 1, 1];
	    }
	    if (custom_size == null) {
	      custom_size = [0, 0];
	    }
	    this.render_manager = render_manager;
	    if (dest_buffer == null) {
	      dest_buffer = render_manager.main_fb;
	    }
	    this.rect = rect;
	    this.rect_pix = rect;
	    this.dest_buffer = dest_buffer;
	    this.camera = camera;
	    this.post_processing_enabled = false;
	    this.post_processing_filters = [render_manager.dummy_filter];
	    this.custom_size = custom_size;
	    this.eye_shift = vec3.create();
	    this.debug_camera = null;
	    this.set_clear(true, true);
	    render_manager.viewports.push(this);
	    this.recalc_aspect();
	    render_manager.recalculate_fb_size();
	  }
	
	  Viewport.prototype.recalc_aspect = function() {
	    var cs, h, r, w;
	    r = this.rect;
	    w = this.dest_buffer.size_x;
	    h = this.dest_buffer.size_y;
	    this.camera.aspect_ratio = (r[2] * this.render_manager.width) / (r[3] * this.render_manager.height);
	    this.camera.recalculate_projection();
	    cs = this.custom_size;
	    if (cs[0] === 0 && cs[1] === 0) {
	      this.rect_pix = [r[0] * w, r[1] * h, r[2] * w, r[3] * h];
	    } else {
	      this.rect_pix = [r[0] * w, r[1] * h, cs[0], cs[1]];
	    }
	    return this.dest_rect_pix = [r[0] * w, r[1] * h, r[2] * w, r[3] * h];
	  };
	
	  Viewport.prototype.set_clear = function(color, depth) {
	    var c;
	    c = color ? 16384 : 0;
	    c |= depth ? 256 : 0;
	    return this.clear_bits = c;
	  };
	
	  return Viewport;
	
	})();
	
	module.exports = {
	  Viewport: Viewport
	};


/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	var Camera, GameObject, VECTOR_X, VECTOR_Y, ZERO_MAT4, mat2, mat3, mat4, quat, ref, vec2, vec3, vec4,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;
	
	GameObject = __webpack_require__(22).GameObject;
	
	ref = __webpack_require__(8), mat2 = ref.mat2, mat3 = ref.mat3, mat4 = ref.mat4, vec2 = ref.vec2, vec3 = ref.vec3, vec4 = ref.vec4, quat = ref.quat;
	
	ZERO_MAT4 = new Float32Array(16);
	
	VECTOR_X = new Float32Array([1, 0, 0]);
	
	VECTOR_Y = new Float32Array([0, 1, 0]);
	
	Camera = (function(superClass) {
	  var type;
	
	  extend(Camera, superClass);
	
	  type = 'CAMERA';
	
	  function Camera(context, field_of_view, aspect_ratio, near_plane, far_plane) {
	    this.context = context;
	    if (field_of_view == null) {
	      field_of_view = 30.0;
	    }
	    if (aspect_ratio == null) {
	      aspect_ratio = 1;
	    }
	    if (near_plane == null) {
	      near_plane = 0.1;
	    }
	    if (far_plane == null) {
	      far_plane = 10000.0;
	    }
	    Camera.__super__.constructor.call(this, this.context);
	    this.near_plane = near_plane;
	    this.far_plane = far_plane;
	    this.field_of_view = field_of_view * Math.PI / 180.0;
	    this.aspect_ratio = aspect_ratio;
	    this.cam_type = 'PERSP';
	    this.sensor_fit = 'AUTO';
	    this.projection_matrix = new Float32Array(16);
	    this.projection_matrix_inv = new Float32Array(16);
	    this.world_to_screen_matrix = new Float32Array(16);
	    this.cull_left = new Float32Array(3);
	    this.cull_bottom = new Float32Array(3);
	    this.recalculate_projection();
	  }
	
	  Camera.prototype.instance_physics = function() {};
	
	  Camera.prototype.get_ray_direction = function(x, y) {
	    var pos_rot, v;
	    v = vec3.create();
	    v[0] = x * 2 - 1;
	    v[1] = 1 - y * 2;
	    v[2] = 1;
	    pos_rot = this.get_world_pos_rot();
	    vec3.transformMat4(v, v, this.projection_matrix_inv);
	    vec3.transformQuat(v, v, pos_rot[1]);
	    vec3.add(v, v, pos_rot[0]);
	    return v;
	  };
	
	  Camera.prototype.get_ray_direction_local = function(x, y) {
	    var v;
	    v = vec3.create();
	    v[0] = x * 2 - 1;
	    v[1] = 1 - y * 2;
	    v[2] = 1;
	    vec3.transformMat4(v, v, this.projection_matrix_inv);
	    vec3.transformQuat(v, v, this.rotation);
	    return v;
	  };
	
	  Camera.prototype.recalculate_projection = function() {
	    var a, b, bottom, c, d, far_plane, half_size, left, near_plane, pm, right, sensor_fit, top, v, x, y;
	    near_plane = this.near_plane;
	    far_plane = this.far_plane;
	    sensor_fit = this.sensor_fit;
	    if (this.cam_type === 'PERSP') {
	      half_size = near_plane * Math.tan(this.field_of_view / 2);
	    } else if (this.cam_type === 'ORTHO') {
	      half_size = this.ortho_scale / 2;
	    } else {
	      raise("Camera.cam_type must be PERSP or ORTHO.");
	    }
	    if (sensor_fit === 'AUTO') {
	      if (this.aspect_ratio > 1) {
	        sensor_fit = 'HORIZONTAL';
	      } else {
	        sensor_fit = 'VERTICAL';
	      }
	    }
	    if (sensor_fit === 'HORIZONTAL') {
	      right = half_size;
	      top = right / this.aspect_ratio;
	    } else if (sensor_fit === 'VERTICAL') {
	      top = half_size;
	      right = top * this.aspect_ratio;
	    } else {
	      raise("Camera.sensor_fit must be AUTO, HORIZONTAL or VERTICAL.");
	    }
	    bottom = -top;
	    left = -right;
	    pm = this.projection_matrix;
	    a = (right + left) / (right - left);
	    b = (top + bottom) / (top - bottom);
	    c = -(far_plane + near_plane) / (far_plane - near_plane);
	    if (this.cam_type === 'PERSP') {
	      d = -(2 * far_plane * near_plane) / (far_plane - near_plane);
	      x = (2 * near_plane) / (right - left);
	      y = (2 * near_plane) / (top - bottom);
	      pm.set(ZERO_MAT4);
	      pm[0] = x;
	      pm[5] = y;
	      pm[8] = a;
	      pm[9] = b;
	      pm[10] = c;
	      pm[11] = -1;
	      pm[14] = d;
	      mat4.invert(this.projection_matrix_inv, this.projection_matrix);
	      v = this.cull_left;
	      v[0] = -1;
	      v[1] = 0;
	      v[2] = 1;
	      vec3.transformMat4(v, v, this.projection_matrix_inv);
	      vec3.cross(v, v, VECTOR_Y);
	      vec3.normalize(v, v);
	      v = this.cull_bottom;
	      v[0] = 0;
	      v[1] = -1;
	      v[2] = 1;
	      vec3.transformMat4(v, v, this.projection_matrix_inv);
	      vec3.cross(v, VECTOR_X, v);
	      return vec3.normalize(v, v);
	    } else {
	      d = -2 / (far_plane - near_plane);
	      x = 2 / (right - left);
	      y = 2 / (top - bottom);
	      pm.set(ZERO_MAT4);
	      pm[0] = x;
	      pm[5] = y;
	      pm[10] = d;
	      pm[12] = -a;
	      pm[13] = -b;
	      pm[14] = c;
	      pm[15] = 1;
	      mat4.invert(this.projection_matrix_inv, this.projection_matrix);
	      return console.error("TODO: frustum culling for ortho!");
	    }
	  };
	
	  return Camera;
	
	})(GameObject);
	
	module.exports = {
	  Camera: Camera
	};


/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	var Framebuffer, GameObject, Lamp, Material, mat2, mat3, mat4, quat, ref, vec2, vec3, vec4,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;
	
	ref = __webpack_require__(8), mat2 = ref.mat2, mat3 = ref.mat3, mat4 = ref.mat4, vec2 = ref.vec2, vec3 = ref.vec3, vec4 = ref.vec4, quat = ref.quat;
	
	GameObject = __webpack_require__(22).GameObject;
	
	Framebuffer = __webpack_require__(20).Framebuffer;
	
	Material = __webpack_require__(19).Material;
	
	Lamp = (function(superClass) {
	  extend(Lamp, superClass);
	
	  Lamp.prototype.type = 'LAMP';
	
	  function Lamp(context) {
	    this.context = context;
	    Lamp.__super__.constructor.call(this, this.context);
	    this.lamp_type = 'POINT';
	    this.shadow_fb = null;
	    this._color4 = vec4.fromValues(1, 1, 1, 1);
	    this.color = this._color4.subarray(0, 3);
	    this.energy = 1;
	    this._view_pos = vec3.create();
	    this._dir = vec3.create();
	    this._depth_matrix = mat4.create();
	    this._cam2depth = mat4.create();
	    this._projection_matrix = mat4.create();
	  }
	
	  Lamp.prototype.instance_physics = function() {};
	
	  Lamp.prototype.init_shadow = function(frustum_size, clip_start, clip_end, tex_size) {
	    var fs, mat, vs;
	    this.shadow_fb = new Framebuffer(this.context.render_manager, tex_size, tex_size);
	    vs = "precision highp float;\nuniform mat4 projection_matrix;\nuniform mat4 model_view_matrix;\nattribute vec3 vertex;\nvarying vec4 varposition;\nvoid main(){\n    gl_Position = varposition =\n    projection_matrix * model_view_matrix * vec4(vertex, 1.0);\n}";
	    fs = "#extension GL_OES_standard_derivatives : enable\nprecision highp float;\nvarying vec4 varposition;\nvoid main(){\n    float depth = varposition.z/varposition.w;\n    depth = depth * 0.5 + 0.5;\n    float dx = dFdx(depth);\n    float dy = dFdy(depth);\n    gl_FragColor = vec4(depth, pow(depth, 2.0) + 0.25*(dx*dx + dy*dy), 0.0, 1.0);\n}";
	    mat = new Material(this.context, this.name + '_shadow', fs, [], [], vs);
	    mat.is_shadow_material = true;
	    this._shadow_material = mat;
	    mat4.ortho(this._projection_matrix, -frustum_size, frustum_size, -frustum_size, frustum_size, clip_start, clip_end);
	    return mat4.multiply(this._depth_matrix, [0.5, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.5, 0.5, 0.5, 1.0], this._projection_matrix);
	  };
	
	  return Lamp;
	
	})(GameObject);
	
	module.exports = {
	  Lamp: Lamp
	};


/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	var PhysicsWorld, Scene, _collision_seq, get_scene, mat2, mat3, mat4, quat, ref, ref1, set_gravity, vec2, vec3, vec4;
	
	ref = __webpack_require__(8), mat2 = ref.mat2, mat3 = ref.mat3, mat4 = ref.mat4, vec2 = ref.vec2, vec3 = ref.vec3, vec4 = ref.vec4, quat = ref.quat;
	
	ref1 = __webpack_require__(24), PhysicsWorld = ref1.PhysicsWorld, set_gravity = ref1.set_gravity;
	
	_collision_seq = 0;
	
	get_scene = function(context, name) {
	  var scene;
	  scene = context.scenes[name] = context.scenes[name] || new Scene(context);
	  scene.name = name;
	  return scene;
	};
	
	Scene = (function() {
	  function Scene(context) {
	    this.context = context;
	    this.name = '';
	    this.loaded = false;
	    this.enabled = false;
	    this.children = [];
	    this.auto_updated_children = [];
	    this.mesh_passes = [[], [], []];
	    this.lamps = [];
	    this.armatures = [];
	    this.objects = {};
	    this.parents = {};
	    this.rigid_bodies = [];
	    this.static_ghosts = [];
	    this.kinematic_characters = [];
	    this.debug_physics = false;
	    this.materials = {};
	    this.unloaded_material_data = {};
	    this.active_camera = null;
	    this.loader = null;
	    this.world = null;
	    this.gravity = vec3.create();
	    this.tree_name = null;
	    this.tree = null;
	    this._children_are_ordered = true;
	    this.last_render_tick = 0;
	    this.load_callbacks = [];
	    this.logic_ticks = [];
	    this.pre_draw_callbacks = [];
	    this.post_draw_callbacks = [];
	    this._pending_tasks = 0;
	    this.active_particle_systems = [];
	  }
	
	  Scene.prototype.on_physics_engine_loaded = function() {
	    var g, j, len, ob, ref2;
	    this.world = new PhysicsWorld;
	    g = this.gravity;
	    set_gravity(this.world, g[0], g[1], g[2]);
	    ref2 = this.children;
	    for (j = 0, len = ref2.length; j < len; j++) {
	      ob = ref2[j];
	      ob.instance_physics();
	    }
	  };
	
	  Scene.prototype.set_gravity = function(gravity) {
	    var g;
	    g = this.gravity;
	    vec3.copy(g, gravity);
	    if (this.world) {
	      return set_gravity(this.world, g[0], g[1], g[2]);
	    }
	  };
	
	  Scene.prototype.add_object = function(ob, name, parent_name, parent_bone) {
	    var j, len, n, p, ref2;
	    if (name == null) {
	      name = 'no_name';
	    }
	    if (parent_name == null) {
	      parent_name = '';
	    }
	    ob.scene = this;
	    this.children.push(ob);
	    if (!ob["static"]) {
	      this.auto_updated_children.push(ob);
	    }
	    n = name;
	    while (this.context.objects[n]) {
	      _collision_seq += 1;
	      n = name + '$' + _collision_seq;
	    }
	    ob.name = n;
	    ob.original_name = name;
	    this.objects[n] = this.context.objects[n] = ob;
	    this.parents[name] = ob;
	    p = this.parents[parent_name];
	    if (p) {
	      ob.parent = p;
	      p.children.push(ob);
	      if (p.type === 'ARMATURE' && parent_bone) {
	        ob.parent_bone_index = p._bone_list.indexOf(p.bones[parent_bone]);
	      }
	    }
	    if (ob.type === 'MESH') {
	      ref2 = ob.passes;
	      for (j = 0, len = ref2.length; j < len; j++) {
	        p = ref2[j];
	        this.mesh_passes[p].push(ob);
	      }
	    }
	    if (ob.type === 'LAMP') {
	      this.lamps.push(ob);
	    }
	    if (ob.type === 'ARMATURE') {
	      return this.armatures.push(ob);
	    }
	  };
	
	  Scene.prototype.remove_object = function(ob, recursive) {
	    var child, children, i, j, ref2;
	    if (recursive == null) {
	      recursive = true;
	    }
	    this.children.remove(ob);
	    if (!ob["static"]) {
	      this.auto_updated_children.remove(ob);
	    }
	    delete this.objects[ob.name];
	    delete this.parents[ob.original_name];
	    if (ob.type === 'MESH') {
	      this.mesh_passes[0].remove(ob);
	      this.mesh_passes[1].remove(ob);
	      this.fg_pass && this.fg_pass.remove(ob);
	      this.bg_pass && this.bg_pass.remove(ob);
	      if (ob.data) {
	        ob.data.remove(ob);
	      }
	    }
	    if (ob.type === 'LAMP') {
	      this.lamps.remove(ob);
	    }
	    if (ob.type === 'ARMATURE') {
	      this.armatures.remove(ob);
	    }
	    if (ob.body) {
	      remove_body(this.world, ob.body);
	      this.rigid_bodies.remove(ob);
	      this.static_ghosts.remove(ob);
	    }
	    if (recursive) {
	      children = ob.children;
	      for (i = j = 0, ref2 = children.length; 0 <= ref2 ? j < ref2 : j > ref2; i = 0 <= ref2 ? ++j : --j) {
	        child = l - i - 1;
	        this.remove_object(children[i]);
	      }
	    }
	  };
	
	  Scene.prototype.make_parent = function(parent, child, keep_transform) {
	    var p_rot, pos, rot;
	    if (keep_transform == null) {
	      keep_transform = true;
	    }
	    if (child.parent) {
	      this.clear_parent(child, keep_transform);
	    }
	    if (keep_transform) {
	      pos = child.position;
	      rot = child.rotation;
	      vec3.sub(pos, pos, parent.get_world_position());
	      p_rot = quat.invert([], parent.get_world_rotation());
	      vec3.transformQuat(pos, pos, p_rot);
	      quat.mul(rot, p_rot, rot);
	    }
	    child.parent = parent;
	    if (this.children.indexOf(parent) > this.children.indexOf(child)) {
	      return this._children_are_ordered = false;
	    }
	  };
	
	  Scene.prototype.clear_parent = function(child, keep_transform, reorder) {
	    var ns, parent, s;
	    if (keep_transform == null) {
	      keep_transform = true;
	    }
	    if (reorder == null) {
	      reorder = true;
	    }
	    parent = child.parent;
	    if (parent) {
	      if (keep_transform) {
	        vec3.copy(child.position, child.get_world_position());
	        quat.copy(child.rotation, child.get_world_rotation());
	      }
	      s = parent.first_child;
	      if (s === child) {
	        parent.first_child = child.next_sibling;
	      } else {
	        ns = s.next_sibling;
	        while (ns !== child) {
	          s = ns;
	          ns = s.next_sibling;
	        }
	        s.next_sibling = child.next_sibling;
	      }
	      return child.parent = child.next_sibling = null;
	    }
	  };
	
	  Scene.prototype.reorder_children = function() {
	    'Makes sure all scene children are in order for correct matrix calculations';
	    var children, index, name, ob, objects, reorder;
	    children = this.children;
	    reorder = function(ob, index) {
	      var c, j, len, ref2, results;
	      children[index] = ob;
	      ref2 = ob.children;
	      results = [];
	      for (j = 0, len = ref2.length; j < len; j++) {
	        c = ref2[j];
	        results.push(reorder(c, index));
	      }
	      return results;
	    };
	    index = 0;
	    objects = this.objects;
	    for (name in objects) {
	      ob = objects[name];
	      if (!ob.parent) {
	        reorder(ob, index);
	        index += 1;
	      }
	    }
	    return this._children_are_ordered = true;
	  };
	
	  Scene.prototype.load = function() {
	    var loader;
	    if (!this.loaded) {
	      loader = scene.loader;
	      return loader.load_scene(this.name);
	    }
	  };
	
	  Scene.prototype.unload = function() {
	    var j, k, len, len1, ob, ref2, ref3, stub, v;
	    ref2 = this.children.slice(0);
	    for (j = 0, len = ref2.length; j < len; j++) {
	      ob = ref2[j];
	      this.remove_object(ob, false);
	      delete this.context.objects[ob.name];
	    }
	    destroy_world(this.world);
	    stub = this.context.scenes[this.name] = new Scene(this.context);
	    stub.name = this.name;
	    stub.load_callbacks = this.load_callbacks;
	    stub.pre_draw_callbacks = this.pre_draw_callbacks;
	    stub.post_draw_callbacks = this.post_draw_callbacks;
	    stub.logic_ticks = this.logic_ticks;
	    ref3 = render_manager.viewports.slice(0);
	    for (k = 0, len1 = ref3.length; k < len1; k++) {
	      v = ref3[k];
	      if (v.camera.scene === this) {
	        render_manager.viewports.remove(v);
	      }
	    }
	    if (this.context.scene === this) {
	      return this.context.scene = null;
	    }
	  };
	
	  Scene.prototype.reload = function() {
	    this.unload();
	    return this.loader.load_scene(this.name);
	  };
	
	  Scene.prototype.increment_task_count = function() {
	    return this._pending_tasks += 1;
	  };
	
	  Scene.prototype.decrement_task_count = function() {
	    var f, j, len, ref2, results;
	    if (this._pending_tasks !== 0) {
	      this._pending_tasks -= 1;
	      if (this._pending_tasks === 0 && !this.loaded) {
	        this.context.loaded_scenes.push(this);
	        this.loaded = true;
	        ref2 = this.load_callbacks;
	        results = [];
	        for (j = 0, len = ref2.length; j < len; j++) {
	          f = ref2[j];
	          results.push(f(this));
	        }
	        return results;
	      }
	    }
	  };
	
	  return Scene;
	
	})();
	
	module.exports = {
	  Scene: Scene,
	  get_scene: get_scene
	};


/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	var Curve, GameObject, mat2, mat3, mat4, quat, ref, vec2, vec3, vec4,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty,
	  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };
	
	ref = __webpack_require__(8), mat2 = ref.mat2, mat3 = ref.mat3, mat4 = ref.mat4, vec2 = ref.vec2, vec3 = ref.vec3, vec4 = ref.vec4, quat = ref.quat;
	
	GameObject = __webpack_require__(22).GameObject;
	
	Curve = (function(superClass) {
	  extend(Curve, superClass);
	
	  function Curve(context) {
	    this.context = context;
	    Curve.__super__.constructor.call(this, this.context);
	    this.type = 'CURVE';
	  }
	
	  Curve.prototype.instance_physics = function() {};
	
	  Curve.prototype.set_curves = function(curves, resolution, nodes) {
	    var c, c_indices, c_vertices, cia, cn, curve_index, cva, e, i, i9, ia, indices, j, k, len, len1, len2, m, n, o, origins, p0x, p0y, p0z, p1x, p1y, p1z, p2x, p2y, p2z, p3x, p3y, p3z, r, ref1, ref2, ref3, ref4, results, s, va, vertices, x, y, z;
	    if (nodes == null) {
	      nodes = false;
	    }
	    this.curves = curves;
	    this.calculated_curves = [];
	    indices = [];
	    vertices = [];
	    n = 0;
	    this.origins = origins = [];
	    for (k = 0, len = curves.length; k < len; k++) {
	      c = curves[k];
	      cn = 0;
	      c_indices = [];
	      c_vertices = [];
	      for (i = m = 0, ref1 = Math.floor((c.length / 9) - 1); 0 <= ref1 ? m < ref1 : m > ref1; i = 0 <= ref1 ? ++m : --m) {
	        i9 = i * 9;
	        p0x = c[i9 + 3];
	        p0y = c[i9 + 4];
	        p0z = c[i9 + 5];
	        p1x = c[i9 + 6];
	        p1y = c[i9 + 7];
	        p1z = c[i9 + 8];
	        p2x = c[i9 + 9];
	        p2y = c[i9 + 10];
	        p2z = c[i9 + 11];
	        p3x = c[i9 + 12];
	        p3y = c[i9 + 13];
	        p3z = c[i9 + 14];
	        for (j = o = 0, ref2 = resolution; 0 <= ref2 ? o < ref2 : o > ref2; j = 0 <= ref2 ? ++o : --o) {
	          x = interpolate(j / resolution, p0x, p1x, p2x, p3x);
	          y = interpolate(j / resolution, p0y, p1y, p2y, p3y);
	          z = interpolate(j / resolution, p0z, p1z, p2z, p3z);
	          vertices.extend([x, y, z]);
	          indices.append(n);
	          indices.append(n + 1);
	          c_vertices.extend([x, y, z]);
	          c_indices.append(cn);
	          c_indices.append(cn + 1);
	          n += 1;
	          cn += 1;
	        }
	      }
	      c_vertices.extend([p3x, p3y, p3z]);
	      cva = new Float32Array(c_vertices);
	      cia = new Uint16Array(c_indices);
	      this.calculated_curves.append({
	        'ia': cia,
	        'va': cva
	      });
	      vertices.extend([p3x, p3y, p3z]);
	      n += 1;
	    }
	    va = this.va = new Float32Array(vertices);
	    ia = this.ia = new Uint16Array(indices);
	    this.phy_he = [1, 1, 1];
	    curve_index = 0;
	    ref3 = this.calculated_curves;
	    results = [];
	    for (r = 0, len1 = ref3.length; r < len1; r++) {
	      c = ref3[r];
	      if (nodes) {
	        c.nodes = nodes[curve_index];
	      } else {
	        c.nodes = this.get_nodes(curve_index);
	      }
	      c.la = this.get_curve_edges_length(curve_index);
	      c.da = this.get_curve_direction_vectors(curve_index);
	      c.curve = this;
	      c.length = 0;
	      ref4 = c.la;
	      for (s = 0, len2 = ref4.length; s < len2; s++) {
	        e = ref4[s];
	        c.length += e;
	      }
	      results.push(curve_index += 1);
	    }
	    return results;
	  };
	
	  Curve.prototype.closest_point = function(q, scale) {
	    var d1, d2, dp1, dp2, ds, ds_, f, i, i2, ia, k, np1, np2, p, p1, p2, ref1, sum, va, wn, wp;
	    if (scale == null) {
	      scale = [1, 1, 1];
	    }
	    wp = vec3.create();
	    wn = vec3.create();
	    ds = Infinity;
	    p1 = vec3.create();
	    p2 = vec3.create();
	    np1 = vec3.create();
	    np2 = vec3.create();
	    d1 = vec3.create();
	    d2 = vec3.create();
	    p = vec3.create();
	    va = this.va;
	    ia = this.ia;
	    for (i = k = 0, ref1 = Math.floor(ia.length * 0.5); 0 <= ref1 ? k < ref1 : k > ref1; i = 0 <= ref1 ? ++k : --k) {
	      i2 = i * 2;
	      vec3.mul(p1, va.subarray(ia[i2] * 3, ia[i2] * 3 + 3), scale);
	      vec3.mul(p2, va.subarray(ia[i2 + 1] * 3, ia[i2 + 1] * 3 + 3), scale);
	      vec3.sub(np1, p2, p1);
	      vec3.sub(np2, p1, p2);
	      vec3.sub(d1, q, p1);
	      vec3.sub(d2, q, p2);
	      dp1 = vec3.dot(np1, d1);
	      dp2 = vec3.dot(np2, d2);
	      sum = dp1 + dp2;
	      f = max(0, min(1, dp1 / sum));
	      vec3.lerp(p, p1, p2, f);
	      ds_ = vec3.sqrDist(p, q);
	      if (ds_ < ds) {
	        ds = ds_;
	        vec3.copy(wp, p);
	        vec3.sub(wn, p2, p1);
	      }
	    }
	    vec3.normalize(wn, wn);
	    return [wp, wn];
	  };
	
	  Curve.prototype.get_curve_edges_length = function(curve_index) {
	    var curve, i, i2, ia, k, l, p1, p2, ref1, scale, va;
	    scale = this.scale;
	    curve = this.calculated_curves[curve_index];
	    ia = curve.ia;
	    va = curve.va;
	    l = [];
	    for (i = k = 0, ref1 = Math.floor(ia.length * 0.5); 0 <= ref1 ? k < ref1 : k > ref1; i = 0 <= ref1 ? ++k : --k) {
	      p1 = vec3.create();
	      p2 = vec3.create();
	      i2 = i * 2;
	      vec3.mul(p1, va.subarray(ia[i2] * 3, ia[i2] * 3 + 3), scale);
	      vec3.mul(p2, va.subarray(ia[i2 + 1] * 3, ia[i2 + 1] * 3 + 3), scale);
	      l.append(vec3.dist(p1, p2));
	    }
	    return new Float32Array(l);
	  };
	
	  Curve.prototype.get_curve_direction_vectors = function(curve_index) {
	    var curve, i, i2, ia, k, l, p1, p2, ref1, scale, va;
	    scale = this.scale;
	    curve = this.calculated_curves[curve_index];
	    ia = curve.ia;
	    va = curve.va;
	    l = [];
	    for (i = k = 0, ref1 = Math.floor(ia.length * 0.5); 0 <= ref1 ? k < ref1 : k > ref1; i = 0 <= ref1 ? ++k : --k) {
	      p1 = vec3.create();
	      p2 = vec3.create();
	      i2 = i * 2;
	      vec3.mul(p1, va.subarray(ia[i2] * 3, ia[i2] * 3 + 3), scale);
	      vec3.mul(p2, va.subarray(ia[i2 + 1] * 3, ia[i2 + 1] * 3 + 3), scale);
	      l = l.concat(vec3.normalize([], vec3.sub([], p2, p1)));
	    }
	    return new Float32Array(l);
	  };
	
	  Curve.prototype.get_nodes = function(main_curve_index, precission) {
	    var ci, curve, d, i, i2, ii, ii2, k, len, m, main_curve, main_p, nodes, o, p, ref1, ref2, ref3;
	    if (main_curve_index == null) {
	      main_curve_index = 0;
	    }
	    if (precission == null) {
	      precission = 0.0001;
	    }
	    main_curve = this.calculated_curves[main_curve_index];
	    nodes = {};
	    for (i = k = 0, ref1 = Math.floor(main_curve.ia.length * 0.5); 0 <= ref1 ? k < ref1 : k > ref1; i = 0 <= ref1 ? ++k : --k) {
	      i2 = i * 2;
	      main_p = main_curve.va.subarray(main_curve.ia[i2] * 3, main_curve.ia[i2] * 3 + 3);
	      ci = 0;
	      ref2 = this.calculated_curves;
	      for (m = 0, len = ref2.length; m < len; m++) {
	        curve = ref2[m];
	        if (ci !== main_curve_index) {
	          for (ii = o = 0, ref3 = Math.floor(curve.ia.length * 0.5); 0 <= ref3 ? o < ref3 : o > ref3; ii = 0 <= ref3 ? ++o : --o) {
	            ii2 = ii * 2;
	            p = curve.va.subarray(curve.ia[ii2] * 3, curve.ia[ii2] * 3 + 3);
	            d = vec3.dist(main_p, p);
	            if (d < precission) {
	              if (!(indexOf.call(nodes, i) >= 0)) {
	                nodes[i] = [[ci, ii]];
	              } else {
	                nodes[i].append([ci, ii]);
	              }
	            }
	          }
	        }
	      }
	      ci += 1;
	    }
	    return nodes;
	  };
	
	  return Curve;
	
	})(GameObject);
	
	module.exports = {
	  Curve: Curve
	};


/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	var Armature, Bone, BoneConstraints, GameObject, VECTOR_Y, mat2, mat3, mat4, quat, ref, rotation_to, vec2, vec3, vec4,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;
	
	GameObject = __webpack_require__(22).GameObject;
	
	ref = __webpack_require__(8), mat2 = ref.mat2, mat3 = ref.mat3, mat4 = ref.mat4, vec2 = ref.vec2, vec3 = ref.vec3, vec4 = ref.vec4, quat = ref.quat;
	
	VECTOR_Y = new Float32Array([0, 1, 0]);
	
	Bone = (function(superClass) {
	  extend(Bone, superClass);
	
	  function Bone(context) {
	    this.context = context;
	    this.base_position = new Float32Array(3);
	    this.base_rotation = new Float32Array(4);
	    this.position = [0, 0, 0];
	    this.rotation = [0, 0, 0, 1];
	    this.scale = [1, 1, 1];
	    this.final_position = [0, 0, 0];
	    this.final_rotation = [0, 0, 0, 1];
	    this.final_scale = [1, 1, 1];
	    this.matrix = mat4.create();
	    this.ol_matrix = mat4.create();
	    this.inv_rest_matrix = mat4.create();
	    this.deform_id = -1;
	    this.constraints = [];
	  }
	
	  return Bone;
	
	})(GameObject);
	
	Armature = (function(superClass) {
	  extend(Armature, superClass);
	
	  Armature.prototype.type = 'ARMATURE';
	
	  function Armature(context) {
	    this.context = context;
	    Armature.__super__.constructor.call(this, this.context);
	    this.bones = {};
	    this._bone_list = [];
	    this.deform_bones = [];
	    this.unfc = 0;
	    this._m = mat4.create();
	  }
	
	  Armature.prototype.add_bones = function(bones) {
	    var b, bone, c, deform_id, i, k, l, len, len1, len2, len3, n, o, parent, ref1, ref2;
	    for (k = 0, len = bones.length; k < len; k++) {
	      b = bones[k];
	      bone = new Bone(this.context);
	      vec3.copy(bone.base_position, b['position']);
	      vec4.copy(bone.base_rotation, b['rotation']);
	      deform_id = b['deform_id'];
	      if (deform_id !== -1) {
	        bone.deform_id = deform_id;
	        this.deform_bones[deform_id] = bone;
	      }
	      parent = b['parent'];
	      if (parent !== "") {
	        bone.parent = this.bones[parent];
	      }
	      bone.blength = b.blength;
	      this._bone_list.push(bone);
	      this.bones[b.name] = bone;
	    }
	    this.recalculate_bone_matrices();
	    i = 0;
	    ref1 = this._bone_list;
	    for (l = 0, len1 = ref1.length; l < len1; l++) {
	      bone = ref1[l];
	      mat4.invert(bone.inv_rest_matrix, bone.matrix);
	      i += 1;
	    }
	    for (n = 0, len2 = bones.length; n < len2; n++) {
	      b = bones[n];
	      ref2 = b['constraints'];
	      for (o = 0, len3 = ref2.length; o < len3; o++) {
	        c = ref2[o];
	        c[0] = BoneConstraints.prototype[c[0]];
	        c[1] = this.bones[c[1]];
	        c[2] = this.bones[c[2]];
	      }
	      this.bones[b.name].constraints = b['constraints'];
	    }
	  };
	
	  Armature.prototype.recalculate_bone_matrices = function() {
	    var bone, con, k, l, len, len1, len2, m, n, parent, pos, ref1, ref2, ref3, rot, scl;
	    ref1 = this._bone_list;
	    for (k = 0, len = ref1.length; k < len; k++) {
	      bone = ref1[k];
	      pos = bone.final_position;
	      rot = quat.copy(bone.final_rotation, bone.rotation);
	      scl = vec3.copy(bone.final_scale, bone.scale);
	      vec3.transformQuat(pos, bone.position, bone.base_rotation);
	      vec3.add(pos, bone.base_position, pos);
	      quat.mul(rot, bone.base_rotation, bone.rotation);
	      parent = bone.parent;
	      if (parent) {
	        vec3.mul(scl, parent.final_scale, scl);
	        quat.mul(rot, parent.final_rotation, rot);
	        vec3.mul(pos, pos, parent.final_scale);
	        vec3.transformQuat(pos, pos, parent.final_rotation);
	        vec3.add(pos, pos, parent.final_position);
	      }
	      ref2 = bone.constraints;
	      for (l = 0, len1 = ref2.length; l < len1; l++) {
	        con = ref2[l];
	        con[0](con[1], con[2], con[3], con[4]);
	      }
	    }
	    ref3 = this._bone_list;
	    for (n = 0, len2 = ref3.length; n < len2; n++) {
	      bone = ref3[n];
	      m = bone.matrix;
	      pos = bone.final_position;
	      rot = bone.final_rotation;
	      scl = bone.final_scale;
	      mat4.fromRotationTranslation(m, rot, pos);
	      m[0] *= scl[0];
	      m[1] *= scl[0];
	      m[2] *= scl[0];
	      m[4] *= scl[1];
	      m[5] *= scl[1];
	      m[6] *= scl[1];
	      m[8] *= scl[2];
	      m[9] *= scl[2];
	      m[10] *= scl[2];
	      mat4.mul(bone.ol_matrix, m, bone.inv_rest_matrix, m);
	    }
	  };
	
	  Armature.prototype.apply_pose = function(pose) {
	    var b, bname, p;
	    for (bname in pose) {
	      p = pose[bname];
	      b = this.bones[bname];
	      vec3.copy(b.position, p.position);
	      vec4.copy(b.rotation, p.rotation);
	      vec3.copy(b.scale, p.scale);
	    }
	  };
	
	  return Armature;
	
	})(GameObject);
	
	rotation_to = function(out, p1, p2, maxang) {
	  var angle, axis;
	  angle = Math.atan2(vec3.len(vec3.cross([], p1, p2)), vec3.dot(p1, p2));
	  angle = Math.max(-maxang, Math.min(maxang, angle));
	  axis = vec3.cross([], p1, p2);
	  vec3.normalize(axis, axis);
	  quat.setAxisAngle(out, axis, angle);
	  quat.normalize(out, out);
	  return out;
	};
	
	BoneConstraints = (function() {
	  function BoneConstraints() {}
	
	  BoneConstraints.prototype.copy_location = function(owner, target) {
	    return quat.copy(owner.final_position, target.final_position);
	  };
	
	  BoneConstraints.prototype.copy_rotation = function(owner, target) {
	    return quat.copy(owner.final_rotation, target.final_rotation);
	  };
	
	  BoneConstraints.prototype.copy_scale = function(owner, target) {
	    return quat.copy(owner.final_scale, target.final_scale);
	  };
	
	  BoneConstraints.prototype.track_to_y = function(owner, target) {
	    return pass;
	  };
	
	  BoneConstraints.prototype.copy_rotation_one_axis = function(owner, target, axis) {
	    var q, rot, t;
	    rot = target.final_rotation;
	    q = quat.create();
	    if (target.parent) {
	      quat.invert(q, target.parent.final_rotation);
	      rot = quat.mul([], q, rot);
	    }
	    t = vec3.transformQuat(vec3.create(), axis, rot);
	    q = rotation_to(q, t, axis, 9999);
	    quat.mul(q, q, rot);
	    return quat.mul(owner.final_rotation, owner.final_rotation, q);
	  };
	
	  BoneConstraints.prototype.stretch_to = function(owner, target, rest_length, bulge) {
	    var XZ, dist, q, scl, v, v2;
	    dist = vec3.dist(owner.final_position, target.final_position);
	    scl = owner.final_scale;
	    scl[1] *= dist / rest_length;
	    XZ = 1 - Math.sqrt(bulge) + Math.sqrt(bulge * (rest_length / dist));
	    scl[0] *= XZ;
	    scl[2] *= XZ;
	    v = vec3.sub(vec3.create(), target.final_position, owner.final_position);
	    v2 = vec3.transformQuat(vec3.create(), VECTOR_Y, owner.final_rotation);
	    q = rotation_to(quat.create(), v2, v, 9999);
	    return quat.mul(owner.final_rotation, q, owner.final_rotation);
	  };
	
	  BoneConstraints.prototype.ik = function(owner, target, chain_length, num_iterations) {
	    var b, bones, first, i, iteration, j, k, l, len, len1, n, o, original_points, p, points, q, r, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, results, s, tip, tip_bone, u, v, w, x, y;
	    bones = [];
	    tip_bone = b = owner;
	    while (chain_length && b) {
	      bones.push(b);
	      b = b.parent;
	      chain_length -= 1;
	    }
	    first = bones[bones.length - 1].final_position;
	    target = vec3.clone(target.final_position);
	    vec3.sub(target, target, first);
	    points = [];
	    ref1 = bones.slice(0, -1);
	    for (k = 0, len = ref1.length; k < len; k++) {
	      b = ref1[k];
	      points.push(vec3.sub([], b.final_position, first));
	    }
	    tip = vec3.transformQuat([], [0, tip_bone.blength, 0], tip_bone.final_rotation);
	    vec3.add(tip, tip, tip_bone.final_position);
	    vec3.sub(tip, tip, first);
	    points.insert(0, tip);
	    original_points = [];
	    for (l = 0, len1 = points.length; l < len1; l++) {
	      p = points[l];
	      original_points.push(vec3.clone(p));
	    }
	    q = [];
	    for (iteration = n = 0, ref2 = num_iterations; 0 <= ref2 ? n < ref2 : n > ref2; iteration = 0 <= ref2 ? ++n : --n) {
	      vec3.sub(target, target, points[0]);
	      for (i = o = 0, ref3 = points.length - 1; 0 <= ref3 ? o < ref3 : o > ref3; i = 0 <= ref3 ? ++o : --o) {
	        vec3.sub(points[i], points[i], points[i + 1]);
	      }
	      for (i = s = 0, ref4 = points.length; 0 <= ref4 ? s < ref4 : s > ref4; i = 0 <= ref4 ? ++s : --s) {
	        vec3.add(target, target, points[i]);
	        for (j = u = 0, ref5 = i; 0 <= ref5 ? u < ref5 : u > ref5; j = 0 <= ref5 ? ++u : --u) {
	          vec3.add(points[j], points[j], points[i]);
	        }
	        rotation_to(q, points[0], target, 0.4);
	        for (j = w = 0, ref6 = i + 1; 0 <= ref6 ? w < ref6 : w > ref6; j = 0 <= ref6 ? ++w : --w) {
	          vec3.transformQuat(points[j], points[j], q);
	        }
	      }
	    }
	    for (i = x = 0, ref7 = points.length; 0 <= ref7 ? x < ref7 : x > ref7; i = 0 <= ref7 ? ++x : --x) {
	      vec3.add(points[i], points[i], first);
	      vec3.add(original_points[i], original_points[i], first);
	    }
	    v = vec3.create();
	    points.push(first);
	    original_points.push(first);
	    points.push([0, 0, 0]);
	    original_points.push([0, 0, 0]);
	    results = [];
	    for (i = y = 0, ref8 = points.length - 2; 0 <= ref8 ? y < ref8 : y > ref8; i = 0 <= ref8 ? ++y : --y) {
	      vec3.copy(bones[i].final_position, points[i + 1]);
	      vec3.sub(points[i], points[i], points[i + 1]);
	      vec3.sub(original_points[i], original_points[i], original_points[i + 1]);
	      rotation_to(q, original_points[i], points[i], 100);
	      r = bones[i].final_rotation;
	      results.push(quat.mul(r, q, r));
	    }
	    return results;
	  };
	
	  return BoneConstraints;
	
	})();
	
	module.exports = {
	  Armature: Armature,
	  Bone: Bone,
	  BoneConstraints: BoneConstraints
	};


/***/ },
/* 34 */
/***/ function(module, exports) {

	module.exports = "\nvar Crunch = (function() {\nvar Module = this;\n// Note: For maximum-speed code, see \"Optimizing Code\" on the Emscripten wiki, https://github.com/kripken/emscripten/wiki/Optimizing-Code\n// Note: Some Emscripten settings may limit the speed of the generated code.\n// The Module object: Our interface to the outside world. We import\n// and export values on it, and do the work to get that through\n// closure compiler if necessary. There are various ways Module can be used:\n// 1. Not defined. We create it here\n// 2. A function parameter, function(Module) { ..generated code.. }\n// 3. pre-run appended it, var Module = {}; ..generated code..\n// 4. External script tag defines var Module.\n// We need to do an eval in order to handle the closure compiler\n// case, where this code here is minified but Module was defined\n// elsewhere (e.g. case 4 above). We also need to check if Module\n// already exists (e.g. case 3 above).\n// Note that if you want to run closure, and also to use Module\n// after the generated code, you will need to define   var Module = {};\n// before the code. Then that object will be used in the code, and you\n// can continue to use Module afterwards as well.\nvar Module;\nif (!Module) Module = eval('(function() { try { return Module || {} } catch(e) { return {} } })()');\n\n// Sometimes an existing Module object exists with properties\n// meant to overwrite the default module functionality. Here\n// we collect those properties and reapply _after_ we configure\n// the current environment's defaults to avoid having to be so\n// defensive during initialization.\nvar moduleOverrides = {};\nfor (var key in Module) {\n  if (Module.hasOwnProperty(key)) {\n    moduleOverrides[key] = Module[key];\n  }\n}\n\n// The environment setup code below is customized to use Module.\n// *** Environment setup code ***\nvar ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';\nvar ENVIRONMENT_IS_WEB = typeof window === 'object';\nvar ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';\nvar ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;\n\nif (ENVIRONMENT_IS_NODE) {\n  // Expose functionality in the same simple way that the shells work\n  // Note that we pollute the global namespace here, otherwise we break in node\n  if (!Module['print']) Module['print'] = function print(x) {\n    process['stdout'].write(x + '\\n');\n  };\n  if (!Module['printErr']) Module['printErr'] = function printErr(x) {\n    process['stderr'].write(x + '\\n');\n  };\n\n  var nodeFS = require('fs');\n  var nodePath = require('path');\n\n  Module['read'] = function read(filename, binary) {\n    filename = nodePath['normalize'](filename);\n    var ret = nodeFS['readFileSync'](filename);\n    // The path is absolute if the normalized version is the same as the resolved.\n    if (!ret && filename != nodePath['resolve'](filename)) {\n      filename = path.join(__dirname, '..', 'src', filename);\n      ret = nodeFS['readFileSync'](filename);\n    }\n    if (ret && !binary) ret = ret.toString();\n    return ret;\n  };\n\n  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };\n\n  Module['load'] = function load(f) {\n    globalEval(read(f));\n  };\n\n  Module['arguments'] = process['argv'].slice(2);\n\n  module['exports'] = Module;\n}\nelse if (ENVIRONMENT_IS_SHELL) {\n  if (!Module['print']) Module['print'] = print;\n  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm\n\n  if (typeof read != 'undefined') {\n    Module['read'] = read;\n  } else {\n    Module['read'] = function read() { throw 'no read() available (jsc?)' };\n  }\n\n  Module['readBinary'] = function readBinary(f) {\n    return read(f, 'binary');\n  };\n\n  if (typeof scriptArgs != 'undefined') {\n    Module['arguments'] = scriptArgs;\n  } else if (typeof arguments != 'undefined') {\n    Module['arguments'] = arguments;\n  }\n\n  this['Module'] = Module;\n\n  eval(\"if (typeof gc === 'function' && gc.toString().indexOf('[native code]') > 0) var gc = undefined\"); // wipe out the SpiderMonkey shell 'gc' function, which can confuse closure (uses it as a minified name, and it is then initted to a non-falsey value unexpectedly)\n}\nelse if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {\n  Module['read'] = function read(url) {\n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', url, false);\n    xhr.send(null);\n    return xhr.responseText;\n  };\n\n  if (typeof arguments != 'undefined') {\n    Module['arguments'] = arguments;\n  }\n\n  if (typeof console !== 'undefined') {\n    if (!Module['print']) Module['print'] = function print(x) {\n      console.log(x);\n    };\n    if (!Module['printErr']) Module['printErr'] = function printErr(x) {\n      console.log(x);\n    };\n  } else {\n    // Probably a worker, and without console.log. We can do very little here...\n    var TRY_USE_DUMP = false;\n    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== \"undefined\") ? (function(x) {\n      dump(x);\n    }) : (function(x) {\n      // self.postMessage(x); // enable this if you want stdout to be sent as messages\n    }));\n  }\n\n  if (ENVIRONMENT_IS_WEB) {\n    this['Module'] = Module;\n  } else {\n    Module['load'] = importScripts;\n  }\n}\nelse {\n  // Unreachable because SHELL is dependant on the others\n  throw 'Unknown runtime environment. Where are we?';\n}\n\nfunction globalEval(x) {\n  eval.call(null, x);\n}\nif (!Module['load'] == 'undefined' && Module['read']) {\n  Module['load'] = function load(f) {\n    globalEval(Module['read'](f));\n  };\n}\nif (!Module['print']) {\n  Module['print'] = function(){};\n}\nif (!Module['printErr']) {\n  Module['printErr'] = Module['print'];\n}\nif (!Module['arguments']) {\n  Module['arguments'] = [];\n}\n// *** Environment setup code ***\n\n// Closure helpers\nModule.print = Module['print'];\nModule.printErr = Module['printErr'];\n\n// Callbacks\nModule['preRun'] = [];\nModule['postRun'] = [];\n\n// Merge back in the overrides\nfor (var key in moduleOverrides) {\n  if (moduleOverrides.hasOwnProperty(key)) {\n    Module[key] = moduleOverrides[key];\n  }\n}\n\n\n\n// === Auto-generated preamble library stuff ===\n\n//========================================\n// Runtime code shared with compiler\n//========================================\n\nvar Runtime = {\n  stackSave: function () {\n    return STACKTOP;\n  },\n  stackRestore: function (stackTop) {\n    STACKTOP = stackTop;\n  },\n  forceAlign: function (target, quantum) {\n    quantum = quantum || 4;\n    if (quantum == 1) return target;\n    if (isNumber(target) && isNumber(quantum)) {\n      return Math.ceil(target/quantum)*quantum;\n    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {\n      return '(((' +target + ')+' + (quantum-1) + ')&' + -quantum + ')';\n    }\n    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;\n  },\n  isNumberType: function (type) {\n    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;\n  },\n  isPointerType: function isPointerType(type) {\n  return type[type.length-1] == '*';\n},\n  isStructType: function isStructType(type) {\n  if (isPointerType(type)) return false;\n  if (isArrayType(type)) return true;\n  if (/<?\\{ ?[^}]* ?\\}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types\n  // See comment in isStructPointerType()\n  return type[0] == '%';\n},\n  INT_TYPES: {\"i1\":0,\"i8\":0,\"i16\":0,\"i32\":0,\"i64\":0},\n  FLOAT_TYPES: {\"float\":0,\"double\":0},\n  or64: function (x, y) {\n    var l = (x | 0) | (y | 0);\n    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;\n    return l + h;\n  },\n  and64: function (x, y) {\n    var l = (x | 0) & (y | 0);\n    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;\n    return l + h;\n  },\n  xor64: function (x, y) {\n    var l = (x | 0) ^ (y | 0);\n    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;\n    return l + h;\n  },\n  getNativeTypeSize: function (type) {\n    switch (type) {\n      case 'i1': case 'i8': return 1;\n      case 'i16': return 2;\n      case 'i32': return 4;\n      case 'i64': return 8;\n      case 'float': return 4;\n      case 'double': return 8;\n      default: {\n        if (type[type.length-1] === '*') {\n          return Runtime.QUANTUM_SIZE; // A pointer\n        } else if (type[0] === 'i') {\n          var bits = parseInt(type.substr(1));\n          assert(bits % 8 === 0);\n          return bits/8;\n        } else {\n          return 0;\n        }\n      }\n    }\n  },\n  getNativeFieldSize: function (type) {\n    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);\n  },\n  dedup: function dedup(items, ident) {\n  var seen = {};\n  if (ident) {\n    return items.filter(function(item) {\n      if (seen[item[ident]]) return false;\n      seen[item[ident]] = true;\n      return true;\n    });\n  } else {\n    return items.filter(function(item) {\n      if (seen[item]) return false;\n      seen[item] = true;\n      return true;\n    });\n  }\n},\n  set: function set() {\n  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;\n  var ret = {};\n  for (var i = 0; i < args.length; i++) {\n    ret[args[i]] = 0;\n  }\n  return ret;\n},\n  STACK_ALIGN: 8,\n  getAlignSize: function (type, size, vararg) {\n    // we align i64s and doubles on 64-bit boundaries, unlike x86\n    if (vararg) return 8;\n    if (!vararg && (type == 'i64' || type == 'double')) return 8;\n    if (!type) return Math.min(size, 8); // align structures internally to 64 bits\n    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);\n  },\n  calculateStructAlignment: function calculateStructAlignment(type) {\n    type.flatSize = 0;\n    type.alignSize = 0;\n    var diffs = [];\n    var prev = -1;\n    var index = 0;\n    type.flatIndexes = type.fields.map(function(field) {\n      index++;\n      var size, alignSize;\n      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {\n        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.\n        alignSize = Runtime.getAlignSize(field, size);\n      } else if (Runtime.isStructType(field)) {\n        if (field[1] === '0') {\n          // this is [0 x something]. When inside another structure like here, it must be at the end,\n          // and it adds no size\n          // XXX this happens in java-nbody for example... assert(index === type.fields.length, 'zero-length in the middle!');\n          size = 0;\n          if (Types.types[field]) {\n            alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);\n          } else {\n            alignSize = type.alignSize || QUANTUM_SIZE;\n          }\n        } else {\n          size = Types.types[field].flatSize;\n          alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);\n        }\n      } else if (field[0] == 'b') {\n        // bN, large number field, like a [N x i8]\n        size = field.substr(1)|0;\n        alignSize = 1;\n      } else if (field[0] === '<') {\n        // vector type\n        size = alignSize = Types.types[field].flatSize; // fully aligned\n      } else if (field[0] === 'i') {\n        // illegal integer field, that could not be legalized because it is an internal structure field\n        // it is ok to have such fields, if we just use them as markers of field size and nothing more complex\n        size = alignSize = parseInt(field.substr(1))/8;\n        assert(size % 1 === 0, 'cannot handle non-byte-size field ' + field);\n      } else {\n        assert(false, 'invalid type for calculateStructAlignment');\n      }\n      if (type.packed) alignSize = 1;\n      type.alignSize = Math.max(type.alignSize, alignSize);\n      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory\n      type.flatSize = curr + size;\n      if (prev >= 0) {\n        diffs.push(curr-prev);\n      }\n      prev = curr;\n      return curr;\n    });\n    if (type.name_ && type.name_[0] === '[') {\n      // arrays have 2 elements, so we get the proper difference. then we scale here. that way we avoid\n      // allocating a potentially huge array for [999999 x i8] etc.\n      type.flatSize = parseInt(type.name_.substr(1))*type.flatSize/2;\n    }\n    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);\n    if (diffs.length == 0) {\n      type.flatFactor = type.flatSize;\n    } else if (Runtime.dedup(diffs).length == 1) {\n      type.flatFactor = diffs[0];\n    }\n    type.needsFlattening = (type.flatFactor != 1);\n    return type.flatIndexes;\n  },\n  generateStructInfo: function (struct, typeName, offset) {\n    var type, alignment;\n    if (typeName) {\n      offset = offset || 0;\n      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];\n      if (!type) return null;\n      if (type.fields.length != struct.length) {\n        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');\n        return null;\n      }\n      alignment = type.flatIndexes;\n    } else {\n      var type = { fields: struct.map(function(item) { return item[0] }) };\n      alignment = Runtime.calculateStructAlignment(type);\n    }\n    var ret = {\n      __size__: type.flatSize\n    };\n    if (typeName) {\n      struct.forEach(function(item, i) {\n        if (typeof item === 'string') {\n          ret[item] = alignment[i] + offset;\n        } else {\n          // embedded struct\n          var key;\n          for (var k in item) key = k;\n          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);\n        }\n      });\n    } else {\n      struct.forEach(function(item, i) {\n        ret[item[1]] = alignment[i];\n      });\n    }\n    return ret;\n  },\n  dynCall: function (sig, ptr, args) {\n    if (args && args.length) {\n      if (!args.splice) args = Array.prototype.slice.call(args);\n      args.splice(0, 0, ptr);\n      return Module['dynCall_' + sig].apply(null, args);\n    } else {\n      return Module['dynCall_' + sig].call(null, ptr);\n    }\n  },\n  functionPointers: [],\n  addFunction: function (func) {\n    for (var i = 0; i < Runtime.functionPointers.length; i++) {\n      if (!Runtime.functionPointers[i]) {\n        Runtime.functionPointers[i] = func;\n        return 2*(1 + i);\n      }\n    }\n    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';\n  },\n  removeFunction: function (index) {\n    Runtime.functionPointers[(index-2)/2] = null;\n  },\n  getAsmConst: function (code, numArgs) {\n    // code is a constant string on the heap, so we can cache these\n    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};\n    var func = Runtime.asmConstCache[code];\n    if (func) return func;\n    var args = [];\n    for (var i = 0; i < numArgs; i++) {\n      args.push(String.fromCharCode(36) + i); // $0, $1 etc\n    }\n    code = Pointer_stringify(code);\n    if (code[0] === '\"') {\n      // tolerate EM_ASM(\"..code..\") even though EM_ASM(..code..) is correct\n      if (code.indexOf('\"', 1) === code.length-1) {\n        code = code.substr(1, code.length-2);\n      } else {\n        // something invalid happened, e.g. EM_ASM(\"..code($0)..\", input)\n        abort('invalid EM_ASM input |' + code + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');\n      }\n    }\n    return Runtime.asmConstCache[code] = eval('(function(' + args.join(',') + '){ ' + code + ' })'); // new Function does not allow upvars in node\n  },\n  warnOnce: function (text) {\n    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};\n    if (!Runtime.warnOnce.shown[text]) {\n      Runtime.warnOnce.shown[text] = 1;\n      Module.printErr(text);\n    }\n  },\n  funcWrappers: {},\n  getFuncWrapper: function (func, sig) {\n    assert(sig);\n    if (!Runtime.funcWrappers[func]) {\n      Runtime.funcWrappers[func] = function dynCall_wrapper() {\n        return Runtime.dynCall(sig, func, arguments);\n      };\n    }\n    return Runtime.funcWrappers[func];\n  },\n  UTF8Processor: function () {\n    var buffer = [];\n    var needed = 0;\n    this.processCChar = function (code) {\n      code = code & 0xFF;\n\n      if (buffer.length == 0) {\n        if ((code & 0x80) == 0x00) {        // 0xxxxxxx\n          return String.fromCharCode(code);\n        }\n        buffer.push(code);\n        if ((code & 0xE0) == 0xC0) {        // 110xxxxx\n          needed = 1;\n        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx\n          needed = 2;\n        } else {                            // 11110xxx\n          needed = 3;\n        }\n        return '';\n      }\n\n      if (needed) {\n        buffer.push(code);\n        needed--;\n        if (needed > 0) return '';\n      }\n\n      var c1 = buffer[0];\n      var c2 = buffer[1];\n      var c3 = buffer[2];\n      var c4 = buffer[3];\n      var ret;\n      if (buffer.length == 2) {\n        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));\n      } else if (buffer.length == 3) {\n        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));\n      } else {\n        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |\n                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);\n        ret = String.fromCharCode(\n          Math.floor((codePoint - 0x10000) / 0x400) + 0xD800,\n          (codePoint - 0x10000) % 0x400 + 0xDC00);\n      }\n      buffer.length = 0;\n      return ret;\n    }\n    this.processJSString = function processJSString(string) {\n      string = unescape(encodeURIComponent(string));\n      var ret = [];\n      for (var i = 0; i < string.length; i++) {\n        ret.push(string.charCodeAt(i));\n      }\n      return ret;\n    }\n  },\n  getCompilerSetting: function (name) {\n    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';\n  },\n  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+7)&-8); return ret; },\n  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = (((STATICTOP)+7)&-8); return ret; },\n  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + size)|0;DYNAMICTOP = (((DYNAMICTOP)+7)&-8); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },\n  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 8))*(quantum ? quantum : 8); return ret; },\n  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },\n  GLOBAL_BASE: 8,\n  QUANTUM_SIZE: 4,\n  __dummy__: 0\n}\n\n\nModule['Runtime'] = Runtime;\n\n\n\n\n\n\n\n\n\n//========================================\n// Runtime essentials\n//========================================\n\nvar __THREW__ = 0; // Used in checking for thrown exceptions.\n\nvar ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()\nvar EXITSTATUS = 0;\n\nvar undef = 0;\n// tempInt is used for 32-bit signed values or smaller. tempBigInt is used\n// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt\nvar tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;\nvar tempI64, tempI64b;\nvar tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;\n\nfunction assert(condition, text) {\n  if (!condition) {\n    abort('Assertion failed: ' + text);\n  }\n}\n\nvar globalScope = this;\n\n// C calling interface. A convenient way to call C functions (in C files, or\n// defined with extern \"C\").\n//\n// Note: LLVM optimizations can inline and remove functions, after which you will not be\n//       able to call them. Closure can also do so. To avoid that, add your function to\n//       the exports using something like\n//\n//         -s EXPORTED_FUNCTIONS='[\"_main\", \"_myfunc\"]'\n//\n// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern \"C\")\n// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and\n//                   'array' for JavaScript arrays and typed arrays; note that arrays are 8-bit).\n// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,\n//                   except that 'array' is not possible (there is no way for us to know the length of the array)\n// @param args       An array of the arguments to the function, as native JS values (as in returnType)\n//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).\n// @return           The return value, as a native JS value (as in returnType)\nfunction ccall(ident, returnType, argTypes, args) {\n  return ccallFunc(getCFunc(ident), returnType, argTypes, args);\n}\nModule[\"ccall\"] = ccall;\n\n// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)\nfunction getCFunc(ident) {\n  try {\n    var func = Module['_' + ident]; // closure exported function\n    if (!func) func = eval('_' + ident); // explicit lookup\n  } catch(e) {\n  }\n  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');\n  return func;\n}\n\n// Internal function that does a C call using a function, not an identifier\nfunction ccallFunc(func, returnType, argTypes, args) {\n  var stack = 0;\n  function toC(value, type) {\n    if (type == 'string') {\n      if (value === null || value === undefined || value === 0) return 0; // null string\n      value = intArrayFromString(value);\n      type = 'array';\n    }\n    if (type == 'array') {\n      if (!stack) stack = Runtime.stackSave();\n      var ret = Runtime.stackAlloc(value.length);\n      writeArrayToMemory(value, ret);\n      return ret;\n    }\n    return value;\n  }\n  function fromC(value, type) {\n    if (type == 'string') {\n      return Pointer_stringify(value);\n    }\n    assert(type != 'array');\n    return value;\n  }\n  var i = 0;\n  var cArgs = args ? args.map(function(arg) {\n    return toC(arg, argTypes[i++]);\n  }) : [];\n  var ret = fromC(func.apply(null, cArgs), returnType);\n  if (stack) Runtime.stackRestore(stack);\n  return ret;\n}\n\n// Returns a native JS wrapper for a C function. This is similar to ccall, but\n// returns a function you can call repeatedly in a normal way. For example:\n//\n//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);\n//   alert(my_function(5, 22));\n//   alert(my_function(99, 12));\n//\nfunction cwrap(ident, returnType, argTypes) {\n  var func = getCFunc(ident);\n  return function() {\n    return ccallFunc(func, returnType, argTypes, Array.prototype.slice.call(arguments));\n  }\n}\nModule[\"cwrap\"] = cwrap;\n\n// Sets a value in memory in a dynamic way at run-time. Uses the\n// type data. This is the same as makeSetValue, except that\n// makeSetValue is done at compile-time and generates the needed\n// code then, whereas this function picks the right code at\n// run-time.\n// Note that setValue and getValue only do *aligned* writes and reads!\n// Note that ccall uses JS types as for defining types, while setValue and\n// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation\nfunction setValue(ptr, value, type, noSafe) {\n  type = type || 'i8';\n  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit\n    switch(type) {\n      case 'i1': HEAP8[(ptr)]=value; break;\n      case 'i8': HEAP8[(ptr)]=value; break;\n      case 'i16': HEAP16[((ptr)>>1)]=value; break;\n      case 'i32': HEAP32[((ptr)>>2)]=value; break;\n      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;\n      case 'float': HEAPF32[((ptr)>>2)]=value; break;\n      case 'double': HEAPF64[((ptr)>>3)]=value; break;\n      default: abort('invalid type for setValue: ' + type);\n    }\n}\nModule['setValue'] = setValue;\n\n// Parallel to setValue.\nfunction getValue(ptr, type, noSafe) {\n  type = type || 'i8';\n  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit\n    switch(type) {\n      case 'i1': return HEAP8[(ptr)];\n      case 'i8': return HEAP8[(ptr)];\n      case 'i16': return HEAP16[((ptr)>>1)];\n      case 'i32': return HEAP32[((ptr)>>2)];\n      case 'i64': return HEAP32[((ptr)>>2)];\n      case 'float': return HEAPF32[((ptr)>>2)];\n      case 'double': return HEAPF64[((ptr)>>3)];\n      default: abort('invalid type for setValue: ' + type);\n    }\n  return null;\n}\nModule['getValue'] = getValue;\n\nvar ALLOC_NORMAL = 0; // Tries to use _malloc()\nvar ALLOC_STACK = 1; // Lives for the duration of the current function call\nvar ALLOC_STATIC = 2; // Cannot be freed\nvar ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk\nvar ALLOC_NONE = 4; // Do not allocate\nModule['ALLOC_NORMAL'] = ALLOC_NORMAL;\nModule['ALLOC_STACK'] = ALLOC_STACK;\nModule['ALLOC_STATIC'] = ALLOC_STATIC;\nModule['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;\nModule['ALLOC_NONE'] = ALLOC_NONE;\n\n// allocate(): This is for internal use. You can use it yourself as well, but the interface\n//             is a little tricky (see docs right below). The reason is that it is optimized\n//             for multiple syntaxes to save space in generated code. So you should\n//             normally not use allocate(), and instead allocate memory using _malloc(),\n//             initialize it with setValue(), and so forth.\n// @slab: An array of data, or a number. If a number, then the size of the block to allocate,\n//        in *bytes* (note that this is sometimes confusing: the next parameter does not\n//        affect this!)\n// @types: Either an array of types, one for each byte (or 0 if no type at that position),\n//         or a single type which is used for the entire block. This only matters if there\n//         is initial data - if @slab is a number, then this does not matter at all and is\n//         ignored.\n// @allocator: How to allocate memory, see ALLOC_*\nfunction allocate(slab, types, allocator, ptr) {\n  var zeroinit, size;\n  if (typeof slab === 'number') {\n    zeroinit = true;\n    size = slab;\n  } else {\n    zeroinit = false;\n    size = slab.length;\n  }\n\n  var singleType = typeof types === 'string' ? types : null;\n\n  var ret;\n  if (allocator == ALLOC_NONE) {\n    ret = ptr;\n  } else {\n    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));\n  }\n\n  if (zeroinit) {\n    var ptr = ret, stop;\n    assert((ret & 3) == 0);\n    stop = ret + (size & ~3);\n    for (; ptr < stop; ptr += 4) {\n      HEAP32[((ptr)>>2)]=0;\n    }\n    stop = ret + size;\n    while (ptr < stop) {\n      HEAP8[((ptr++)|0)]=0;\n    }\n    return ret;\n  }\n\n  if (singleType === 'i8') {\n    if (slab.subarray || slab.slice) {\n      HEAPU8.set(slab, ret);\n    } else {\n      HEAPU8.set(new Uint8Array(slab), ret);\n    }\n    return ret;\n  }\n\n  var i = 0, type, typeSize, previousType;\n  while (i < size) {\n    var curr = slab[i];\n\n    if (typeof curr === 'function') {\n      curr = Runtime.getFunctionIndex(curr);\n    }\n\n    type = singleType || types[i];\n    if (type === 0) {\n      i++;\n      continue;\n    }\n\n    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later\n\n    setValue(ret+i, curr, type);\n\n    // no need to look up size unless type changes, so cache it\n    if (previousType !== type) {\n      typeSize = Runtime.getNativeTypeSize(type);\n      previousType = type;\n    }\n    i += typeSize;\n  }\n\n  return ret;\n}\nModule['allocate'] = allocate;\n\nfunction Pointer_stringify(ptr, /* optional */ length) {\n  // TODO: use TextDecoder\n  // Find the length, and check for UTF while doing so\n  var hasUtf = false;\n  var t;\n  var i = 0;\n  while (1) {\n    t = HEAPU8[(((ptr)+(i))|0)];\n    if (t >= 128) hasUtf = true;\n    else if (t == 0 && !length) break;\n    i++;\n    if (length && i == length) break;\n  }\n  if (!length) length = i;\n\n  var ret = '';\n\n  if (!hasUtf) {\n    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack\n    var curr;\n    while (length > 0) {\n      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));\n      ret = ret ? ret + curr : curr;\n      ptr += MAX_CHUNK;\n      length -= MAX_CHUNK;\n    }\n    return ret;\n  }\n\n  var utf8 = new Runtime.UTF8Processor();\n  for (i = 0; i < length; i++) {\n    t = HEAPU8[(((ptr)+(i))|0)];\n    ret += utf8.processCChar(t);\n  }\n  return ret;\n}\nModule['Pointer_stringify'] = Pointer_stringify;\n\n// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns\n// a copy of that string as a Javascript String object.\nfunction UTF16ToString(ptr) {\n  var i = 0;\n\n  var str = '';\n  while (1) {\n    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];\n    if (codeUnit == 0)\n      return str;\n    ++i;\n    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.\n    str += String.fromCharCode(codeUnit);\n  }\n}\nModule['UTF16ToString'] = UTF16ToString;\n\n// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',\n// null-terminated and encoded in UTF16LE form. The copy will require at most (str.length*2+1)*2 bytes of space in the HEAP.\nfunction stringToUTF16(str, outPtr) {\n  for(var i = 0; i < str.length; ++i) {\n    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.\n    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate\n    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;\n  }\n  // Null-terminate the pointer to the HEAP.\n  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;\n}\nModule['stringToUTF16'] = stringToUTF16;\n\n// Given a pointer 'ptr' to a null-terminated UTF32LE-encoded string in the emscripten HEAP, returns\n// a copy of that string as a Javascript String object.\nfunction UTF32ToString(ptr) {\n  var i = 0;\n\n  var str = '';\n  while (1) {\n    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];\n    if (utf32 == 0)\n      return str;\n    ++i;\n    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.\n    if (utf32 >= 0x10000) {\n      var ch = utf32 - 0x10000;\n      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));\n    } else {\n      str += String.fromCharCode(utf32);\n    }\n  }\n}\nModule['UTF32ToString'] = UTF32ToString;\n\n// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',\n// null-terminated and encoded in UTF32LE form. The copy will require at most (str.length+1)*4 bytes of space in the HEAP,\n// but can use less, since str.length does not return the number of characters in the string, but the number of UTF-16 code units in the string.\nfunction stringToUTF32(str, outPtr) {\n  var iChar = 0;\n  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {\n    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.\n    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate\n    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {\n      var trailSurrogate = str.charCodeAt(++iCodeUnit);\n      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);\n    }\n    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;\n    ++iChar;\n  }\n  // Null-terminate the pointer to the HEAP.\n  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;\n}\nModule['stringToUTF32'] = stringToUTF32;\n\nfunction demangle(func) {\n  var i = 3;\n  // params, etc.\n  var basicTypes = {\n    'v': 'void',\n    'b': 'bool',\n    'c': 'char',\n    's': 'short',\n    'i': 'int',\n    'l': 'long',\n    'f': 'float',\n    'd': 'double',\n    'w': 'wchar_t',\n    'a': 'signed char',\n    'h': 'unsigned char',\n    't': 'unsigned short',\n    'j': 'unsigned int',\n    'm': 'unsigned long',\n    'x': 'long long',\n    'y': 'unsigned long long',\n    'z': '...'\n  };\n  var subs = [];\n  var first = true;\n  function dump(x) {\n    //return;\n    if (x) Module.print(x);\n    Module.print(func);\n    var pre = '';\n    for (var a = 0; a < i; a++) pre += ' ';\n    Module.print (pre + '^');\n  }\n  function parseNested() {\n    i++;\n    if (func[i] === 'K') i++; // ignore const\n    var parts = [];\n    while (func[i] !== 'E') {\n      if (func[i] === 'S') { // substitution\n        i++;\n        var next = func.indexOf('_', i);\n        var num = func.substring(i, next) || 0;\n        parts.push(subs[num] || '?');\n        i = next+1;\n        continue;\n      }\n      if (func[i] === 'C') { // constructor\n        parts.push(parts[parts.length-1]);\n        i += 2;\n        continue;\n      }\n      var size = parseInt(func.substr(i));\n      var pre = size.toString().length;\n      if (!size || !pre) { i--; break; } // counter i++ below us\n      var curr = func.substr(i + pre, size);\n      parts.push(curr);\n      subs.push(curr);\n      i += pre + size;\n    }\n    i++; // skip E\n    return parts;\n  }\n  function parse(rawList, limit, allowVoid) { // main parser\n    limit = limit || Infinity;\n    var ret = '', list = [];\n    function flushList() {\n      return '(' + list.join(', ') + ')';\n    }\n    var name;\n    if (func[i] === 'N') {\n      // namespaced N-E\n      name = parseNested().join('::');\n      limit--;\n      if (limit === 0) return rawList ? [name] : name;\n    } else {\n      // not namespaced\n      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'\n      var size = parseInt(func.substr(i));\n      if (size) {\n        var pre = size.toString().length;\n        name = func.substr(i + pre, size);\n        i += pre + size;\n      }\n    }\n    first = false;\n    if (func[i] === 'I') {\n      i++;\n      var iList = parse(true);\n      var iRet = parse(true, 1, true);\n      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';\n    } else {\n      ret = name;\n    }\n    paramLoop: while (i < func.length && limit-- > 0) {\n      //dump('paramLoop');\n      var c = func[i++];\n      if (c in basicTypes) {\n        list.push(basicTypes[c]);\n      } else {\n        switch (c) {\n          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer\n          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference\n          case 'L': { // literal\n            i++; // skip basic type\n            var end = func.indexOf('E', i);\n            var size = end - i;\n            list.push(func.substr(i, size));\n            i += size + 2; // size + 'EE'\n            break;\n          }\n          case 'A': { // array\n            var size = parseInt(func.substr(i));\n            i += size.toString().length;\n            if (func[i] !== '_') throw '?';\n            i++; // skip _\n            list.push(parse(true, 1, true)[0] + ' [' + size + ']');\n            break;\n          }\n          case 'E': break paramLoop;\n          default: ret += '?' + c; break paramLoop;\n        }\n      }\n    }\n    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)\n    return rawList ? list : ret + flushList();\n  }\n  try {\n    // Special-case the entry point, since its name differs from other name mangling.\n    if (func == 'Object._main' || func == '_main') {\n      return 'main()';\n    }\n    if (typeof func === 'number') func = Pointer_stringify(func);\n    if (func[0] !== '_') return func;\n    if (func[1] !== '_') return func; // C function\n    if (func[2] !== 'Z') return func;\n    switch (func[3]) {\n      case 'n': return 'operator new()';\n      case 'd': return 'operator delete()';\n    }\n    return parse();\n  } catch(e) {\n    return func;\n  }\n}\n\nfunction demangleAll(text) {\n  return text.replace(/__Z[\\w\\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });\n}\n\nfunction stackTrace() {\n  var stack = new Error().stack;\n  return stack ? demangleAll(stack) : '(no stack trace available)'; // Stack trace is not available at least on IE10 and Safari 6.\n}\n\n// Memory management\n\nvar PAGE_SIZE = 4096;\nfunction alignMemoryPage(x) {\n  return (x+4095)&-4096;\n}\n\nvar HEAP;\nvar HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;\n\nvar STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area\nvar STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area\nvar DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk\n\nfunction enlargeMemory() {\n  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');\n}\n\nvar TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;\nvar TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;\nvar FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;\n\nvar totalMemory = 4096;\nwhile (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {\n  if (totalMemory < 16*1024*1024) {\n    totalMemory *= 2;\n  } else {\n    totalMemory += 16*1024*1024\n  }\n}\nif (totalMemory !== TOTAL_MEMORY) {\n  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be more reasonable');\n  TOTAL_MEMORY = totalMemory;\n}\n\n// Initialize the runtime's memory\n// check for full engine support (use string 'subarray' to avoid closure compiler confusion)\nassert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),\n       'JS engine does not provide full typed array support');\n\nvar buffer = new ArrayBuffer(TOTAL_MEMORY);\nHEAP8 = new Int8Array(buffer);\nHEAP16 = new Int16Array(buffer);\nHEAP32 = new Int32Array(buffer);\nHEAPU8 = new Uint8Array(buffer);\nHEAPU16 = new Uint16Array(buffer);\nHEAPU32 = new Uint32Array(buffer);\nHEAPF32 = new Float32Array(buffer);\nHEAPF64 = new Float64Array(buffer);\n\n// Endianness check (note: assumes compiler arch was little-endian)\nHEAP32[0] = 255;\nassert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');\n\nModule['HEAP'] = HEAP;\nModule['HEAP8'] = HEAP8;\nModule['HEAP16'] = HEAP16;\nModule['HEAP32'] = HEAP32;\nModule['HEAPU8'] = HEAPU8;\nModule['HEAPU16'] = HEAPU16;\nModule['HEAPU32'] = HEAPU32;\nModule['HEAPF32'] = HEAPF32;\nModule['HEAPF64'] = HEAPF64;\n\nfunction callRuntimeCallbacks(callbacks) {\n  while(callbacks.length > 0) {\n    var callback = callbacks.shift();\n    if (typeof callback == 'function') {\n      callback();\n      continue;\n    }\n    var func = callback.func;\n    if (typeof func === 'number') {\n      if (callback.arg === undefined) {\n        Runtime.dynCall('v', func);\n      } else {\n        Runtime.dynCall('vi', func, [callback.arg]);\n      }\n    } else {\n      func(callback.arg === undefined ? null : callback.arg);\n    }\n  }\n}\n\nvar __ATPRERUN__  = []; // functions called before the runtime is initialized\nvar __ATINIT__    = []; // functions called during startup\nvar __ATMAIN__    = []; // functions called when main() is to be run\nvar __ATEXIT__    = []; // functions called during shutdown\nvar __ATPOSTRUN__ = []; // functions called after the runtime has exited\n\nvar runtimeInitialized = false;\n\nfunction preRun() {\n  // compatibility - merge in anything from Module['preRun'] at this time\n  if (Module['preRun']) {\n    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];\n    while (Module['preRun'].length) {\n      addOnPreRun(Module['preRun'].shift());\n    }\n  }\n  callRuntimeCallbacks(__ATPRERUN__);\n}\n\nfunction ensureInitRuntime() {\n  if (runtimeInitialized) return;\n  runtimeInitialized = true;\n  callRuntimeCallbacks(__ATINIT__);\n}\n\nfunction preMain() {\n  callRuntimeCallbacks(__ATMAIN__);\n}\n\nfunction exitRuntime() {\n  callRuntimeCallbacks(__ATEXIT__);\n}\n\nfunction postRun() {\n  // compatibility - merge in anything from Module['postRun'] at this time\n  if (Module['postRun']) {\n    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];\n    while (Module['postRun'].length) {\n      addOnPostRun(Module['postRun'].shift());\n    }\n  }\n  callRuntimeCallbacks(__ATPOSTRUN__);\n}\n\nfunction addOnPreRun(cb) {\n  __ATPRERUN__.unshift(cb);\n}\nModule['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;\n\nfunction addOnInit(cb) {\n  __ATINIT__.unshift(cb);\n}\nModule['addOnInit'] = Module.addOnInit = addOnInit;\n\nfunction addOnPreMain(cb) {\n  __ATMAIN__.unshift(cb);\n}\nModule['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;\n\nfunction addOnExit(cb) {\n  __ATEXIT__.unshift(cb);\n}\nModule['addOnExit'] = Module.addOnExit = addOnExit;\n\nfunction addOnPostRun(cb) {\n  __ATPOSTRUN__.unshift(cb);\n}\nModule['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;\n\n// Tools\n\n// This processes a JS string into a C-line array of numbers, 0-terminated.\n// For LLVM-originating strings, see parser.js:parseLLVMString function\nfunction intArrayFromString(stringy, dontAddNull, length /* optional */) {\n  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);\n  if (length) {\n    ret.length = length;\n  }\n  if (!dontAddNull) {\n    ret.push(0);\n  }\n  return ret;\n}\nModule['intArrayFromString'] = intArrayFromString;\n\nfunction intArrayToString(array) {\n  var ret = [];\n  for (var i = 0; i < array.length; i++) {\n    var chr = array[i];\n    if (chr > 0xFF) {\n      chr &= 0xFF;\n    }\n    ret.push(String.fromCharCode(chr));\n  }\n  return ret.join('');\n}\nModule['intArrayToString'] = intArrayToString;\n\n// Write a Javascript array to somewhere in the heap\nfunction writeStringToMemory(string, buffer, dontAddNull) {\n  var array = intArrayFromString(string, dontAddNull);\n  var i = 0;\n  while (i < array.length) {\n    var chr = array[i];\n    HEAP8[(((buffer)+(i))|0)]=chr;\n    i = i + 1;\n  }\n}\nModule['writeStringToMemory'] = writeStringToMemory;\n\nfunction writeArrayToMemory(array, buffer) {\n  for (var i = 0; i < array.length; i++) {\n    HEAP8[(((buffer)+(i))|0)]=array[i];\n  }\n}\nModule['writeArrayToMemory'] = writeArrayToMemory;\n\nfunction writeAsciiToMemory(str, buffer, dontAddNull) {\n  for (var i = 0; i < str.length; i++) {\n    HEAP8[(((buffer)+(i))|0)]=str.charCodeAt(i);\n  }\n  if (!dontAddNull) HEAP8[(((buffer)+(str.length))|0)]=0;\n}\nModule['writeAsciiToMemory'] = writeAsciiToMemory;\n\nfunction unSign(value, bits, ignore) {\n  if (value >= 0) {\n    return value;\n  }\n  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts\n                    : Math.pow(2, bits)         + value;\n}\nfunction reSign(value, bits, ignore) {\n  if (value <= 0) {\n    return value;\n  }\n  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32\n                        : Math.pow(2, bits-1);\n  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that\n                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors\n                                                       // TODO: In i64 mode 1, resign the two parts separately and safely\n    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts\n  }\n  return value;\n}\n\n// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )\nif (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {\n  var ah  = a >>> 16;\n  var al = a & 0xffff;\n  var bh  = b >>> 16;\n  var bl = b & 0xffff;\n  return (al*bl + ((ah*bl + al*bh) << 16))|0;\n};\nMath.imul = Math['imul'];\n\n\nvar Math_abs = Math.abs;\nvar Math_cos = Math.cos;\nvar Math_sin = Math.sin;\nvar Math_tan = Math.tan;\nvar Math_acos = Math.acos;\nvar Math_asin = Math.asin;\nvar Math_atan = Math.atan;\nvar Math_atan2 = Math.atan2;\nvar Math_exp = Math.exp;\nvar Math_log = Math.log;\nvar Math_sqrt = Math.sqrt;\nvar Math_ceil = Math.ceil;\nvar Math_floor = Math.floor;\nvar Math_pow = Math.pow;\nvar Math_imul = Math.imul;\nvar Math_fround = Math.fround;\nvar Math_min = Math.min;\n\n// A counter of dependencies for calling run(). If we need to\n// do asynchronous work before running, increment this and\n// decrement it. Incrementing must happen in a place like\n// PRE_RUN_ADDITIONS (used by emcc to add file preloading).\n// Note that you can add dependencies in preRun, even though\n// it happens right before run - run will be postponed until\n// the dependencies are met.\nvar runDependencies = 0;\nvar runDependencyWatcher = null;\nvar dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled\n\nfunction addRunDependency(id) {\n  runDependencies++;\n  if (Module['monitorRunDependencies']) {\n    Module['monitorRunDependencies'](runDependencies);\n  }\n}\nModule['addRunDependency'] = addRunDependency;\nfunction removeRunDependency(id) {\n  runDependencies--;\n  if (Module['monitorRunDependencies']) {\n    Module['monitorRunDependencies'](runDependencies);\n  }\n  if (runDependencies == 0) {\n    if (runDependencyWatcher !== null) {\n      clearInterval(runDependencyWatcher);\n      runDependencyWatcher = null;\n    }\n    if (dependenciesFulfilled) {\n      var callback = dependenciesFulfilled;\n      dependenciesFulfilled = null;\n      callback(); // can add another dependenciesFulfilled\n    }\n  }\n}\nModule['removeRunDependency'] = removeRunDependency;\n\nModule[\"preloadedImages\"] = {}; // maps url to image data\nModule[\"preloadedAudios\"] = {}; // maps url to audio data\n\n\nvar memoryInitializer = null;\n\n// === Body ===\n\n\n\nSTATIC_BASE = 8;\n\nSTATICTOP = STATIC_BASE + 1448;\n\n\n/* global initializers */ __ATINIT__.push({ func: function() { runPostSets() } });\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/* memory initializer */ allocate([109,95,108,111,111,107,117,112,91,116,93,32,61,61,32,99,85,73,78,84,51,50,95,77,65,88,0,0,0,0,0,0,116,32,60,32,40,49,85,32,60,60,32,116,97,98,108,101,95,98,105,116,115,41,0,0,112,67,111,100,101,115,105,122,101,115,91,115,121,109,95,105,110,100,101,120,93,32,61,61,32,99,111,100,101,115,105,122,101,0,0,0,0,0,0,0,115,111,114,116,101,100,95,112,111,115,32,60,32,116,111,116,97,108,95,117,115,101,100,95,115,121,109,115,0,0,0,0,110,117,109,95,99,111,100,101,115,91,99,93,0,0,0,0,110,101,119,95,99,97,112,97,99,105,116,121,32,38,38,32,40,110,101,119,95,99,97,112,97,99,105,116,121,32,62,32,109,95,99,97,112,97,99,105,116,121,41,0,0,0,0,0,40,108,101,110,32,62,61,32,49,41,32,38,38,32,40,108,101,110,32,60,61,32,99,77,97,120,69,120,112,101,99,116,101,100,67,111,100,101,83,105,122,101,41,0,0,0,0,0,110,101,120,116,95,108,101,118,101,108,95,111,102,115,32,62,32,99,117,114,95,108,101,118,101,108,95,111,102,115,0,0,110,117,109,32,38,38,32,40,110,117,109,32,61,61,32,126,110,117,109,95,99,104,101,99,107,41,0,0,0,0,0,0,105,32,60,32,109,95,115,105,122,101,0,0,0,0,0,0,109,105,110,95,110,101,119,95,99,97,112,97,99,105,116,121,32,60,32,40,48,120,55,70,70,70,48,48,48,48,85,32,47,32,101,108,101,109,101,110,116,95,115,105,122,101,41,0,109,111,100,101,108,46,109,95,99,111,100,101,95,115,105,122,101,115,91,115,121,109,93,32,61,61,32,108,101,110,0,0,116,32,33,61,32,99,85,73,78,84,51,50,95,77,65,88,0,0,0,0,0,0,0,0,109,95,98,105,116,95,99,111,117,110,116,32,60,61,32,99,66,105,116,66,117,102,83,105,122,101,0,0,0,0,0,0,110,117,109,95,98,105,116,115,32,60,61,32,51,50,85,0,48,0,0,0,0,0,0,0,47,104,111,109,101,47,100,105,116,104,105,47,109,121,111,117,47,103,97,109,101,101,110,103,105,110,101,47,100,101,112,115,47,99,114,117,110,99,104,47,105,110,99,47,99,114,110,95,100,101,99,111,109,112,46,104,0,0,0,0,0,0,0,0,40,116,111,116,97,108,95,115,121,109,115,32,62,61,32,49,41,32,38,38,32,40,116,111,116,97,108,95,115,121,109,115,32,60,61,32,112,114,101,102,105,120,95,99,111,100,105,110,103,58,58,99,77,97,120,83,117,112,112,111,114,116,101,100,83,121,109,115,41,0,0,0,102,97,108,115,101,0,0,0,99,114,110,100,95,102,114,101,101,58,32,98,97,100,32,112,116,114,0,0,0,0,0,0,99,114,110,100,95,114,101,97,108,108,111,99,58,32,98,97,100,32,112,116,114,0,0,0,40,40,117,105,110,116,51,50,41,112,95,110,101,119,32,38,32,40,67,82,78,68,95,77,73,78,95,65,76,76,79,67,95,65,76,73,71,78,77,69,78,84,32,45,32,49,41,41,32,61,61,32,48,0,0,0,99,114,110,100,95,109,97,108,108,111,99,58,32,111,117,116,32,111,102,32,109,101,109,111,114,121,0,0,0,0,0,0,99,114,110,100,95,109,97,108,108,111,99,58,32,115,105,122,101,32,116,111,111,32,98,105,103,0,0,0,0,0,0,0,109,95,115,105,122,101,32,60,61,32,109,95,99,97,112,97,99,105,116,121,0,0,0,0,37,115,40,37,117,41,58,32,65,115,115,101,114,116,105,111,110,32,102,97,105,108,117,114,101,58,32,34,37,115,34,10,0,0,0,0,0,0,0,0,17,18,19,20,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15,16,0,0,0,1,2,2,3,3,3,3,4,0,0,0,0,0,0,1,1,0,1,0,1,0,0,1,2,1,2,0,0,0,1,0,2,1,0,2,0,0,1,2,3,2,0,0,0,0,0,0,0,0,2,3,4,5,6,7,1,0,2,3,1,0,0,0,0], \"i8\", ALLOC_NONE, Runtime.GLOBAL_BASE);\n\n\n\nvar tempDoublePtr = Runtime.alignMemory(allocate(12, \"i8\", ALLOC_STATIC), 8);\n\nassert(tempDoublePtr % 8 == 0);\n\nfunction copyTempFloat(ptr) { // functions, because inlining this code increases code size too much\n\n  HEAP8[tempDoublePtr] = HEAP8[ptr];\n\n  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];\n\n  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];\n\n  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];\n\n}\n\nfunction copyTempDouble(ptr) {\n\n  HEAP8[tempDoublePtr] = HEAP8[ptr];\n\n  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];\n\n  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];\n\n  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];\n\n  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];\n\n  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];\n\n  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];\n\n  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];\n\n}\n\n\n  \n  \n  \n   \n  Module[\"_strlen\"] = _strlen;\n  \n  function __reallyNegative(x) {\n      return x < 0 || (x === 0 && (1/x) === -Infinity);\n    }function __formatString(format, varargs) {\n      var textIndex = format;\n      var argIndex = 0;\n      function getNextArg(type) {\n        // NOTE: Explicitly ignoring type safety. Otherwise this fails:\n        //       int x = 4; printf(\"%c\\n\", (char)x);\n        var ret;\n        if (type === 'double') {\n          ret = HEAPF64[(((varargs)+(argIndex))>>3)];\n        } else if (type == 'i64') {\n          ret = [HEAP32[(((varargs)+(argIndex))>>2)],\n                 HEAP32[(((varargs)+(argIndex+8))>>2)]];\n          argIndex += 8; // each 32-bit chunk is in a 64-bit block\n  \n        } else {\n          type = 'i32'; // varargs are always i32, i64, or double\n          ret = HEAP32[(((varargs)+(argIndex))>>2)];\n        }\n        argIndex += Math.max(Runtime.getNativeFieldSize(type), Runtime.getAlignSize(type, null, true));\n        return ret;\n      }\n  \n      var ret = [];\n      var curr, next, currArg;\n      while(1) {\n        var startTextIndex = textIndex;\n        curr = HEAP8[(textIndex)];\n        if (curr === 0) break;\n        next = HEAP8[((textIndex+1)|0)];\n        if (curr == 37) {\n          // Handle flags.\n          var flagAlwaysSigned = false;\n          var flagLeftAlign = false;\n          var flagAlternative = false;\n          var flagZeroPad = false;\n          var flagPadSign = false;\n          flagsLoop: while (1) {\n            switch (next) {\n              case 43:\n                flagAlwaysSigned = true;\n                break;\n              case 45:\n                flagLeftAlign = true;\n                break;\n              case 35:\n                flagAlternative = true;\n                break;\n              case 48:\n                if (flagZeroPad) {\n                  break flagsLoop;\n                } else {\n                  flagZeroPad = true;\n                  break;\n                }\n              case 32:\n                flagPadSign = true;\n                break;\n              default:\n                break flagsLoop;\n            }\n            textIndex++;\n            next = HEAP8[((textIndex+1)|0)];\n          }\n  \n          // Handle width.\n          var width = 0;\n          if (next == 42) {\n            width = getNextArg('i32');\n            textIndex++;\n            next = HEAP8[((textIndex+1)|0)];\n          } else {\n            while (next >= 48 && next <= 57) {\n              width = width * 10 + (next - 48);\n              textIndex++;\n              next = HEAP8[((textIndex+1)|0)];\n            }\n          }\n  \n          // Handle precision.\n          var precisionSet = false, precision = -1;\n          if (next == 46) {\n            precision = 0;\n            precisionSet = true;\n            textIndex++;\n            next = HEAP8[((textIndex+1)|0)];\n            if (next == 42) {\n              precision = getNextArg('i32');\n              textIndex++;\n            } else {\n              while(1) {\n                var precisionChr = HEAP8[((textIndex+1)|0)];\n                if (precisionChr < 48 ||\n                    precisionChr > 57) break;\n                precision = precision * 10 + (precisionChr - 48);\n                textIndex++;\n              }\n            }\n            next = HEAP8[((textIndex+1)|0)];\n          }\n          if (precision < 0) {\n            precision = 6; // Standard default.\n            precisionSet = false;\n          }\n  \n          // Handle integer sizes. WARNING: These assume a 32-bit architecture!\n          var argSize;\n          switch (String.fromCharCode(next)) {\n            case 'h':\n              var nextNext = HEAP8[((textIndex+2)|0)];\n              if (nextNext == 104) {\n                textIndex++;\n                argSize = 1; // char (actually i32 in varargs)\n              } else {\n                argSize = 2; // short (actually i32 in varargs)\n              }\n              break;\n            case 'l':\n              var nextNext = HEAP8[((textIndex+2)|0)];\n              if (nextNext == 108) {\n                textIndex++;\n                argSize = 8; // long long\n              } else {\n                argSize = 4; // long\n              }\n              break;\n            case 'L': // long long\n            case 'q': // int64_t\n            case 'j': // intmax_t\n              argSize = 8;\n              break;\n            case 'z': // size_t\n            case 't': // ptrdiff_t\n            case 'I': // signed ptrdiff_t or unsigned size_t\n              argSize = 4;\n              break;\n            default:\n              argSize = null;\n          }\n          if (argSize) textIndex++;\n          next = HEAP8[((textIndex+1)|0)];\n  \n          // Handle type specifier.\n          switch (String.fromCharCode(next)) {\n            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {\n              // Integer.\n              var signed = next == 100 || next == 105;\n              argSize = argSize || 4;\n              var currArg = getNextArg('i' + (argSize * 8));\n              var origArg = currArg;\n              var argText;\n              // Flatten i64-1 [low, high] into a (slightly rounded) double\n              if (argSize == 8) {\n                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);\n              }\n              // Truncate to requested size.\n              if (argSize <= 4) {\n                var limit = Math.pow(256, argSize) - 1;\n                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);\n              }\n              // Format the number.\n              var currAbsArg = Math.abs(currArg);\n              var prefix = '';\n              if (next == 100 || next == 105) {\n                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else\n                argText = reSign(currArg, 8 * argSize, 1).toString(10);\n              } else if (next == 117) {\n                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else\n                argText = unSign(currArg, 8 * argSize, 1).toString(10);\n                currArg = Math.abs(currArg);\n              } else if (next == 111) {\n                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);\n              } else if (next == 120 || next == 88) {\n                prefix = (flagAlternative && currArg != 0) ? '0x' : '';\n                if (argSize == 8 && i64Math) {\n                  if (origArg[1]) {\n                    argText = (origArg[1]>>>0).toString(16);\n                    var lower = (origArg[0]>>>0).toString(16);\n                    while (lower.length < 8) lower = '0' + lower;\n                    argText += lower;\n                  } else {\n                    argText = (origArg[0]>>>0).toString(16);\n                  }\n                } else\n                if (currArg < 0) {\n                  // Represent negative numbers in hex as 2's complement.\n                  currArg = -currArg;\n                  argText = (currAbsArg - 1).toString(16);\n                  var buffer = [];\n                  for (var i = 0; i < argText.length; i++) {\n                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));\n                  }\n                  argText = buffer.join('');\n                  while (argText.length < argSize * 2) argText = 'f' + argText;\n                } else {\n                  argText = currAbsArg.toString(16);\n                }\n                if (next == 88) {\n                  prefix = prefix.toUpperCase();\n                  argText = argText.toUpperCase();\n                }\n              } else if (next == 112) {\n                if (currAbsArg === 0) {\n                  argText = '(nil)';\n                } else {\n                  prefix = '0x';\n                  argText = currAbsArg.toString(16);\n                }\n              }\n              if (precisionSet) {\n                while (argText.length < precision) {\n                  argText = '0' + argText;\n                }\n              }\n  \n              // Add sign if needed\n              if (currArg >= 0) {\n                if (flagAlwaysSigned) {\n                  prefix = '+' + prefix;\n                } else if (flagPadSign) {\n                  prefix = ' ' + prefix;\n                }\n              }\n  \n              // Move sign to prefix so we zero-pad after the sign\n              if (argText.charAt(0) == '-') {\n                prefix = '-' + prefix;\n                argText = argText.substr(1);\n              }\n  \n              // Add padding.\n              while (prefix.length + argText.length < width) {\n                if (flagLeftAlign) {\n                  argText += ' ';\n                } else {\n                  if (flagZeroPad) {\n                    argText = '0' + argText;\n                  } else {\n                    prefix = ' ' + prefix;\n                  }\n                }\n              }\n  \n              // Insert the result into the buffer.\n              argText = prefix + argText;\n              argText.split('').forEach(function(chr) {\n                ret.push(chr.charCodeAt(0));\n              });\n              break;\n            }\n            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {\n              // Float.\n              var currArg = getNextArg('double');\n              var argText;\n              if (isNaN(currArg)) {\n                argText = 'nan';\n                flagZeroPad = false;\n              } else if (!isFinite(currArg)) {\n                argText = (currArg < 0 ? '-' : '') + 'inf';\n                flagZeroPad = false;\n              } else {\n                var isGeneral = false;\n                var effectivePrecision = Math.min(precision, 20);\n  \n                // Convert g/G to f/F or e/E, as per:\n                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html\n                if (next == 103 || next == 71) {\n                  isGeneral = true;\n                  precision = precision || 1;\n                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);\n                  if (precision > exponent && exponent >= -4) {\n                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);\n                    precision -= exponent + 1;\n                  } else {\n                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);\n                    precision--;\n                  }\n                  effectivePrecision = Math.min(precision, 20);\n                }\n  \n                if (next == 101 || next == 69) {\n                  argText = currArg.toExponential(effectivePrecision);\n                  // Make sure the exponent has at least 2 digits.\n                  if (/[eE][-+]\\d$/.test(argText)) {\n                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);\n                  }\n                } else if (next == 102 || next == 70) {\n                  argText = currArg.toFixed(effectivePrecision);\n                  if (currArg === 0 && __reallyNegative(currArg)) {\n                    argText = '-' + argText;\n                  }\n                }\n  \n                var parts = argText.split('e');\n                if (isGeneral && !flagAlternative) {\n                  // Discard trailing zeros and periods.\n                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&\n                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {\n                    parts[0] = parts[0].slice(0, -1);\n                  }\n                } else {\n                  // Make sure we have a period in alternative mode.\n                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';\n                  // Zero pad until required precision.\n                  while (precision > effectivePrecision++) parts[0] += '0';\n                }\n                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');\n  \n                // Capitalize 'E' if needed.\n                if (next == 69) argText = argText.toUpperCase();\n  \n                // Add sign.\n                if (currArg >= 0) {\n                  if (flagAlwaysSigned) {\n                    argText = '+' + argText;\n                  } else if (flagPadSign) {\n                    argText = ' ' + argText;\n                  }\n                }\n              }\n  \n              // Add padding.\n              while (argText.length < width) {\n                if (flagLeftAlign) {\n                  argText += ' ';\n                } else {\n                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {\n                    argText = argText[0] + '0' + argText.slice(1);\n                  } else {\n                    argText = (flagZeroPad ? '0' : ' ') + argText;\n                  }\n                }\n              }\n  \n              // Adjust case.\n              if (next < 97) argText = argText.toUpperCase();\n  \n              // Insert the result into the buffer.\n              argText.split('').forEach(function(chr) {\n                ret.push(chr.charCodeAt(0));\n              });\n              break;\n            }\n            case 's': {\n              // String.\n              var arg = getNextArg('i8*');\n              var argLength = arg ? _strlen(arg) : '(null)'.length;\n              if (precisionSet) argLength = Math.min(argLength, precision);\n              if (!flagLeftAlign) {\n                while (argLength < width--) {\n                  ret.push(32);\n                }\n              }\n              if (arg) {\n                for (var i = 0; i < argLength; i++) {\n                  ret.push(HEAPU8[((arg++)|0)]);\n                }\n              } else {\n                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));\n              }\n              if (flagLeftAlign) {\n                while (argLength < width--) {\n                  ret.push(32);\n                }\n              }\n              break;\n            }\n            case 'c': {\n              // Character.\n              if (flagLeftAlign) ret.push(getNextArg('i8'));\n              while (--width > 0) {\n                ret.push(32);\n              }\n              if (!flagLeftAlign) ret.push(getNextArg('i8'));\n              break;\n            }\n            case 'n': {\n              // Write the length written so far to the next parameter.\n              var ptr = getNextArg('i32*');\n              HEAP32[((ptr)>>2)]=ret.length;\n              break;\n            }\n            case '%': {\n              // Literal percent sign.\n              ret.push(curr);\n              break;\n            }\n            default: {\n              // Unknown specifiers remain untouched.\n              for (var i = startTextIndex; i < textIndex + 2; i++) {\n                ret.push(HEAP8[(i)]);\n              }\n            }\n          }\n          textIndex += 2;\n          // TODO: Support a/A (hex float) and m (last error) specifiers.\n          // TODO: Support %1${specifier} for arg selection.\n        } else {\n          ret.push(curr);\n          textIndex += 1;\n        }\n      }\n      return ret;\n    }function _snprintf(s, n, format, varargs) {\n      // int snprintf(char *restrict s, size_t n, const char *restrict format, ...);\n      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html\n      var result = __formatString(format, varargs);\n      var limit = (n === undefined) ? result.length\n                                    : Math.min(result.length, Math.max(n - 1, 0));\n      if (s < 0) {\n        s = -s;\n        var buf = _malloc(limit+1);\n        HEAP32[((s)>>2)]=buf;\n        s = buf;\n      }\n      for (var i = 0; i < limit; i++) {\n        HEAP8[(((s)+(i))|0)]=result[i];\n      }\n      if (limit < n || (n === undefined)) HEAP8[(((s)+(i))|0)]=0;\n      return result.length;\n    }function _sprintf(s, format, varargs) {\n      // int sprintf(char *restrict s, const char *restrict format, ...);\n      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html\n      return _snprintf(s, undefined, format, varargs);\n    }\n\n  \n  \n  \n  \n  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};\n  \n  var ERRNO_MESSAGES={0:\"Success\",1:\"Not super-user\",2:\"No such file or directory\",3:\"No such process\",4:\"Interrupted system call\",5:\"I/O error\",6:\"No such device or address\",7:\"Arg list too long\",8:\"Exec format error\",9:\"Bad file number\",10:\"No children\",11:\"No more processes\",12:\"Not enough core\",13:\"Permission denied\",14:\"Bad address\",15:\"Block device required\",16:\"Mount device busy\",17:\"File exists\",18:\"Cross-device link\",19:\"No such device\",20:\"Not a directory\",21:\"Is a directory\",22:\"Invalid argument\",23:\"Too many open files in system\",24:\"Too many open files\",25:\"Not a typewriter\",26:\"Text file busy\",27:\"File too large\",28:\"No space left on device\",29:\"Illegal seek\",30:\"Read only file system\",31:\"Too many links\",32:\"Broken pipe\",33:\"Math arg out of domain of func\",34:\"Math result not representable\",35:\"File locking deadlock error\",36:\"File or path name too long\",37:\"No record locks available\",38:\"Function not implemented\",39:\"Directory not empty\",40:\"Too many symbolic links\",42:\"No message of desired type\",43:\"Identifier removed\",44:\"Channel number out of range\",45:\"Level 2 not synchronized\",46:\"Level 3 halted\",47:\"Level 3 reset\",48:\"Link number out of range\",49:\"Protocol driver not attached\",50:\"No CSI structure available\",51:\"Level 2 halted\",52:\"Invalid exchange\",53:\"Invalid request descriptor\",54:\"Exchange full\",55:\"No anode\",56:\"Invalid request code\",57:\"Invalid slot\",59:\"Bad font file fmt\",60:\"Device not a stream\",61:\"No data (for no delay io)\",62:\"Timer expired\",63:\"Out of streams resources\",64:\"Machine is not on the network\",65:\"Package not installed\",66:\"The object is remote\",67:\"The link has been severed\",68:\"Advertise error\",69:\"Srmount error\",70:\"Communication error on send\",71:\"Protocol error\",72:\"Multihop attempted\",73:\"Cross mount point (not really error)\",74:\"Trying to read unreadable message\",75:\"Value too large for defined data type\",76:\"Given log. name not unique\",77:\"f.d. invalid for this operation\",78:\"Remote address changed\",79:\"Can   access a needed shared lib\",80:\"Accessing a corrupted shared lib\",81:\".lib section in a.out corrupted\",82:\"Attempting to link in too many libs\",83:\"Attempting to exec a shared library\",84:\"Illegal byte sequence\",86:\"Streams pipe error\",87:\"Too many users\",88:\"Socket operation on non-socket\",89:\"Destination address required\",90:\"Message too long\",91:\"Protocol wrong type for socket\",92:\"Protocol not available\",93:\"Unknown protocol\",94:\"Socket type not supported\",95:\"Not supported\",96:\"Protocol family not supported\",97:\"Address family not supported by protocol family\",98:\"Address already in use\",99:\"Address not available\",100:\"Network interface is not configured\",101:\"Network is unreachable\",102:\"Connection reset by network\",103:\"Connection aborted\",104:\"Connection reset by peer\",105:\"No buffer space available\",106:\"Socket is already connected\",107:\"Socket is not connected\",108:\"Can't send after socket shutdown\",109:\"Too many references\",110:\"Connection timed out\",111:\"Connection refused\",112:\"Host is down\",113:\"Host is unreachable\",114:\"Socket already connected\",115:\"Connection already in progress\",116:\"Stale file handle\",122:\"Quota exceeded\",123:\"No medium (in tape drive)\",125:\"Operation canceled\",130:\"Previous owner died\",131:\"State not recoverable\"};\n  \n  \n  var ___errno_state=0;function ___setErrNo(value) {\n      // For convenient setting and returning of errno.\n      HEAP32[((___errno_state)>>2)]=value;\n      return value;\n    }\n  \n  var PATH={splitPath:function (filename) {\n        var splitPathRe = /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\n        return splitPathRe.exec(filename).slice(1);\n      },normalizeArray:function (parts, allowAboveRoot) {\n        // if the path tries to go above the root, `up` ends up > 0\n        var up = 0;\n        for (var i = parts.length - 1; i >= 0; i--) {\n          var last = parts[i];\n          if (last === '.') {\n            parts.splice(i, 1);\n          } else if (last === '..') {\n            parts.splice(i, 1);\n            up++;\n          } else if (up) {\n            parts.splice(i, 1);\n            up--;\n          }\n        }\n        // if the path is allowed to go above the root, restore leading ..s\n        if (allowAboveRoot) {\n          for (; up--; up) {\n            parts.unshift('..');\n          }\n        }\n        return parts;\n      },normalize:function (path) {\n        var isAbsolute = path.charAt(0) === '/',\n            trailingSlash = path.substr(-1) === '/';\n        // Normalize the path\n        path = PATH.normalizeArray(path.split('/').filter(function(p) {\n          return !!p;\n        }), !isAbsolute).join('/');\n        if (!path && !isAbsolute) {\n          path = '.';\n        }\n        if (path && trailingSlash) {\n          path += '/';\n        }\n        return (isAbsolute ? '/' : '') + path;\n      },dirname:function (path) {\n        var result = PATH.splitPath(path),\n            root = result[0],\n            dir = result[1];\n        if (!root && !dir) {\n          // No dirname whatsoever\n          return '.';\n        }\n        if (dir) {\n          // It has a dirname, strip trailing slash\n          dir = dir.substr(0, dir.length - 1);\n        }\n        return root + dir;\n      },basename:function (path) {\n        // EMSCRIPTEN return '/'' for '/', not an empty string\n        if (path === '/') return '/';\n        var lastSlash = path.lastIndexOf('/');\n        if (lastSlash === -1) return path;\n        return path.substr(lastSlash+1);\n      },extname:function (path) {\n        return PATH.splitPath(path)[3];\n      },join:function () {\n        var paths = Array.prototype.slice.call(arguments, 0);\n        return PATH.normalize(paths.join('/'));\n      },join2:function (l, r) {\n        return PATH.normalize(l + '/' + r);\n      },resolve:function () {\n        var resolvedPath = '',\n          resolvedAbsolute = false;\n        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n          var path = (i >= 0) ? arguments[i] : FS.cwd();\n          // Skip empty and invalid entries\n          if (typeof path !== 'string') {\n            throw new TypeError('Arguments to path.resolve must be strings');\n          } else if (!path) {\n            continue;\n          }\n          resolvedPath = path + '/' + resolvedPath;\n          resolvedAbsolute = path.charAt(0) === '/';\n        }\n        // At this point the path should be resolved to a full absolute path, but\n        // handle relative paths to be safe (might happen when process.cwd() fails)\n        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {\n          return !!p;\n        }), !resolvedAbsolute).join('/');\n        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n      },relative:function (from, to) {\n        from = PATH.resolve(from).substr(1);\n        to = PATH.resolve(to).substr(1);\n        function trim(arr) {\n          var start = 0;\n          for (; start < arr.length; start++) {\n            if (arr[start] !== '') break;\n          }\n          var end = arr.length - 1;\n          for (; end >= 0; end--) {\n            if (arr[end] !== '') break;\n          }\n          if (start > end) return [];\n          return arr.slice(start, end - start + 1);\n        }\n        var fromParts = trim(from.split('/'));\n        var toParts = trim(to.split('/'));\n        var length = Math.min(fromParts.length, toParts.length);\n        var samePartsLength = length;\n        for (var i = 0; i < length; i++) {\n          if (fromParts[i] !== toParts[i]) {\n            samePartsLength = i;\n            break;\n          }\n        }\n        var outputParts = [];\n        for (var i = samePartsLength; i < fromParts.length; i++) {\n          outputParts.push('..');\n        }\n        outputParts = outputParts.concat(toParts.slice(samePartsLength));\n        return outputParts.join('/');\n      }};\n  \n  var TTY={ttys:[],init:function () {\n        // https://github.com/kripken/emscripten/pull/1555\n        // if (ENVIRONMENT_IS_NODE) {\n        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY\n        //   // device, it always assumes it's a TTY device. because of this, we're forcing\n        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible\n        //   // with text files until FS.init can be refactored.\n        //   process['stdin']['setEncoding']('utf8');\n        // }\n      },shutdown:function () {\n        // https://github.com/kripken/emscripten/pull/1555\n        // if (ENVIRONMENT_IS_NODE) {\n        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?\n        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation\n        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?\n        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle\n        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call\n        //   process['stdin']['pause']();\n        // }\n      },register:function (dev, ops) {\n        TTY.ttys[dev] = { input: [], output: [], ops: ops };\n        FS.registerDevice(dev, TTY.stream_ops);\n      },stream_ops:{open:function (stream) {\n          var tty = TTY.ttys[stream.node.rdev];\n          if (!tty) {\n            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);\n          }\n          stream.tty = tty;\n          stream.seekable = false;\n        },close:function (stream) {\n          // flush any pending line data\n          if (stream.tty.output.length) {\n            stream.tty.ops.put_char(stream.tty, 10);\n          }\n        },read:function (stream, buffer, offset, length, pos /* ignored */) {\n          if (!stream.tty || !stream.tty.ops.get_char) {\n            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);\n          }\n          var bytesRead = 0;\n          for (var i = 0; i < length; i++) {\n            var result;\n            try {\n              result = stream.tty.ops.get_char(stream.tty);\n            } catch (e) {\n              throw new FS.ErrnoError(ERRNO_CODES.EIO);\n            }\n            if (result === undefined && bytesRead === 0) {\n              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);\n            }\n            if (result === null || result === undefined) break;\n            bytesRead++;\n            buffer[offset+i] = result;\n          }\n          if (bytesRead) {\n            stream.node.timestamp = Date.now();\n          }\n          return bytesRead;\n        },write:function (stream, buffer, offset, length, pos) {\n          if (!stream.tty || !stream.tty.ops.put_char) {\n            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);\n          }\n          for (var i = 0; i < length; i++) {\n            try {\n              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);\n            } catch (e) {\n              throw new FS.ErrnoError(ERRNO_CODES.EIO);\n            }\n          }\n          if (length) {\n            stream.node.timestamp = Date.now();\n          }\n          return i;\n        }},default_tty_ops:{get_char:function (tty) {\n          if (!tty.input.length) {\n            var result = null;\n            if (ENVIRONMENT_IS_NODE) {\n              result = process['stdin']['read']();\n              if (!result) {\n                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {\n                  return null;  // EOF\n                }\n                return undefined;  // no data available\n              }\n            } else if (typeof window != 'undefined' &&\n              typeof window.prompt == 'function') {\n              // Browser.\n              result = window.prompt('Input: ');  // returns null on cancel\n              if (result !== null) {\n                result += '\\n';\n              }\n            } else if (typeof readline == 'function') {\n              // Command line.\n              result = readline();\n              if (result !== null) {\n                result += '\\n';\n              }\n            }\n            if (!result) {\n              return null;\n            }\n            tty.input = intArrayFromString(result, true);\n          }\n          return tty.input.shift();\n        },put_char:function (tty, val) {\n          if (val === null || val === 10) {\n            Module['print'](tty.output.join(''));\n            tty.output = [];\n          } else {\n            tty.output.push(TTY.utf8.processCChar(val));\n          }\n        }},default_tty1_ops:{put_char:function (tty, val) {\n          if (val === null || val === 10) {\n            Module['printErr'](tty.output.join(''));\n            tty.output = [];\n          } else {\n            tty.output.push(TTY.utf8.processCChar(val));\n          }\n        }}};\n  \n  var MEMFS={ops_table:null,CONTENT_OWNING:1,CONTENT_FLEXIBLE:2,CONTENT_FIXED:3,mount:function (mount) {\n        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);\n      },createNode:function (parent, name, mode, dev) {\n        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {\n          // no supported\n          throw new FS.ErrnoError(ERRNO_CODES.EPERM);\n        }\n        if (!MEMFS.ops_table) {\n          MEMFS.ops_table = {\n            dir: {\n              node: {\n                getattr: MEMFS.node_ops.getattr,\n                setattr: MEMFS.node_ops.setattr,\n                lookup: MEMFS.node_ops.lookup,\n                mknod: MEMFS.node_ops.mknod,\n                rename: MEMFS.node_ops.rename,\n                unlink: MEMFS.node_ops.unlink,\n                rmdir: MEMFS.node_ops.rmdir,\n                readdir: MEMFS.node_ops.readdir,\n                symlink: MEMFS.node_ops.symlink\n              },\n              stream: {\n                llseek: MEMFS.stream_ops.llseek\n              }\n            },\n            file: {\n              node: {\n                getattr: MEMFS.node_ops.getattr,\n                setattr: MEMFS.node_ops.setattr\n              },\n              stream: {\n                llseek: MEMFS.stream_ops.llseek,\n                read: MEMFS.stream_ops.read,\n                write: MEMFS.stream_ops.write,\n                allocate: MEMFS.stream_ops.allocate,\n                mmap: MEMFS.stream_ops.mmap\n              }\n            },\n            link: {\n              node: {\n                getattr: MEMFS.node_ops.getattr,\n                setattr: MEMFS.node_ops.setattr,\n                readlink: MEMFS.node_ops.readlink\n              },\n              stream: {}\n            },\n            chrdev: {\n              node: {\n                getattr: MEMFS.node_ops.getattr,\n                setattr: MEMFS.node_ops.setattr\n              },\n              stream: FS.chrdev_stream_ops\n            },\n          };\n        }\n        var node = FS.createNode(parent, name, mode, dev);\n        if (FS.isDir(node.mode)) {\n          node.node_ops = MEMFS.ops_table.dir.node;\n          node.stream_ops = MEMFS.ops_table.dir.stream;\n          node.contents = {};\n        } else if (FS.isFile(node.mode)) {\n          node.node_ops = MEMFS.ops_table.file.node;\n          node.stream_ops = MEMFS.ops_table.file.stream;\n          node.contents = [];\n          node.contentMode = MEMFS.CONTENT_FLEXIBLE;\n        } else if (FS.isLink(node.mode)) {\n          node.node_ops = MEMFS.ops_table.link.node;\n          node.stream_ops = MEMFS.ops_table.link.stream;\n        } else if (FS.isChrdev(node.mode)) {\n          node.node_ops = MEMFS.ops_table.chrdev.node;\n          node.stream_ops = MEMFS.ops_table.chrdev.stream;\n        }\n        node.timestamp = Date.now();\n        // add the new node to the parent\n        if (parent) {\n          parent.contents[name] = node;\n        }\n        return node;\n      },ensureFlexible:function (node) {\n        if (node.contentMode !== MEMFS.CONTENT_FLEXIBLE) {\n          var contents = node.contents;\n          node.contents = Array.prototype.slice.call(contents);\n          node.contentMode = MEMFS.CONTENT_FLEXIBLE;\n        }\n      },node_ops:{getattr:function (node) {\n          var attr = {};\n          // device numbers reuse inode numbers.\n          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;\n          attr.ino = node.id;\n          attr.mode = node.mode;\n          attr.nlink = 1;\n          attr.uid = 0;\n          attr.gid = 0;\n          attr.rdev = node.rdev;\n          if (FS.isDir(node.mode)) {\n            attr.size = 4096;\n          } else if (FS.isFile(node.mode)) {\n            attr.size = node.contents.length;\n          } else if (FS.isLink(node.mode)) {\n            attr.size = node.link.length;\n          } else {\n            attr.size = 0;\n          }\n          attr.atime = new Date(node.timestamp);\n          attr.mtime = new Date(node.timestamp);\n          attr.ctime = new Date(node.timestamp);\n          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),\n          //       but this is not required by the standard.\n          attr.blksize = 4096;\n          attr.blocks = Math.ceil(attr.size / attr.blksize);\n          return attr;\n        },setattr:function (node, attr) {\n          if (attr.mode !== undefined) {\n            node.mode = attr.mode;\n          }\n          if (attr.timestamp !== undefined) {\n            node.timestamp = attr.timestamp;\n          }\n          if (attr.size !== undefined) {\n            MEMFS.ensureFlexible(node);\n            var contents = node.contents;\n            if (attr.size < contents.length) contents.length = attr.size;\n            else while (attr.size > contents.length) contents.push(0);\n          }\n        },lookup:function (parent, name) {\n          throw FS.genericErrors[ERRNO_CODES.ENOENT];\n        },mknod:function (parent, name, mode, dev) {\n          return MEMFS.createNode(parent, name, mode, dev);\n        },rename:function (old_node, new_dir, new_name) {\n          // if we're overwriting a directory at new_name, make sure it's empty.\n          if (FS.isDir(old_node.mode)) {\n            var new_node;\n            try {\n              new_node = FS.lookupNode(new_dir, new_name);\n            } catch (e) {\n            }\n            if (new_node) {\n              for (var i in new_node.contents) {\n                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);\n              }\n            }\n          }\n          // do the internal rewiring\n          delete old_node.parent.contents[old_node.name];\n          old_node.name = new_name;\n          new_dir.contents[new_name] = old_node;\n          old_node.parent = new_dir;\n        },unlink:function (parent, name) {\n          delete parent.contents[name];\n        },rmdir:function (parent, name) {\n          var node = FS.lookupNode(parent, name);\n          for (var i in node.contents) {\n            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);\n          }\n          delete parent.contents[name];\n        },readdir:function (node) {\n          var entries = ['.', '..']\n          for (var key in node.contents) {\n            if (!node.contents.hasOwnProperty(key)) {\n              continue;\n            }\n            entries.push(key);\n          }\n          return entries;\n        },symlink:function (parent, newname, oldpath) {\n          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);\n          node.link = oldpath;\n          return node;\n        },readlink:function (node) {\n          if (!FS.isLink(node.mode)) {\n            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);\n          }\n          return node.link;\n        }},stream_ops:{read:function (stream, buffer, offset, length, position) {\n          var contents = stream.node.contents;\n          if (position >= contents.length)\n            return 0;\n          var size = Math.min(contents.length - position, length);\n          assert(size >= 0);\n          if (size > 8 && contents.subarray) { // non-trivial, and typed array\n            buffer.set(contents.subarray(position, position + size), offset);\n          } else\n          {\n            for (var i = 0; i < size; i++) {\n              buffer[offset + i] = contents[position + i];\n            }\n          }\n          return size;\n        },write:function (stream, buffer, offset, length, position, canOwn) {\n          var node = stream.node;\n          node.timestamp = Date.now();\n          var contents = node.contents;\n          if (length && contents.length === 0 && position === 0 && buffer.subarray) {\n            // just replace it with the new data\n            if (canOwn && offset === 0) {\n              node.contents = buffer; // this could be a subarray of Emscripten HEAP, or allocated from some other source.\n              node.contentMode = (buffer.buffer === HEAP8.buffer) ? MEMFS.CONTENT_OWNING : MEMFS.CONTENT_FIXED;\n            } else {\n              node.contents = new Uint8Array(buffer.subarray(offset, offset+length));\n              node.contentMode = MEMFS.CONTENT_FIXED;\n            }\n            return length;\n          }\n          MEMFS.ensureFlexible(node);\n          var contents = node.contents;\n          while (contents.length < position) contents.push(0);\n          for (var i = 0; i < length; i++) {\n            contents[position + i] = buffer[offset + i];\n          }\n          return length;\n        },llseek:function (stream, offset, whence) {\n          var position = offset;\n          if (whence === 1) {  // SEEK_CUR.\n            position += stream.position;\n          } else if (whence === 2) {  // SEEK_END.\n            if (FS.isFile(stream.node.mode)) {\n              position += stream.node.contents.length;\n            }\n          }\n          if (position < 0) {\n            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);\n          }\n          stream.ungotten = [];\n          stream.position = position;\n          return position;\n        },allocate:function (stream, offset, length) {\n          MEMFS.ensureFlexible(stream.node);\n          var contents = stream.node.contents;\n          var limit = offset + length;\n          while (limit > contents.length) contents.push(0);\n        },mmap:function (stream, buffer, offset, length, position, prot, flags) {\n          if (!FS.isFile(stream.node.mode)) {\n            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);\n          }\n          var ptr;\n          var allocated;\n          var contents = stream.node.contents;\n          // Only make a new copy when MAP_PRIVATE is specified.\n          if ( !(flags & 2) &&\n                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {\n            // We can't emulate MAP_SHARED when the file is not backed by the buffer\n            // we're mapping to (e.g. the HEAP buffer).\n            allocated = false;\n            ptr = contents.byteOffset;\n          } else {\n            // Try to avoid unnecessary slices.\n            if (position > 0 || position + length < contents.length) {\n              if (contents.subarray) {\n                contents = contents.subarray(position, position + length);\n              } else {\n                contents = Array.prototype.slice.call(contents, position, position + length);\n              }\n            }\n            allocated = true;\n            ptr = _malloc(length);\n            if (!ptr) {\n              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);\n            }\n            buffer.set(contents, ptr);\n          }\n          return { ptr: ptr, allocated: allocated };\n        }}};\n  \n  var IDBFS={dbs:{},indexedDB:function () {\n        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;\n      },DB_VERSION:21,DB_STORE_NAME:\"FILE_DATA\",mount:function (mount) {\n        // reuse all of the core MEMFS functionality\n        return MEMFS.mount.apply(null, arguments);\n      },syncfs:function (mount, populate, callback) {\n        IDBFS.getLocalSet(mount, function(err, local) {\n          if (err) return callback(err);\n  \n          IDBFS.getRemoteSet(mount, function(err, remote) {\n            if (err) return callback(err);\n  \n            var src = populate ? remote : local;\n            var dst = populate ? local : remote;\n  \n            IDBFS.reconcile(src, dst, callback);\n          });\n        });\n      },getDB:function (name, callback) {\n        // check the cache first\n        var db = IDBFS.dbs[name];\n        if (db) {\n          return callback(null, db);\n        }\n  \n        var req;\n        try {\n          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);\n        } catch (e) {\n          return callback(e);\n        }\n        req.onupgradeneeded = function(e) {\n          var db = e.target.result;\n          var transaction = e.target.transaction;\n  \n          var fileStore;\n  \n          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {\n            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);\n          } else {\n            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);\n          }\n  \n          fileStore.createIndex('timestamp', 'timestamp', { unique: false });\n        };\n        req.onsuccess = function() {\n          db = req.result;\n  \n          // add to the cache\n          IDBFS.dbs[name] = db;\n          callback(null, db);\n        };\n        req.onerror = function() {\n          callback(this.error);\n        };\n      },getLocalSet:function (mount, callback) {\n        var entries = {};\n  \n        function isRealDir(p) {\n          return p !== '.' && p !== '..';\n        };\n        function toAbsolute(root) {\n          return function(p) {\n            return PATH.join2(root, p);\n          }\n        };\n  \n        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));\n  \n        while (check.length) {\n          var path = check.pop();\n          var stat;\n  \n          try {\n            stat = FS.stat(path);\n          } catch (e) {\n            return callback(e);\n          }\n  \n          if (FS.isDir(stat.mode)) {\n            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));\n          }\n  \n          entries[path] = { timestamp: stat.mtime };\n        }\n  \n        return callback(null, { type: 'local', entries: entries });\n      },getRemoteSet:function (mount, callback) {\n        var entries = {};\n  \n        IDBFS.getDB(mount.mountpoint, function(err, db) {\n          if (err) return callback(err);\n  \n          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');\n          transaction.onerror = function() { callback(this.error); };\n  \n          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);\n          var index = store.index('timestamp');\n  \n          index.openKeyCursor().onsuccess = function(event) {\n            var cursor = event.target.result;\n  \n            if (!cursor) {\n              return callback(null, { type: 'remote', db: db, entries: entries });\n            }\n  \n            entries[cursor.primaryKey] = { timestamp: cursor.key };\n  \n            cursor.continue();\n          };\n        });\n      },loadLocalEntry:function (path, callback) {\n        var stat, node;\n  \n        try {\n          var lookup = FS.lookupPath(path);\n          node = lookup.node;\n          stat = FS.stat(path);\n        } catch (e) {\n          return callback(e);\n        }\n  \n        if (FS.isDir(stat.mode)) {\n          return callback(null, { timestamp: stat.mtime, mode: stat.mode });\n        } else if (FS.isFile(stat.mode)) {\n          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });\n        } else {\n          return callback(new Error('node type not supported'));\n        }\n      },storeLocalEntry:function (path, entry, callback) {\n        try {\n          if (FS.isDir(entry.mode)) {\n            FS.mkdir(path, entry.mode);\n          } else if (FS.isFile(entry.mode)) {\n            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });\n          } else {\n            return callback(new Error('node type not supported'));\n          }\n  \n          FS.utime(path, entry.timestamp, entry.timestamp);\n        } catch (e) {\n          return callback(e);\n        }\n  \n        callback(null);\n      },removeLocalEntry:function (path, callback) {\n        try {\n          var lookup = FS.lookupPath(path);\n          var stat = FS.stat(path);\n  \n          if (FS.isDir(stat.mode)) {\n            FS.rmdir(path);\n          } else if (FS.isFile(stat.mode)) {\n            FS.unlink(path);\n          }\n        } catch (e) {\n          return callback(e);\n        }\n  \n        callback(null);\n      },loadRemoteEntry:function (store, path, callback) {\n        var req = store.get(path);\n        req.onsuccess = function(event) { callback(null, event.target.result); };\n        req.onerror = function() { callback(this.error); };\n      },storeRemoteEntry:function (store, path, entry, callback) {\n        var req = store.put(entry, path);\n        req.onsuccess = function() { callback(null); };\n        req.onerror = function() { callback(this.error); };\n      },removeRemoteEntry:function (store, path, callback) {\n        var req = store.delete(path);\n        req.onsuccess = function() { callback(null); };\n        req.onerror = function() { callback(this.error); };\n      },reconcile:function (src, dst, callback) {\n        var total = 0;\n  \n        var create = [];\n        Object.keys(src.entries).forEach(function (key) {\n          var e = src.entries[key];\n          var e2 = dst.entries[key];\n          if (!e2 || e.timestamp > e2.timestamp) {\n            create.push(key);\n            total++;\n          }\n        });\n  \n        var remove = [];\n        Object.keys(dst.entries).forEach(function (key) {\n          var e = dst.entries[key];\n          var e2 = src.entries[key];\n          if (!e2) {\n            remove.push(key);\n            total++;\n          }\n        });\n  \n        if (!total) {\n          return callback(null);\n        }\n  \n        var errored = false;\n        var completed = 0;\n        var db = src.type === 'remote' ? src.db : dst.db;\n        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');\n        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);\n  \n        function done(err) {\n          if (err) {\n            if (!done.errored) {\n              done.errored = true;\n              return callback(err);\n            }\n            return;\n          }\n          if (++completed >= total) {\n            return callback(null);\n          }\n        };\n  \n        transaction.onerror = function() { done(this.error); };\n  \n        // sort paths in ascending order so directory entries are created\n        // before the files inside them\n        create.sort().forEach(function (path) {\n          if (dst.type === 'local') {\n            IDBFS.loadRemoteEntry(store, path, function (err, entry) {\n              if (err) return done(err);\n              IDBFS.storeLocalEntry(path, entry, done);\n            });\n          } else {\n            IDBFS.loadLocalEntry(path, function (err, entry) {\n              if (err) return done(err);\n              IDBFS.storeRemoteEntry(store, path, entry, done);\n            });\n          }\n        });\n  \n        // sort paths in descending order so files are deleted before their\n        // parent directories\n        remove.sort().reverse().forEach(function(path) {\n          if (dst.type === 'local') {\n            IDBFS.removeLocalEntry(path, done);\n          } else {\n            IDBFS.removeRemoteEntry(store, path, done);\n          }\n        });\n      }};\n  \n  var NODEFS={isWindows:false,staticInit:function () {\n        NODEFS.isWindows = !!process.platform.match(/^win/);\n      },mount:function (mount) {\n        assert(ENVIRONMENT_IS_NODE);\n        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);\n      },createNode:function (parent, name, mode, dev) {\n        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {\n          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);\n        }\n        var node = FS.createNode(parent, name, mode);\n        node.node_ops = NODEFS.node_ops;\n        node.stream_ops = NODEFS.stream_ops;\n        return node;\n      },getMode:function (path) {\n        var stat;\n        try {\n          stat = fs.lstatSync(path);\n          if (NODEFS.isWindows) {\n            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so \n            // propagate write bits to execute bits.\n            stat.mode = stat.mode | ((stat.mode & 146) >> 1);\n          }\n        } catch (e) {\n          if (!e.code) throw e;\n          throw new FS.ErrnoError(ERRNO_CODES[e.code]);\n        }\n        return stat.mode;\n      },realPath:function (node) {\n        var parts = [];\n        while (node.parent !== node) {\n          parts.push(node.name);\n          node = node.parent;\n        }\n        parts.push(node.mount.opts.root);\n        parts.reverse();\n        return PATH.join.apply(null, parts);\n      },flagsToPermissionStringMap:{0:\"r\",1:\"r+\",2:\"r+\",64:\"r\",65:\"r+\",66:\"r+\",129:\"rx+\",193:\"rx+\",514:\"w+\",577:\"w\",578:\"w+\",705:\"wx\",706:\"wx+\",1024:\"a\",1025:\"a\",1026:\"a+\",1089:\"a\",1090:\"a+\",1153:\"ax\",1154:\"ax+\",1217:\"ax\",1218:\"ax+\",4096:\"rs\",4098:\"rs+\"},flagsToPermissionString:function (flags) {\n        if (flags in NODEFS.flagsToPermissionStringMap) {\n          return NODEFS.flagsToPermissionStringMap[flags];\n        } else {\n          return flags;\n        }\n      },node_ops:{getattr:function (node) {\n          var path = NODEFS.realPath(node);\n          var stat;\n          try {\n            stat = fs.lstatSync(path);\n          } catch (e) {\n            if (!e.code) throw e;\n            throw new FS.ErrnoError(ERRNO_CODES[e.code]);\n          }\n          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.\n          // See http://support.microsoft.com/kb/140365\n          if (NODEFS.isWindows && !stat.blksize) {\n            stat.blksize = 4096;\n          }\n          if (NODEFS.isWindows && !stat.blocks) {\n            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;\n          }\n          return {\n            dev: stat.dev,\n            ino: stat.ino,\n            mode: stat.mode,\n            nlink: stat.nlink,\n            uid: stat.uid,\n            gid: stat.gid,\n            rdev: stat.rdev,\n            size: stat.size,\n            atime: stat.atime,\n            mtime: stat.mtime,\n            ctime: stat.ctime,\n            blksize: stat.blksize,\n            blocks: stat.blocks\n          };\n        },setattr:function (node, attr) {\n          var path = NODEFS.realPath(node);\n          try {\n            if (attr.mode !== undefined) {\n              fs.chmodSync(path, attr.mode);\n              // update the common node structure mode as well\n              node.mode = attr.mode;\n            }\n            if (attr.timestamp !== undefined) {\n              var date = new Date(attr.timestamp);\n              fs.utimesSync(path, date, date);\n            }\n            if (attr.size !== undefined) {\n              fs.truncateSync(path, attr.size);\n            }\n          } catch (e) {\n            if (!e.code) throw e;\n            throw new FS.ErrnoError(ERRNO_CODES[e.code]);\n          }\n        },lookup:function (parent, name) {\n          var path = PATH.join2(NODEFS.realPath(parent), name);\n          var mode = NODEFS.getMode(path);\n          return NODEFS.createNode(parent, name, mode);\n        },mknod:function (parent, name, mode, dev) {\n          var node = NODEFS.createNode(parent, name, mode, dev);\n          // create the backing node for this in the fs root as well\n          var path = NODEFS.realPath(node);\n          try {\n            if (FS.isDir(node.mode)) {\n              fs.mkdirSync(path, node.mode);\n            } else {\n              fs.writeFileSync(path, '', { mode: node.mode });\n            }\n          } catch (e) {\n            if (!e.code) throw e;\n            throw new FS.ErrnoError(ERRNO_CODES[e.code]);\n          }\n          return node;\n        },rename:function (oldNode, newDir, newName) {\n          var oldPath = NODEFS.realPath(oldNode);\n          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);\n          try {\n            fs.renameSync(oldPath, newPath);\n          } catch (e) {\n            if (!e.code) throw e;\n            throw new FS.ErrnoError(ERRNO_CODES[e.code]);\n          }\n        },unlink:function (parent, name) {\n          var path = PATH.join2(NODEFS.realPath(parent), name);\n          try {\n            fs.unlinkSync(path);\n          } catch (e) {\n            if (!e.code) throw e;\n            throw new FS.ErrnoError(ERRNO_CODES[e.code]);\n          }\n        },rmdir:function (parent, name) {\n          var path = PATH.join2(NODEFS.realPath(parent), name);\n          try {\n            fs.rmdirSync(path);\n          } catch (e) {\n            if (!e.code) throw e;\n            throw new FS.ErrnoError(ERRNO_CODES[e.code]);\n          }\n        },readdir:function (node) {\n          var path = NODEFS.realPath(node);\n          try {\n            return fs.readdirSync(path);\n          } catch (e) {\n            if (!e.code) throw e;\n            throw new FS.ErrnoError(ERRNO_CODES[e.code]);\n          }\n        },symlink:function (parent, newName, oldPath) {\n          var newPath = PATH.join2(NODEFS.realPath(parent), newName);\n          try {\n            fs.symlinkSync(oldPath, newPath);\n          } catch (e) {\n            if (!e.code) throw e;\n            throw new FS.ErrnoError(ERRNO_CODES[e.code]);\n          }\n        },readlink:function (node) {\n          var path = NODEFS.realPath(node);\n          try {\n            return fs.readlinkSync(path);\n          } catch (e) {\n            if (!e.code) throw e;\n            throw new FS.ErrnoError(ERRNO_CODES[e.code]);\n          }\n        }},stream_ops:{open:function (stream) {\n          var path = NODEFS.realPath(stream.node);\n          try {\n            if (FS.isFile(stream.node.mode)) {\n              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));\n            }\n          } catch (e) {\n            if (!e.code) throw e;\n            throw new FS.ErrnoError(ERRNO_CODES[e.code]);\n          }\n        },close:function (stream) {\n          try {\n            if (FS.isFile(stream.node.mode) && stream.nfd) {\n              fs.closeSync(stream.nfd);\n            }\n          } catch (e) {\n            if (!e.code) throw e;\n            throw new FS.ErrnoError(ERRNO_CODES[e.code]);\n          }\n        },read:function (stream, buffer, offset, length, position) {\n          // FIXME this is terrible.\n          var nbuffer = new Buffer(length);\n          var res;\n          try {\n            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);\n          } catch (e) {\n            throw new FS.ErrnoError(ERRNO_CODES[e.code]);\n          }\n          if (res > 0) {\n            for (var i = 0; i < res; i++) {\n              buffer[offset + i] = nbuffer[i];\n            }\n          }\n          return res;\n        },write:function (stream, buffer, offset, length, position) {\n          // FIXME this is terrible.\n          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));\n          var res;\n          try {\n            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);\n          } catch (e) {\n            throw new FS.ErrnoError(ERRNO_CODES[e.code]);\n          }\n          return res;\n        },llseek:function (stream, offset, whence) {\n          var position = offset;\n          if (whence === 1) {  // SEEK_CUR.\n            position += stream.position;\n          } else if (whence === 2) {  // SEEK_END.\n            if (FS.isFile(stream.node.mode)) {\n              try {\n                var stat = fs.fstatSync(stream.nfd);\n                position += stat.size;\n              } catch (e) {\n                throw new FS.ErrnoError(ERRNO_CODES[e.code]);\n              }\n            }\n          }\n  \n          if (position < 0) {\n            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);\n          }\n  \n          stream.position = position;\n          return position;\n        }}};\n  \n  var _stdin=allocate(1, \"i32*\", ALLOC_STATIC);\n  \n  var _stdout=allocate(1, \"i32*\", ALLOC_STATIC);\n  \n  var _stderr=allocate(1, \"i32*\", ALLOC_STATIC);\n  \n  function _fflush(stream) {\n      // int fflush(FILE *stream);\n      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html\n      // we don't currently perform any user-space buffering of data\n    }var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:\"/\",initialized:false,ignorePermissions:true,ErrnoError:null,genericErrors:{},handleFSError:function (e) {\n        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();\n        return ___setErrNo(e.errno);\n      },lookupPath:function (path, opts) {\n        path = PATH.resolve(FS.cwd(), path);\n        opts = opts || {};\n  \n        var defaults = {\n          follow_mount: true,\n          recurse_count: 0\n        };\n        for (var key in defaults) {\n          if (opts[key] === undefined) {\n            opts[key] = defaults[key];\n          }\n        }\n  \n        if (opts.recurse_count > 8) {  // max recursive lookup of 8\n          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);\n        }\n  \n        // split the path\n        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {\n          return !!p;\n        }), false);\n  \n        // start at the root\n        var current = FS.root;\n        var current_path = '/';\n  \n        for (var i = 0; i < parts.length; i++) {\n          var islast = (i === parts.length-1);\n          if (islast && opts.parent) {\n            // stop resolving\n            break;\n          }\n  \n          current = FS.lookupNode(current, parts[i]);\n          current_path = PATH.join2(current_path, parts[i]);\n  \n          // jump to the mount's root node if this is a mountpoint\n          if (FS.isMountpoint(current)) {\n            if (!islast || (islast && opts.follow_mount)) {\n              current = current.mounted.root;\n            }\n          }\n  \n          // by default, lookupPath will not follow a symlink if it is the final path component.\n          // setting opts.follow = true will override this behavior.\n          if (!islast || opts.follow) {\n            var count = 0;\n            while (FS.isLink(current.mode)) {\n              var link = FS.readlink(current_path);\n              current_path = PATH.resolve(PATH.dirname(current_path), link);\n              \n              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });\n              current = lookup.node;\n  \n              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).\n                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);\n              }\n            }\n          }\n        }\n  \n        return { path: current_path, node: current };\n      },getPath:function (node) {\n        var path;\n        while (true) {\n          if (FS.isRoot(node)) {\n            var mount = node.mount.mountpoint;\n            if (!path) return mount;\n            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;\n          }\n          path = path ? node.name + '/' + path : node.name;\n          node = node.parent;\n        }\n      },hashName:function (parentid, name) {\n        var hash = 0;\n  \n  \n        for (var i = 0; i < name.length; i++) {\n          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;\n        }\n        return ((parentid + hash) >>> 0) % FS.nameTable.length;\n      },hashAddNode:function (node) {\n        var hash = FS.hashName(node.parent.id, node.name);\n        node.name_next = FS.nameTable[hash];\n        FS.nameTable[hash] = node;\n      },hashRemoveNode:function (node) {\n        var hash = FS.hashName(node.parent.id, node.name);\n        if (FS.nameTable[hash] === node) {\n          FS.nameTable[hash] = node.name_next;\n        } else {\n          var current = FS.nameTable[hash];\n          while (current) {\n            if (current.name_next === node) {\n              current.name_next = node.name_next;\n              break;\n            }\n            current = current.name_next;\n          }\n        }\n      },lookupNode:function (parent, name) {\n        var err = FS.mayLookup(parent);\n        if (err) {\n          throw new FS.ErrnoError(err);\n        }\n        var hash = FS.hashName(parent.id, name);\n        for (var node = FS.nameTable[hash]; node; node = node.name_next) {\n          var nodeName = node.name;\n          if (node.parent.id === parent.id && nodeName === name) {\n            return node;\n          }\n        }\n        // if we failed to find it in the cache, call into the VFS\n        return FS.lookup(parent, name);\n      },createNode:function (parent, name, mode, rdev) {\n        if (!FS.FSNode) {\n          FS.FSNode = function(parent, name, mode, rdev) {\n            if (!parent) {\n              parent = this;  // root node sets parent to itself\n            }\n            this.parent = parent;\n            this.mount = parent.mount;\n            this.mounted = null;\n            this.id = FS.nextInode++;\n            this.name = name;\n            this.mode = mode;\n            this.node_ops = {};\n            this.stream_ops = {};\n            this.rdev = rdev;\n          };\n  \n          FS.FSNode.prototype = {};\n  \n          // compatibility\n          var readMode = 292 | 73;\n          var writeMode = 146;\n  \n          // NOTE we must use Object.defineProperties instead of individual calls to\n          // Object.defineProperty in order to make closure compiler happy\n          Object.defineProperties(FS.FSNode.prototype, {\n            read: {\n              get: function() { return (this.mode & readMode) === readMode; },\n              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }\n            },\n            write: {\n              get: function() { return (this.mode & writeMode) === writeMode; },\n              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }\n            },\n            isFolder: {\n              get: function() { return FS.isDir(this.mode); },\n            },\n            isDevice: {\n              get: function() { return FS.isChrdev(this.mode); },\n            },\n          });\n        }\n  \n        var node = new FS.FSNode(parent, name, mode, rdev);\n  \n        FS.hashAddNode(node);\n  \n        return node;\n      },destroyNode:function (node) {\n        FS.hashRemoveNode(node);\n      },isRoot:function (node) {\n        return node === node.parent;\n      },isMountpoint:function (node) {\n        return !!node.mounted;\n      },isFile:function (mode) {\n        return (mode & 61440) === 32768;\n      },isDir:function (mode) {\n        return (mode & 61440) === 16384;\n      },isLink:function (mode) {\n        return (mode & 61440) === 40960;\n      },isChrdev:function (mode) {\n        return (mode & 61440) === 8192;\n      },isBlkdev:function (mode) {\n        return (mode & 61440) === 24576;\n      },isFIFO:function (mode) {\n        return (mode & 61440) === 4096;\n      },isSocket:function (mode) {\n        return (mode & 49152) === 49152;\n      },flagModes:{\"r\":0,\"rs\":1052672,\"r+\":2,\"w\":577,\"wx\":705,\"xw\":705,\"w+\":578,\"wx+\":706,\"xw+\":706,\"a\":1089,\"ax\":1217,\"xa\":1217,\"a+\":1090,\"ax+\":1218,\"xa+\":1218},modeStringToFlags:function (str) {\n        var flags = FS.flagModes[str];\n        if (typeof flags === 'undefined') {\n          throw new Error('Unknown file open mode: ' + str);\n        }\n        return flags;\n      },flagsToPermissionString:function (flag) {\n        var accmode = flag & 2097155;\n        var perms = ['r', 'w', 'rw'][accmode];\n        if ((flag & 512)) {\n          perms += 'w';\n        }\n        return perms;\n      },nodePermissions:function (node, perms) {\n        if (FS.ignorePermissions) {\n          return 0;\n        }\n        // return 0 if any user, group or owner bits are set.\n        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {\n          return ERRNO_CODES.EACCES;\n        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {\n          return ERRNO_CODES.EACCES;\n        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {\n          return ERRNO_CODES.EACCES;\n        }\n        return 0;\n      },mayLookup:function (dir) {\n        return FS.nodePermissions(dir, 'x');\n      },mayCreate:function (dir, name) {\n        try {\n          var node = FS.lookupNode(dir, name);\n          return ERRNO_CODES.EEXIST;\n        } catch (e) {\n        }\n        return FS.nodePermissions(dir, 'wx');\n      },mayDelete:function (dir, name, isdir) {\n        var node;\n        try {\n          node = FS.lookupNode(dir, name);\n        } catch (e) {\n          return e.errno;\n        }\n        var err = FS.nodePermissions(dir, 'wx');\n        if (err) {\n          return err;\n        }\n        if (isdir) {\n          if (!FS.isDir(node.mode)) {\n            return ERRNO_CODES.ENOTDIR;\n          }\n          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {\n            return ERRNO_CODES.EBUSY;\n          }\n        } else {\n          if (FS.isDir(node.mode)) {\n            return ERRNO_CODES.EISDIR;\n          }\n        }\n        return 0;\n      },mayOpen:function (node, flags) {\n        if (!node) {\n          return ERRNO_CODES.ENOENT;\n        }\n        if (FS.isLink(node.mode)) {\n          return ERRNO_CODES.ELOOP;\n        } else if (FS.isDir(node.mode)) {\n          if ((flags & 2097155) !== 0 ||  // opening for write\n              (flags & 512)) {\n            return ERRNO_CODES.EISDIR;\n          }\n        }\n        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));\n      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {\n        fd_start = fd_start || 0;\n        fd_end = fd_end || FS.MAX_OPEN_FDS;\n        for (var fd = fd_start; fd <= fd_end; fd++) {\n          if (!FS.streams[fd]) {\n            return fd;\n          }\n        }\n        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);\n      },getStream:function (fd) {\n        return FS.streams[fd];\n      },createStream:function (stream, fd_start, fd_end) {\n        if (!FS.FSStream) {\n          FS.FSStream = function(){};\n          FS.FSStream.prototype = {};\n          // compatibility\n          Object.defineProperties(FS.FSStream.prototype, {\n            object: {\n              get: function() { return this.node; },\n              set: function(val) { this.node = val; }\n            },\n            isRead: {\n              get: function() { return (this.flags & 2097155) !== 1; }\n            },\n            isWrite: {\n              get: function() { return (this.flags & 2097155) !== 0; }\n            },\n            isAppend: {\n              get: function() { return (this.flags & 1024); }\n            }\n          });\n        }\n        if (stream.__proto__) {\n          // reuse the object\n          stream.__proto__ = FS.FSStream.prototype;\n        } else {\n          var newStream = new FS.FSStream();\n          for (var p in stream) {\n            newStream[p] = stream[p];\n          }\n          stream = newStream;\n        }\n        var fd = FS.nextfd(fd_start, fd_end);\n        stream.fd = fd;\n        FS.streams[fd] = stream;\n        return stream;\n      },closeStream:function (fd) {\n        FS.streams[fd] = null;\n      },getStreamFromPtr:function (ptr) {\n        return FS.streams[ptr - 1];\n      },getPtrForStream:function (stream) {\n        return stream ? stream.fd + 1 : 0;\n      },chrdev_stream_ops:{open:function (stream) {\n          var device = FS.getDevice(stream.node.rdev);\n          // override node's stream ops with the device's\n          stream.stream_ops = device.stream_ops;\n          // forward the open call\n          if (stream.stream_ops.open) {\n            stream.stream_ops.open(stream);\n          }\n        },llseek:function () {\n          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);\n        }},major:function (dev) {\n        return ((dev) >> 8);\n      },minor:function (dev) {\n        return ((dev) & 0xff);\n      },makedev:function (ma, mi) {\n        return ((ma) << 8 | (mi));\n      },registerDevice:function (dev, ops) {\n        FS.devices[dev] = { stream_ops: ops };\n      },getDevice:function (dev) {\n        return FS.devices[dev];\n      },getMounts:function (mount) {\n        var mounts = [];\n        var check = [mount];\n  \n        while (check.length) {\n          var m = check.pop();\n  \n          mounts.push(m);\n  \n          check.push.apply(check, m.mounts);\n        }\n  \n        return mounts;\n      },syncfs:function (populate, callback) {\n        if (typeof(populate) === 'function') {\n          callback = populate;\n          populate = false;\n        }\n  \n        var mounts = FS.getMounts(FS.root.mount);\n        var completed = 0;\n  \n        function done(err) {\n          if (err) {\n            if (!done.errored) {\n              done.errored = true;\n              return callback(err);\n            }\n            return;\n          }\n          if (++completed >= mounts.length) {\n            callback(null);\n          }\n        };\n  \n        // sync all mounts\n        mounts.forEach(function (mount) {\n          if (!mount.type.syncfs) {\n            return done(null);\n          }\n          mount.type.syncfs(mount, populate, done);\n        });\n      },mount:function (type, opts, mountpoint) {\n        var root = mountpoint === '/';\n        var pseudo = !mountpoint;\n        var node;\n  \n        if (root && FS.root) {\n          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);\n        } else if (!root && !pseudo) {\n          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });\n  \n          mountpoint = lookup.path;  // use the absolute path\n          node = lookup.node;\n  \n          if (FS.isMountpoint(node)) {\n            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);\n          }\n  \n          if (!FS.isDir(node.mode)) {\n            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);\n          }\n        }\n  \n        var mount = {\n          type: type,\n          opts: opts,\n          mountpoint: mountpoint,\n          mounts: []\n        };\n  \n        // create a root node for the fs\n        var mountRoot = type.mount(mount);\n        mountRoot.mount = mount;\n        mount.root = mountRoot;\n  \n        if (root) {\n          FS.root = mountRoot;\n        } else if (node) {\n          // set as a mountpoint\n          node.mounted = mount;\n  \n          // add the new mount to the current mount's children\n          if (node.mount) {\n            node.mount.mounts.push(mount);\n          }\n        }\n  \n        return mountRoot;\n      },unmount:function (mountpoint) {\n        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });\n  \n        if (!FS.isMountpoint(lookup.node)) {\n          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);\n        }\n  \n        // destroy the nodes for this mount, and all its child mounts\n        var node = lookup.node;\n        var mount = node.mounted;\n        var mounts = FS.getMounts(mount);\n  \n        Object.keys(FS.nameTable).forEach(function (hash) {\n          var current = FS.nameTable[hash];\n  \n          while (current) {\n            var next = current.name_next;\n  \n            if (mounts.indexOf(current.mount) !== -1) {\n              FS.destroyNode(current);\n            }\n  \n            current = next;\n          }\n        });\n  \n        // no longer a mountpoint\n        node.mounted = null;\n  \n        // remove this mount from the child mounts\n        var idx = node.mount.mounts.indexOf(mount);\n        assert(idx !== -1);\n        node.mount.mounts.splice(idx, 1);\n      },lookup:function (parent, name) {\n        return parent.node_ops.lookup(parent, name);\n      },mknod:function (path, mode, dev) {\n        var lookup = FS.lookupPath(path, { parent: true });\n        var parent = lookup.node;\n        var name = PATH.basename(path);\n        var err = FS.mayCreate(parent, name);\n        if (err) {\n          throw new FS.ErrnoError(err);\n        }\n        if (!parent.node_ops.mknod) {\n          throw new FS.ErrnoError(ERRNO_CODES.EPERM);\n        }\n        return parent.node_ops.mknod(parent, name, mode, dev);\n      },create:function (path, mode) {\n        mode = mode !== undefined ? mode : 438 /* 0666 */;\n        mode &= 4095;\n        mode |= 32768;\n        return FS.mknod(path, mode, 0);\n      },mkdir:function (path, mode) {\n        mode = mode !== undefined ? mode : 511 /* 0777 */;\n        mode &= 511 | 512;\n        mode |= 16384;\n        return FS.mknod(path, mode, 0);\n      },mkdev:function (path, mode, dev) {\n        if (typeof(dev) === 'undefined') {\n          dev = mode;\n          mode = 438 /* 0666 */;\n        }\n        mode |= 8192;\n        return FS.mknod(path, mode, dev);\n      },symlink:function (oldpath, newpath) {\n        var lookup = FS.lookupPath(newpath, { parent: true });\n        var parent = lookup.node;\n        var newname = PATH.basename(newpath);\n        var err = FS.mayCreate(parent, newname);\n        if (err) {\n          throw new FS.ErrnoError(err);\n        }\n        if (!parent.node_ops.symlink) {\n          throw new FS.ErrnoError(ERRNO_CODES.EPERM);\n        }\n        return parent.node_ops.symlink(parent, newname, oldpath);\n      },rename:function (old_path, new_path) {\n        var old_dirname = PATH.dirname(old_path);\n        var new_dirname = PATH.dirname(new_path);\n        var old_name = PATH.basename(old_path);\n        var new_name = PATH.basename(new_path);\n        // parents must exist\n        var lookup, old_dir, new_dir;\n        try {\n          lookup = FS.lookupPath(old_path, { parent: true });\n          old_dir = lookup.node;\n          lookup = FS.lookupPath(new_path, { parent: true });\n          new_dir = lookup.node;\n        } catch (e) {\n          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);\n        }\n        // need to be part of the same mount\n        if (old_dir.mount !== new_dir.mount) {\n          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);\n        }\n        // source must exist\n        var old_node = FS.lookupNode(old_dir, old_name);\n        // old path should not be an ancestor of the new path\n        var relative = PATH.relative(old_path, new_dirname);\n        if (relative.charAt(0) !== '.') {\n          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);\n        }\n        // new path should not be an ancestor of the old path\n        relative = PATH.relative(new_path, old_dirname);\n        if (relative.charAt(0) !== '.') {\n          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);\n        }\n        // see if the new path already exists\n        var new_node;\n        try {\n          new_node = FS.lookupNode(new_dir, new_name);\n        } catch (e) {\n          // not fatal\n        }\n        // early out if nothing needs to change\n        if (old_node === new_node) {\n          return;\n        }\n        // we'll need to delete the old entry\n        var isdir = FS.isDir(old_node.mode);\n        var err = FS.mayDelete(old_dir, old_name, isdir);\n        if (err) {\n          throw new FS.ErrnoError(err);\n        }\n        // need delete permissions if we'll be overwriting.\n        // need create permissions if new doesn't already exist.\n        err = new_node ?\n          FS.mayDelete(new_dir, new_name, isdir) :\n          FS.mayCreate(new_dir, new_name);\n        if (err) {\n          throw new FS.ErrnoError(err);\n        }\n        if (!old_dir.node_ops.rename) {\n          throw new FS.ErrnoError(ERRNO_CODES.EPERM);\n        }\n        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {\n          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);\n        }\n        // if we are going to change the parent, check write permissions\n        if (new_dir !== old_dir) {\n          err = FS.nodePermissions(old_dir, 'w');\n          if (err) {\n            throw new FS.ErrnoError(err);\n          }\n        }\n        // remove the node from the lookup hash\n        FS.hashRemoveNode(old_node);\n        // do the underlying fs rename\n        try {\n          old_dir.node_ops.rename(old_node, new_dir, new_name);\n        } catch (e) {\n          throw e;\n        } finally {\n          // add the node back to the hash (in case node_ops.rename\n          // changed its name)\n          FS.hashAddNode(old_node);\n        }\n      },rmdir:function (path) {\n        var lookup = FS.lookupPath(path, { parent: true });\n        var parent = lookup.node;\n        var name = PATH.basename(path);\n        var node = FS.lookupNode(parent, name);\n        var err = FS.mayDelete(parent, name, true);\n        if (err) {\n          throw new FS.ErrnoError(err);\n        }\n        if (!parent.node_ops.rmdir) {\n          throw new FS.ErrnoError(ERRNO_CODES.EPERM);\n        }\n        if (FS.isMountpoint(node)) {\n          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);\n        }\n        parent.node_ops.rmdir(parent, name);\n        FS.destroyNode(node);\n      },readdir:function (path) {\n        var lookup = FS.lookupPath(path, { follow: true });\n        var node = lookup.node;\n        if (!node.node_ops.readdir) {\n          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);\n        }\n        return node.node_ops.readdir(node);\n      },unlink:function (path) {\n        var lookup = FS.lookupPath(path, { parent: true });\n        var parent = lookup.node;\n        var name = PATH.basename(path);\n        var node = FS.lookupNode(parent, name);\n        var err = FS.mayDelete(parent, name, false);\n        if (err) {\n          // POSIX says unlink should set EPERM, not EISDIR\n          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;\n          throw new FS.ErrnoError(err);\n        }\n        if (!parent.node_ops.unlink) {\n          throw new FS.ErrnoError(ERRNO_CODES.EPERM);\n        }\n        if (FS.isMountpoint(node)) {\n          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);\n        }\n        parent.node_ops.unlink(parent, name);\n        FS.destroyNode(node);\n      },readlink:function (path) {\n        var lookup = FS.lookupPath(path);\n        var link = lookup.node;\n        if (!link.node_ops.readlink) {\n          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);\n        }\n        return link.node_ops.readlink(link);\n      },stat:function (path, dontFollow) {\n        var lookup = FS.lookupPath(path, { follow: !dontFollow });\n        var node = lookup.node;\n        if (!node.node_ops.getattr) {\n          throw new FS.ErrnoError(ERRNO_CODES.EPERM);\n        }\n        return node.node_ops.getattr(node);\n      },lstat:function (path) {\n        return FS.stat(path, true);\n      },chmod:function (path, mode, dontFollow) {\n        var node;\n        if (typeof path === 'string') {\n          var lookup = FS.lookupPath(path, { follow: !dontFollow });\n          node = lookup.node;\n        } else {\n          node = path;\n        }\n        if (!node.node_ops.setattr) {\n          throw new FS.ErrnoError(ERRNO_CODES.EPERM);\n        }\n        node.node_ops.setattr(node, {\n          mode: (mode & 4095) | (node.mode & ~4095),\n          timestamp: Date.now()\n        });\n      },lchmod:function (path, mode) {\n        FS.chmod(path, mode, true);\n      },fchmod:function (fd, mode) {\n        var stream = FS.getStream(fd);\n        if (!stream) {\n          throw new FS.ErrnoError(ERRNO_CODES.EBADF);\n        }\n        FS.chmod(stream.node, mode);\n      },chown:function (path, uid, gid, dontFollow) {\n        var node;\n        if (typeof path === 'string') {\n          var lookup = FS.lookupPath(path, { follow: !dontFollow });\n          node = lookup.node;\n        } else {\n          node = path;\n        }\n        if (!node.node_ops.setattr) {\n          throw new FS.ErrnoError(ERRNO_CODES.EPERM);\n        }\n        node.node_ops.setattr(node, {\n          timestamp: Date.now()\n          // we ignore the uid / gid for now\n        });\n      },lchown:function (path, uid, gid) {\n        FS.chown(path, uid, gid, true);\n      },fchown:function (fd, uid, gid) {\n        var stream = FS.getStream(fd);\n        if (!stream) {\n          throw new FS.ErrnoError(ERRNO_CODES.EBADF);\n        }\n        FS.chown(stream.node, uid, gid);\n      },truncate:function (path, len) {\n        if (len < 0) {\n          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);\n        }\n        var node;\n        if (typeof path === 'string') {\n          var lookup = FS.lookupPath(path, { follow: true });\n          node = lookup.node;\n        } else {\n          node = path;\n        }\n        if (!node.node_ops.setattr) {\n          throw new FS.ErrnoError(ERRNO_CODES.EPERM);\n        }\n        if (FS.isDir(node.mode)) {\n          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);\n        }\n        if (!FS.isFile(node.mode)) {\n          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);\n        }\n        var err = FS.nodePermissions(node, 'w');\n        if (err) {\n          throw new FS.ErrnoError(err);\n        }\n        node.node_ops.setattr(node, {\n          size: len,\n          timestamp: Date.now()\n        });\n      },ftruncate:function (fd, len) {\n        var stream = FS.getStream(fd);\n        if (!stream) {\n          throw new FS.ErrnoError(ERRNO_CODES.EBADF);\n        }\n        if ((stream.flags & 2097155) === 0) {\n          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);\n        }\n        FS.truncate(stream.node, len);\n      },utime:function (path, atime, mtime) {\n        var lookup = FS.lookupPath(path, { follow: true });\n        var node = lookup.node;\n        node.node_ops.setattr(node, {\n          timestamp: Math.max(atime, mtime)\n        });\n      },open:function (path, flags, mode, fd_start, fd_end) {\n        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;\n        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;\n        if ((flags & 64)) {\n          mode = (mode & 4095) | 32768;\n        } else {\n          mode = 0;\n        }\n        var node;\n        if (typeof path === 'object') {\n          node = path;\n        } else {\n          path = PATH.normalize(path);\n          try {\n            var lookup = FS.lookupPath(path, {\n              follow: !(flags & 131072)\n            });\n            node = lookup.node;\n          } catch (e) {\n            // ignore\n          }\n        }\n        // perhaps we need to create the node\n        if ((flags & 64)) {\n          if (node) {\n            // if O_CREAT and O_EXCL are set, error out if the node already exists\n            if ((flags & 128)) {\n              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);\n            }\n          } else {\n            // node doesn't exist, try to create it\n            node = FS.mknod(path, mode, 0);\n          }\n        }\n        if (!node) {\n          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);\n        }\n        // can't truncate a device\n        if (FS.isChrdev(node.mode)) {\n          flags &= ~512;\n        }\n        // check permissions\n        var err = FS.mayOpen(node, flags);\n        if (err) {\n          throw new FS.ErrnoError(err);\n        }\n        // do truncation if necessary\n        if ((flags & 512)) {\n          FS.truncate(node, 0);\n        }\n        // we've already handled these, don't pass down to the underlying vfs\n        flags &= ~(128 | 512);\n  \n        // register the stream with the filesystem\n        var stream = FS.createStream({\n          node: node,\n          path: FS.getPath(node),  // we want the absolute path to the node\n          flags: flags,\n          seekable: true,\n          position: 0,\n          stream_ops: node.stream_ops,\n          // used by the file family libc calls (fopen, fwrite, ferror, etc.)\n          ungotten: [],\n          error: false\n        }, fd_start, fd_end);\n        // call the new stream's open function\n        if (stream.stream_ops.open) {\n          stream.stream_ops.open(stream);\n        }\n        if (Module['logReadFiles'] && !(flags & 1)) {\n          if (!FS.readFiles) FS.readFiles = {};\n          if (!(path in FS.readFiles)) {\n            FS.readFiles[path] = 1;\n            Module['printErr']('read file: ' + path);\n          }\n        }\n        return stream;\n      },close:function (stream) {\n        try {\n          if (stream.stream_ops.close) {\n            stream.stream_ops.close(stream);\n          }\n        } catch (e) {\n          throw e;\n        } finally {\n          FS.closeStream(stream.fd);\n        }\n      },llseek:function (stream, offset, whence) {\n        if (!stream.seekable || !stream.stream_ops.llseek) {\n          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);\n        }\n        return stream.stream_ops.llseek(stream, offset, whence);\n      },read:function (stream, buffer, offset, length, position) {\n        if (length < 0 || position < 0) {\n          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);\n        }\n        if ((stream.flags & 2097155) === 1) {\n          throw new FS.ErrnoError(ERRNO_CODES.EBADF);\n        }\n        if (FS.isDir(stream.node.mode)) {\n          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);\n        }\n        if (!stream.stream_ops.read) {\n          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);\n        }\n        var seeking = true;\n        if (typeof position === 'undefined') {\n          position = stream.position;\n          seeking = false;\n        } else if (!stream.seekable) {\n          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);\n        }\n        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);\n        if (!seeking) stream.position += bytesRead;\n        return bytesRead;\n      },write:function (stream, buffer, offset, length, position, canOwn) {\n        if (length < 0 || position < 0) {\n          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);\n        }\n        if ((stream.flags & 2097155) === 0) {\n          throw new FS.ErrnoError(ERRNO_CODES.EBADF);\n        }\n        if (FS.isDir(stream.node.mode)) {\n          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);\n        }\n        if (!stream.stream_ops.write) {\n          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);\n        }\n        var seeking = true;\n        if (typeof position === 'undefined') {\n          position = stream.position;\n          seeking = false;\n        } else if (!stream.seekable) {\n          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);\n        }\n        if (stream.flags & 1024) {\n          // seek to the end before writing in append mode\n          FS.llseek(stream, 0, 2);\n        }\n        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);\n        if (!seeking) stream.position += bytesWritten;\n        return bytesWritten;\n      },allocate:function (stream, offset, length) {\n        if (offset < 0 || length <= 0) {\n          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);\n        }\n        if ((stream.flags & 2097155) === 0) {\n          throw new FS.ErrnoError(ERRNO_CODES.EBADF);\n        }\n        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {\n          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);\n        }\n        if (!stream.stream_ops.allocate) {\n          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);\n        }\n        stream.stream_ops.allocate(stream, offset, length);\n      },mmap:function (stream, buffer, offset, length, position, prot, flags) {\n        // TODO if PROT is PROT_WRITE, make sure we have write access\n        if ((stream.flags & 2097155) === 1) {\n          throw new FS.ErrnoError(ERRNO_CODES.EACCES);\n        }\n        if (!stream.stream_ops.mmap) {\n          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);\n        }\n        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);\n      },ioctl:function (stream, cmd, arg) {\n        if (!stream.stream_ops.ioctl) {\n          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);\n        }\n        return stream.stream_ops.ioctl(stream, cmd, arg);\n      },readFile:function (path, opts) {\n        opts = opts || {};\n        opts.flags = opts.flags || 'r';\n        opts.encoding = opts.encoding || 'binary';\n        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {\n          throw new Error('Invalid encoding type \"' + opts.encoding + '\"');\n        }\n        var ret;\n        var stream = FS.open(path, opts.flags);\n        var stat = FS.stat(path);\n        var length = stat.size;\n        var buf = new Uint8Array(length);\n        FS.read(stream, buf, 0, length, 0);\n        if (opts.encoding === 'utf8') {\n          ret = '';\n          var utf8 = new Runtime.UTF8Processor();\n          for (var i = 0; i < length; i++) {\n            ret += utf8.processCChar(buf[i]);\n          }\n        } else if (opts.encoding === 'binary') {\n          ret = buf;\n        }\n        FS.close(stream);\n        return ret;\n      },writeFile:function (path, data, opts) {\n        opts = opts || {};\n        opts.flags = opts.flags || 'w';\n        opts.encoding = opts.encoding || 'utf8';\n        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {\n          throw new Error('Invalid encoding type \"' + opts.encoding + '\"');\n        }\n        var stream = FS.open(path, opts.flags, opts.mode);\n        if (opts.encoding === 'utf8') {\n          var utf8 = new Runtime.UTF8Processor();\n          var buf = new Uint8Array(utf8.processJSString(data));\n          FS.write(stream, buf, 0, buf.length, 0, opts.canOwn);\n        } else if (opts.encoding === 'binary') {\n          FS.write(stream, data, 0, data.length, 0, opts.canOwn);\n        }\n        FS.close(stream);\n      },cwd:function () {\n        return FS.currentPath;\n      },chdir:function (path) {\n        var lookup = FS.lookupPath(path, { follow: true });\n        if (!FS.isDir(lookup.node.mode)) {\n          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);\n        }\n        var err = FS.nodePermissions(lookup.node, 'x');\n        if (err) {\n          throw new FS.ErrnoError(err);\n        }\n        FS.currentPath = lookup.path;\n      },createDefaultDirectories:function () {\n        FS.mkdir('/tmp');\n      },createDefaultDevices:function () {\n        // create /dev\n        FS.mkdir('/dev');\n        // setup /dev/null\n        FS.registerDevice(FS.makedev(1, 3), {\n          read: function() { return 0; },\n          write: function() { return 0; }\n        });\n        FS.mkdev('/dev/null', FS.makedev(1, 3));\n        // setup /dev/tty and /dev/tty1\n        // stderr needs to print output using Module['printErr']\n        // so we register a second tty just for it.\n        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);\n        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);\n        FS.mkdev('/dev/tty', FS.makedev(5, 0));\n        FS.mkdev('/dev/tty1', FS.makedev(6, 0));\n        // we're not going to emulate the actual shm device,\n        // just create the tmp dirs that reside in it commonly\n        FS.mkdir('/dev/shm');\n        FS.mkdir('/dev/shm/tmp');\n      },createStandardStreams:function () {\n        // TODO deprecate the old functionality of a single\n        // input / output callback and that utilizes FS.createDevice\n        // and instead require a unique set of stream ops\n  \n        // by default, we symlink the standard streams to the\n        // default tty devices. however, if the standard streams\n        // have been overwritten we create a unique device for\n        // them instead.\n        if (Module['stdin']) {\n          FS.createDevice('/dev', 'stdin', Module['stdin']);\n        } else {\n          FS.symlink('/dev/tty', '/dev/stdin');\n        }\n        if (Module['stdout']) {\n          FS.createDevice('/dev', 'stdout', null, Module['stdout']);\n        } else {\n          FS.symlink('/dev/tty', '/dev/stdout');\n        }\n        if (Module['stderr']) {\n          FS.createDevice('/dev', 'stderr', null, Module['stderr']);\n        } else {\n          FS.symlink('/dev/tty1', '/dev/stderr');\n        }\n  \n        // open default streams for the stdin, stdout and stderr devices\n        var stdin = FS.open('/dev/stdin', 'r');\n        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);\n        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');\n  \n        var stdout = FS.open('/dev/stdout', 'w');\n        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);\n        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');\n  \n        var stderr = FS.open('/dev/stderr', 'w');\n        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);\n        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');\n      },ensureErrnoError:function () {\n        if (FS.ErrnoError) return;\n        FS.ErrnoError = function ErrnoError(errno) {\n          this.errno = errno;\n          for (var key in ERRNO_CODES) {\n            if (ERRNO_CODES[key] === errno) {\n              this.code = key;\n              break;\n            }\n          }\n          this.message = ERRNO_MESSAGES[errno];\n        };\n        FS.ErrnoError.prototype = new Error();\n        FS.ErrnoError.prototype.constructor = FS.ErrnoError;\n        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)\n        [ERRNO_CODES.ENOENT].forEach(function(code) {\n          FS.genericErrors[code] = new FS.ErrnoError(code);\n          FS.genericErrors[code].stack = '<generic error, no stack>';\n        });\n      },staticInit:function () {\n        FS.ensureErrnoError();\n  \n        FS.nameTable = new Array(4096);\n  \n        FS.mount(MEMFS, {}, '/');\n  \n        FS.createDefaultDirectories();\n        FS.createDefaultDevices();\n      },init:function (input, output, error) {\n        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');\n        FS.init.initialized = true;\n  \n        FS.ensureErrnoError();\n  \n        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here\n        Module['stdin'] = input || Module['stdin'];\n        Module['stdout'] = output || Module['stdout'];\n        Module['stderr'] = error || Module['stderr'];\n  \n        FS.createStandardStreams();\n      },quit:function () {\n        FS.init.initialized = false;\n        for (var i = 0; i < FS.streams.length; i++) {\n          var stream = FS.streams[i];\n          if (!stream) {\n            continue;\n          }\n          FS.close(stream);\n        }\n      },getMode:function (canRead, canWrite) {\n        var mode = 0;\n        if (canRead) mode |= 292 | 73;\n        if (canWrite) mode |= 146;\n        return mode;\n      },joinPath:function (parts, forceRelative) {\n        var path = PATH.join.apply(null, parts);\n        if (forceRelative && path[0] == '/') path = path.substr(1);\n        return path;\n      },absolutePath:function (relative, base) {\n        return PATH.resolve(base, relative);\n      },standardizePath:function (path) {\n        return PATH.normalize(path);\n      },findObject:function (path, dontResolveLastLink) {\n        var ret = FS.analyzePath(path, dontResolveLastLink);\n        if (ret.exists) {\n          return ret.object;\n        } else {\n          ___setErrNo(ret.error);\n          return null;\n        }\n      },analyzePath:function (path, dontResolveLastLink) {\n        // operate from within the context of the symlink's target\n        try {\n          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });\n          path = lookup.path;\n        } catch (e) {\n        }\n        var ret = {\n          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,\n          parentExists: false, parentPath: null, parentObject: null\n        };\n        try {\n          var lookup = FS.lookupPath(path, { parent: true });\n          ret.parentExists = true;\n          ret.parentPath = lookup.path;\n          ret.parentObject = lookup.node;\n          ret.name = PATH.basename(path);\n          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });\n          ret.exists = true;\n          ret.path = lookup.path;\n          ret.object = lookup.node;\n          ret.name = lookup.node.name;\n          ret.isRoot = lookup.path === '/';\n        } catch (e) {\n          ret.error = e.errno;\n        };\n        return ret;\n      },createFolder:function (parent, name, canRead, canWrite) {\n        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);\n        var mode = FS.getMode(canRead, canWrite);\n        return FS.mkdir(path, mode);\n      },createPath:function (parent, path, canRead, canWrite) {\n        parent = typeof parent === 'string' ? parent : FS.getPath(parent);\n        var parts = path.split('/').reverse();\n        while (parts.length) {\n          var part = parts.pop();\n          if (!part) continue;\n          var current = PATH.join2(parent, part);\n          try {\n            FS.mkdir(current);\n          } catch (e) {\n            // ignore EEXIST\n          }\n          parent = current;\n        }\n        return current;\n      },createFile:function (parent, name, properties, canRead, canWrite) {\n        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);\n        var mode = FS.getMode(canRead, canWrite);\n        return FS.create(path, mode);\n      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {\n        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;\n        var mode = FS.getMode(canRead, canWrite);\n        var node = FS.create(path, mode);\n        if (data) {\n          if (typeof data === 'string') {\n            var arr = new Array(data.length);\n            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);\n            data = arr;\n          }\n          // make sure we can write to the file\n          FS.chmod(node, mode | 146);\n          var stream = FS.open(node, 'w');\n          FS.write(stream, data, 0, data.length, 0, canOwn);\n          FS.close(stream);\n          FS.chmod(node, mode);\n        }\n        return node;\n      },createDevice:function (parent, name, input, output) {\n        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);\n        var mode = FS.getMode(!!input, !!output);\n        if (!FS.createDevice.major) FS.createDevice.major = 64;\n        var dev = FS.makedev(FS.createDevice.major++, 0);\n        // Create a fake device that a set of stream ops to emulate\n        // the old behavior.\n        FS.registerDevice(dev, {\n          open: function(stream) {\n            stream.seekable = false;\n          },\n          close: function(stream) {\n            // flush any pending line data\n            if (output && output.buffer && output.buffer.length) {\n              output(10);\n            }\n          },\n          read: function(stream, buffer, offset, length, pos /* ignored */) {\n            var bytesRead = 0;\n            for (var i = 0; i < length; i++) {\n              var result;\n              try {\n                result = input();\n              } catch (e) {\n                throw new FS.ErrnoError(ERRNO_CODES.EIO);\n              }\n              if (result === undefined && bytesRead === 0) {\n                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);\n              }\n              if (result === null || result === undefined) break;\n              bytesRead++;\n              buffer[offset+i] = result;\n            }\n            if (bytesRead) {\n              stream.node.timestamp = Date.now();\n            }\n            return bytesRead;\n          },\n          write: function(stream, buffer, offset, length, pos) {\n            for (var i = 0; i < length; i++) {\n              try {\n                output(buffer[offset+i]);\n              } catch (e) {\n                throw new FS.ErrnoError(ERRNO_CODES.EIO);\n              }\n            }\n            if (length) {\n              stream.node.timestamp = Date.now();\n            }\n            return i;\n          }\n        });\n        return FS.mkdev(path, mode, dev);\n      },createLink:function (parent, name, target, canRead, canWrite) {\n        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);\n        return FS.symlink(target, path);\n      },forceLoadFile:function (obj) {\n        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;\n        var success = true;\n        if (typeof XMLHttpRequest !== 'undefined') {\n          throw new Error(\"Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.\");\n        } else if (Module['read']) {\n          // Command-line.\n          try {\n            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as\n            //          read() will try to parse UTF8.\n            obj.contents = intArrayFromString(Module['read'](obj.url), true);\n          } catch (e) {\n            success = false;\n          }\n        } else {\n          throw new Error('Cannot load without read() or XMLHttpRequest.');\n        }\n        if (!success) ___setErrNo(ERRNO_CODES.EIO);\n        return success;\n      },createLazyFile:function (parent, name, url, canRead, canWrite) {\n        if (typeof XMLHttpRequest !== 'undefined') {\n          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';\n          // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.\n          function LazyUint8Array() {\n            this.lengthKnown = false;\n            this.chunks = []; // Loaded chunks. Index is the chunk number\n          }\n          LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {\n            if (idx > this.length-1 || idx < 0) {\n              return undefined;\n            }\n            var chunkOffset = idx % this.chunkSize;\n            var chunkNum = Math.floor(idx / this.chunkSize);\n            return this.getter(chunkNum)[chunkOffset];\n          }\n          LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {\n            this.getter = getter;\n          }\n          LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {\n              // Find length\n              var xhr = new XMLHttpRequest();\n              xhr.open('HEAD', url, false);\n              xhr.send(null);\n              if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error(\"Couldn't load \" + url + \". Status: \" + xhr.status);\n              var datalength = Number(xhr.getResponseHeader(\"Content-length\"));\n              var header;\n              var hasByteServing = (header = xhr.getResponseHeader(\"Accept-Ranges\")) && header === \"bytes\";\n              var chunkSize = 1024*1024; // Chunk size in bytes\n  \n              if (!hasByteServing) chunkSize = datalength;\n  \n              // Function to get a range from the remote URL.\n              var doXHR = (function(from, to) {\n                if (from > to) throw new Error(\"invalid range (\" + from + \", \" + to + \") or no bytes requested!\");\n                if (to > datalength-1) throw new Error(\"only \" + datalength + \" bytes available! programmer error!\");\n  \n                // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.\n                var xhr = new XMLHttpRequest();\n                xhr.open('GET', url, false);\n                if (datalength !== chunkSize) xhr.setRequestHeader(\"Range\", \"bytes=\" + from + \"-\" + to);\n  \n                // Some hints to the browser that we want binary data.\n                if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';\n                if (xhr.overrideMimeType) {\n                  xhr.overrideMimeType('text/plain; charset=x-user-defined');\n                }\n  \n                xhr.send(null);\n                if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error(\"Couldn't load \" + url + \". Status: \" + xhr.status);\n                if (xhr.response !== undefined) {\n                  return new Uint8Array(xhr.response || []);\n                } else {\n                  return intArrayFromString(xhr.responseText || '', true);\n                }\n              });\n              var lazyArray = this;\n              lazyArray.setDataGetter(function(chunkNum) {\n                var start = chunkNum * chunkSize;\n                var end = (chunkNum+1) * chunkSize - 1; // including this byte\n                end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block\n                if (typeof(lazyArray.chunks[chunkNum]) === \"undefined\") {\n                  lazyArray.chunks[chunkNum] = doXHR(start, end);\n                }\n                if (typeof(lazyArray.chunks[chunkNum]) === \"undefined\") throw new Error(\"doXHR failed!\");\n                return lazyArray.chunks[chunkNum];\n              });\n  \n              this._length = datalength;\n              this._chunkSize = chunkSize;\n              this.lengthKnown = true;\n          }\n  \n          var lazyArray = new LazyUint8Array();\n          Object.defineProperty(lazyArray, \"length\", {\n              get: function() {\n                  if(!this.lengthKnown) {\n                      this.cacheLength();\n                  }\n                  return this._length;\n              }\n          });\n          Object.defineProperty(lazyArray, \"chunkSize\", {\n              get: function() {\n                  if(!this.lengthKnown) {\n                      this.cacheLength();\n                  }\n                  return this._chunkSize;\n              }\n          });\n  \n          var properties = { isDevice: false, contents: lazyArray };\n        } else {\n          var properties = { isDevice: false, url: url };\n        }\n  \n        var node = FS.createFile(parent, name, properties, canRead, canWrite);\n        // This is a total hack, but I want to get this lazy file code out of the\n        // core of MEMFS. If we want to keep this lazy file concept I feel it should\n        // be its own thin LAZYFS proxying calls to MEMFS.\n        if (properties.contents) {\n          node.contents = properties.contents;\n        } else if (properties.url) {\n          node.contents = null;\n          node.url = properties.url;\n        }\n        // override each stream op with one that tries to force load the lazy file first\n        var stream_ops = {};\n        var keys = Object.keys(node.stream_ops);\n        keys.forEach(function(key) {\n          var fn = node.stream_ops[key];\n          stream_ops[key] = function forceLoadLazyFile() {\n            if (!FS.forceLoadFile(node)) {\n              throw new FS.ErrnoError(ERRNO_CODES.EIO);\n            }\n            return fn.apply(null, arguments);\n          };\n        });\n        // use a custom read function\n        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {\n          if (!FS.forceLoadFile(node)) {\n            throw new FS.ErrnoError(ERRNO_CODES.EIO);\n          }\n          var contents = stream.node.contents;\n          if (position >= contents.length)\n            return 0;\n          var size = Math.min(contents.length - position, length);\n          assert(size >= 0);\n          if (contents.slice) { // normal array\n            for (var i = 0; i < size; i++) {\n              buffer[offset + i] = contents[position + i];\n            }\n          } else {\n            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR\n              buffer[offset + i] = contents.get(position + i);\n            }\n          }\n          return size;\n        };\n        node.stream_ops = stream_ops;\n        return node;\n      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {\n        Browser.init();\n        // TODO we should allow people to just pass in a complete filename instead\n        // of parent and name being that we just join them anyways\n        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;\n        function processData(byteArray) {\n          function finish(byteArray) {\n            if (!dontCreateFile) {\n              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);\n            }\n            if (onload) onload();\n            removeRunDependency('cp ' + fullname);\n          }\n          var handled = false;\n          Module['preloadPlugins'].forEach(function(plugin) {\n            if (handled) return;\n            if (plugin['canHandle'](fullname)) {\n              plugin['handle'](byteArray, fullname, finish, function() {\n                if (onerror) onerror();\n                removeRunDependency('cp ' + fullname);\n              });\n              handled = true;\n            }\n          });\n          if (!handled) finish(byteArray);\n        }\n        addRunDependency('cp ' + fullname);\n        if (typeof url == 'string') {\n          Browser.asyncLoad(url, function(byteArray) {\n            processData(byteArray);\n          }, onerror);\n        } else {\n          processData(url);\n        }\n      },indexedDB:function () {\n        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;\n      },DB_NAME:function () {\n        return 'EM_FS_' + window.location.pathname;\n      },DB_VERSION:20,DB_STORE_NAME:\"FILE_DATA\",saveFilesToDB:function (paths, onload, onerror) {\n        onload = onload || function(){};\n        onerror = onerror || function(){};\n        var indexedDB = FS.indexedDB();\n        try {\n          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);\n        } catch (e) {\n          return onerror(e);\n        }\n        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {\n          console.log('creating db');\n          var db = openRequest.result;\n          db.createObjectStore(FS.DB_STORE_NAME);\n        };\n        openRequest.onsuccess = function openRequest_onsuccess() {\n          var db = openRequest.result;\n          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');\n          var files = transaction.objectStore(FS.DB_STORE_NAME);\n          var ok = 0, fail = 0, total = paths.length;\n          function finish() {\n            if (fail == 0) onload(); else onerror();\n          }\n          paths.forEach(function(path) {\n            var putRequest = files.put(FS.analyzePath(path).object.contents, path);\n            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };\n            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };\n          });\n          transaction.onerror = onerror;\n        };\n        openRequest.onerror = onerror;\n      },loadFilesFromDB:function (paths, onload, onerror) {\n        onload = onload || function(){};\n        onerror = onerror || function(){};\n        var indexedDB = FS.indexedDB();\n        try {\n          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);\n        } catch (e) {\n          return onerror(e);\n        }\n        openRequest.onupgradeneeded = onerror; // no database to load from\n        openRequest.onsuccess = function openRequest_onsuccess() {\n          var db = openRequest.result;\n          try {\n            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');\n          } catch(e) {\n            onerror(e);\n            return;\n          }\n          var files = transaction.objectStore(FS.DB_STORE_NAME);\n          var ok = 0, fail = 0, total = paths.length;\n          function finish() {\n            if (fail == 0) onload(); else onerror();\n          }\n          paths.forEach(function(path) {\n            var getRequest = files.get(path);\n            getRequest.onsuccess = function getRequest_onsuccess() {\n              if (FS.analyzePath(path).exists) {\n                FS.unlink(path);\n              }\n              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);\n              ok++;\n              if (ok + fail == total) finish();\n            };\n            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };\n          });\n          transaction.onerror = onerror;\n        };\n        openRequest.onerror = onerror;\n      }};\n  \n  \n  \n  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {\n        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);\n      },createSocket:function (family, type, protocol) {\n        var streaming = type == 1;\n        if (protocol) {\n          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp\n        }\n  \n        // create our internal socket structure\n        var sock = {\n          family: family,\n          type: type,\n          protocol: protocol,\n          server: null,\n          peers: {},\n          pending: [],\n          recv_queue: [],\n          sock_ops: SOCKFS.websocket_sock_ops\n        };\n  \n        // create the filesystem node to store the socket structure\n        var name = SOCKFS.nextname();\n        var node = FS.createNode(SOCKFS.root, name, 49152, 0);\n        node.sock = sock;\n  \n        // and the wrapping stream that enables library functions such\n        // as read and write to indirectly interact with the socket\n        var stream = FS.createStream({\n          path: name,\n          node: node,\n          flags: FS.modeStringToFlags('r+'),\n          seekable: false,\n          stream_ops: SOCKFS.stream_ops\n        });\n  \n        // map the new stream to the socket structure (sockets have a 1:1\n        // relationship with a stream)\n        sock.stream = stream;\n  \n        return sock;\n      },getSocket:function (fd) {\n        var stream = FS.getStream(fd);\n        if (!stream || !FS.isSocket(stream.node.mode)) {\n          return null;\n        }\n        return stream.node.sock;\n      },stream_ops:{poll:function (stream) {\n          var sock = stream.node.sock;\n          return sock.sock_ops.poll(sock);\n        },ioctl:function (stream, request, varargs) {\n          var sock = stream.node.sock;\n          return sock.sock_ops.ioctl(sock, request, varargs);\n        },read:function (stream, buffer, offset, length, position /* ignored */) {\n          var sock = stream.node.sock;\n          var msg = sock.sock_ops.recvmsg(sock, length);\n          if (!msg) {\n            // socket is closed\n            return 0;\n          }\n          buffer.set(msg.buffer, offset);\n          return msg.buffer.length;\n        },write:function (stream, buffer, offset, length, position /* ignored */) {\n          var sock = stream.node.sock;\n          return sock.sock_ops.sendmsg(sock, buffer, offset, length);\n        },close:function (stream) {\n          var sock = stream.node.sock;\n          sock.sock_ops.close(sock);\n        }},nextname:function () {\n        if (!SOCKFS.nextname.current) {\n          SOCKFS.nextname.current = 0;\n        }\n        return 'socket[' + (SOCKFS.nextname.current++) + ']';\n      },websocket_sock_ops:{createPeer:function (sock, addr, port) {\n          var ws;\n  \n          if (typeof addr === 'object') {\n            ws = addr;\n            addr = null;\n            port = null;\n          }\n  \n          if (ws) {\n            // for sockets that've already connected (e.g. we're the server)\n            // we can inspect the _socket property for the address\n            if (ws._socket) {\n              addr = ws._socket.remoteAddress;\n              port = ws._socket.remotePort;\n            }\n            // if we're just now initializing a connection to the remote,\n            // inspect the url property\n            else {\n              var result = /ws[s]?:\\/\\/([^:]+):(\\d+)/.exec(ws.url);\n              if (!result) {\n                throw new Error('WebSocket URL must be in the format ws(s)://address:port');\n              }\n              addr = result[1];\n              port = parseInt(result[2], 10);\n            }\n          } else {\n            // create the actual websocket object and connect\n            try {\n              var url = 'ws://' + addr + ':' + port;\n              // the node ws library API is slightly different than the browser's\n              var opts = ENVIRONMENT_IS_NODE ? {headers: {'websocket-protocol': ['binary']}} : ['binary'];\n              // If node we use the ws library.\n              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];\n              ws = new WebSocket(url, opts);\n              ws.binaryType = 'arraybuffer';\n            } catch (e) {\n              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);\n            }\n          }\n  \n  \n          var peer = {\n            addr: addr,\n            port: port,\n            socket: ws,\n            dgram_send_queue: []\n          };\n  \n          SOCKFS.websocket_sock_ops.addPeer(sock, peer);\n          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);\n  \n          // if this is a bound dgram socket, send the port number first to allow\n          // us to override the ephemeral port reported to us by remotePort on the\n          // remote end.\n          if (sock.type === 2 && typeof sock.sport !== 'undefined') {\n            peer.dgram_send_queue.push(new Uint8Array([\n                255, 255, 255, 255,\n                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),\n                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)\n            ]));\n          }\n  \n          return peer;\n        },getPeer:function (sock, addr, port) {\n          return sock.peers[addr + ':' + port];\n        },addPeer:function (sock, peer) {\n          sock.peers[peer.addr + ':' + peer.port] = peer;\n        },removePeer:function (sock, peer) {\n          delete sock.peers[peer.addr + ':' + peer.port];\n        },handlePeerEvents:function (sock, peer) {\n          var first = true;\n  \n          var handleOpen = function () {\n            try {\n              var queued = peer.dgram_send_queue.shift();\n              while (queued) {\n                peer.socket.send(queued);\n                queued = peer.dgram_send_queue.shift();\n              }\n            } catch (e) {\n              // not much we can do here in the way of proper error handling as we've already\n              // lied and said this data was sent. shut it down.\n              peer.socket.close();\n            }\n          };\n  \n          function handleMessage(data) {\n            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer\n            data = new Uint8Array(data);  // make a typed array view on the array buffer\n  \n  \n            // if this is the port message, override the peer's port with it\n            var wasfirst = first;\n            first = false;\n            if (wasfirst &&\n                data.length === 10 &&\n                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&\n                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {\n              // update the peer's port and it's key in the peer map\n              var newport = ((data[8] << 8) | data[9]);\n              SOCKFS.websocket_sock_ops.removePeer(sock, peer);\n              peer.port = newport;\n              SOCKFS.websocket_sock_ops.addPeer(sock, peer);\n              return;\n            }\n  \n            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });\n          };\n  \n          if (ENVIRONMENT_IS_NODE) {\n            peer.socket.on('open', handleOpen);\n            peer.socket.on('message', function(data, flags) {\n              if (!flags.binary) {\n                return;\n              }\n              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer\n            });\n            peer.socket.on('error', function() {\n              // don't throw\n            });\n          } else {\n            peer.socket.onopen = handleOpen;\n            peer.socket.onmessage = function peer_socket_onmessage(event) {\n              handleMessage(event.data);\n            };\n          }\n        },poll:function (sock) {\n          if (sock.type === 1 && sock.server) {\n            // listen sockets should only say they're available for reading\n            // if there are pending clients.\n            return sock.pending.length ? (64 | 1) : 0;\n          }\n  \n          var mask = 0;\n          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets\n            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :\n            null;\n  \n          if (sock.recv_queue.length ||\n              !dest ||  // connection-less sockets are always ready to read\n              (dest && dest.socket.readyState === dest.socket.CLOSING) ||\n              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed\n            mask |= (64 | 1);\n          }\n  \n          if (!dest ||  // connection-less sockets are always ready to write\n              (dest && dest.socket.readyState === dest.socket.OPEN)) {\n            mask |= 4;\n          }\n  \n          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||\n              (dest && dest.socket.readyState === dest.socket.CLOSED)) {\n            mask |= 16;\n          }\n  \n          return mask;\n        },ioctl:function (sock, request, arg) {\n          switch (request) {\n            case 21531:\n              var bytes = 0;\n              if (sock.recv_queue.length) {\n                bytes = sock.recv_queue[0].data.length;\n              }\n              HEAP32[((arg)>>2)]=bytes;\n              return 0;\n            default:\n              return ERRNO_CODES.EINVAL;\n          }\n        },close:function (sock) {\n          // if we've spawned a listen server, close it\n          if (sock.server) {\n            try {\n              sock.server.close();\n            } catch (e) {\n            }\n            sock.server = null;\n          }\n          // close any peer connections\n          var peers = Object.keys(sock.peers);\n          for (var i = 0; i < peers.length; i++) {\n            var peer = sock.peers[peers[i]];\n            try {\n              peer.socket.close();\n            } catch (e) {\n            }\n            SOCKFS.websocket_sock_ops.removePeer(sock, peer);\n          }\n          return 0;\n        },bind:function (sock, addr, port) {\n          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {\n            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound\n          }\n          sock.saddr = addr;\n          sock.sport = port || _mkport();\n          // in order to emulate dgram sockets, we need to launch a listen server when\n          // binding on a connection-less socket\n          // note: this is only required on the server side\n          if (sock.type === 2) {\n            // close the existing server if it exists\n            if (sock.server) {\n              sock.server.close();\n              sock.server = null;\n            }\n            // swallow error operation not supported error that occurs when binding in the\n            // browser where this isn't supported\n            try {\n              sock.sock_ops.listen(sock, 0);\n            } catch (e) {\n              if (!(e instanceof FS.ErrnoError)) throw e;\n              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;\n            }\n          }\n        },connect:function (sock, addr, port) {\n          if (sock.server) {\n            throw new FS.ErrnoError(ERRNO_CODS.EOPNOTSUPP);\n          }\n  \n          // TODO autobind\n          // if (!sock.addr && sock.type == 2) {\n          // }\n  \n          // early out if we're already connected / in the middle of connecting\n          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {\n            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);\n            if (dest) {\n              if (dest.socket.readyState === dest.socket.CONNECTING) {\n                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);\n              } else {\n                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);\n              }\n            }\n          }\n  \n          // add the socket to our peer list and set our\n          // destination address / port to match\n          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);\n          sock.daddr = peer.addr;\n          sock.dport = peer.port;\n  \n          // always \"fail\" in non-blocking mode\n          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);\n        },listen:function (sock, backlog) {\n          if (!ENVIRONMENT_IS_NODE) {\n            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);\n          }\n          if (sock.server) {\n             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening\n          }\n          var WebSocketServer = require('ws').Server;\n          var host = sock.saddr;\n          sock.server = new WebSocketServer({\n            host: host,\n            port: sock.sport\n            // TODO support backlog\n          });\n  \n          sock.server.on('connection', function(ws) {\n            if (sock.type === 1) {\n              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);\n  \n              // create a peer on the new socket\n              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);\n              newsock.daddr = peer.addr;\n              newsock.dport = peer.port;\n  \n              // push to queue for accept to pick up\n              sock.pending.push(newsock);\n            } else {\n              // create a peer on the listen socket so calling sendto\n              // with the listen socket and an address will resolve\n              // to the correct client\n              SOCKFS.websocket_sock_ops.createPeer(sock, ws);\n            }\n          });\n          sock.server.on('closed', function() {\n            sock.server = null;\n          });\n          sock.server.on('error', function() {\n            // don't throw\n          });\n        },accept:function (listensock) {\n          if (!listensock.server) {\n            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);\n          }\n          var newsock = listensock.pending.shift();\n          newsock.stream.flags = listensock.stream.flags;\n          return newsock;\n        },getname:function (sock, peer) {\n          var addr, port;\n          if (peer) {\n            if (sock.daddr === undefined || sock.dport === undefined) {\n              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);\n            }\n            addr = sock.daddr;\n            port = sock.dport;\n          } else {\n            // TODO saddr and sport will be set for bind()'d UDP sockets, but what\n            // should we be returning for TCP sockets that've been connect()'d?\n            addr = sock.saddr || 0;\n            port = sock.sport || 0;\n          }\n          return { addr: addr, port: port };\n        },sendmsg:function (sock, buffer, offset, length, addr, port) {\n          if (sock.type === 2) {\n            // connection-less sockets will honor the message address,\n            // and otherwise fall back to the bound destination address\n            if (addr === undefined || port === undefined) {\n              addr = sock.daddr;\n              port = sock.dport;\n            }\n            // if there was no address to fall back to, error out\n            if (addr === undefined || port === undefined) {\n              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);\n            }\n          } else {\n            // connection-based sockets will only use the bound\n            addr = sock.daddr;\n            port = sock.dport;\n          }\n  \n          // find the peer for the destination address\n          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);\n  \n          // early out if not connected with a connection-based socket\n          if (sock.type === 1) {\n            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {\n              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);\n            } else if (dest.socket.readyState === dest.socket.CONNECTING) {\n              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);\n            }\n          }\n  \n          // create a copy of the incoming data to send, as the WebSocket API\n          // doesn't work entirely with an ArrayBufferView, it'll just send\n          // the entire underlying buffer\n          var data;\n          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {\n            data = buffer.slice(offset, offset + length);\n          } else {  // ArrayBufferView\n            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);\n          }\n  \n          // if we're emulating a connection-less dgram socket and don't have\n          // a cached connection, queue the buffer to send upon connect and\n          // lie, saying the data was sent now.\n          if (sock.type === 2) {\n            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {\n              // if we're not connected, open a new connection\n              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {\n                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);\n              }\n              dest.dgram_send_queue.push(data);\n              return length;\n            }\n          }\n  \n          try {\n            // send the actual data\n            dest.socket.send(data);\n            return length;\n          } catch (e) {\n            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);\n          }\n        },recvmsg:function (sock, length) {\n          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html\n          if (sock.type === 1 && sock.server) {\n            // tcp servers should not be recv()'ing on the listen socket\n            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);\n          }\n  \n          var queued = sock.recv_queue.shift();\n          if (!queued) {\n            if (sock.type === 1) {\n              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);\n  \n              if (!dest) {\n                // if we have a destination address but are not connected, error out\n                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);\n              }\n              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {\n                // return null if the socket has closed\n                return null;\n              }\n              else {\n                // else, our socket is in a valid state but truly has nothing available\n                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);\n              }\n            } else {\n              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);\n            }\n          }\n  \n          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's\n          // requeued TCP data it'll be an ArrayBufferView\n          var queuedLength = queued.data.byteLength || queued.data.length;\n          var queuedOffset = queued.data.byteOffset || 0;\n          var queuedBuffer = queued.data.buffer || queued.data;\n          var bytesRead = Math.min(length, queuedLength);\n          var res = {\n            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),\n            addr: queued.addr,\n            port: queued.port\n          };\n  \n  \n          // push back any unread data for TCP connections\n          if (sock.type === 1 && bytesRead < queuedLength) {\n            var bytesRemaining = queuedLength - bytesRead;\n            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);\n            sock.recv_queue.unshift(queued);\n          }\n  \n          return res;\n        }}};function _send(fd, buf, len, flags) {\n      var sock = SOCKFS.getSocket(fd);\n      if (!sock) {\n        ___setErrNo(ERRNO_CODES.EBADF);\n        return -1;\n      }\n      // TODO honor flags\n      return _write(fd, buf, len);\n    }\n  \n  function _pwrite(fildes, buf, nbyte, offset) {\n      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);\n      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html\n      var stream = FS.getStream(fildes);\n      if (!stream) {\n        ___setErrNo(ERRNO_CODES.EBADF);\n        return -1;\n      }\n      try {\n        var slab = HEAP8;\n        return FS.write(stream, slab, buf, nbyte, offset);\n      } catch (e) {\n        FS.handleFSError(e);\n        return -1;\n      }\n    }function _write(fildes, buf, nbyte) {\n      // ssize_t write(int fildes, const void *buf, size_t nbyte);\n      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html\n      var stream = FS.getStream(fildes);\n      if (!stream) {\n        ___setErrNo(ERRNO_CODES.EBADF);\n        return -1;\n      }\n  \n  \n      try {\n        var slab = HEAP8;\n        return FS.write(stream, slab, buf, nbyte);\n      } catch (e) {\n        FS.handleFSError(e);\n        return -1;\n      }\n    }\n  \n  function _fileno(stream) {\n      // int fileno(FILE *stream);\n      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html\n      stream = FS.getStreamFromPtr(stream);\n      if (!stream) return -1;\n      return stream.fd;\n    }function _fputs(s, stream) {\n      // int fputs(const char *restrict s, FILE *restrict stream);\n      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputs.html\n      var fd = _fileno(stream);\n      return _write(fd, s, _strlen(s));\n    }\n  \n  function _fputc(c, stream) {\n      // int fputc(int c, FILE *stream);\n      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html\n      var chr = unSign(c & 0xFF);\n      HEAP8[((_fputc.ret)|0)]=chr;\n      var fd = _fileno(stream);\n      var ret = _write(fd, _fputc.ret, 1);\n      if (ret == -1) {\n        var streamObj = FS.getStreamFromPtr(stream);\n        if (streamObj) streamObj.error = true;\n        return -1;\n      } else {\n        return chr;\n      }\n    }function _puts(s) {\n      // int puts(const char *s);\n      // http://pubs.opengroup.org/onlinepubs/000095399/functions/puts.html\n      // NOTE: puts() always writes an extra newline.\n      var stdout = HEAP32[((_stdout)>>2)];\n      var ret = _fputs(s, stdout);\n      if (ret < 0) {\n        return ret;\n      } else {\n        var newlineRet = _fputc(10, stdout);\n        return (newlineRet < 0) ? -1 : ret + 1;\n      }\n    }\n\n  \n   \n  Module[\"_memset\"] = _memset;var _llvm_memset_p0i8_i32=_memset;\n\n  \n  \n  function _emscripten_memcpy_big(dest, src, num) {\n      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);\n      return dest;\n    } \n  Module[\"_memcpy\"] = _memcpy;var _llvm_memcpy_p0i8_p0i8_i32=_memcpy;\n\n  \n  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()\n      return !!__ZSt18uncaught_exceptionv.uncaught_exception;\n    }\n  \n  \n  \n  function ___cxa_is_number_type(type) {\n      var isNumber = false;\n      try { if (type == __ZTIi) isNumber = true } catch(e){}\n      try { if (type == __ZTIj) isNumber = true } catch(e){}\n      try { if (type == __ZTIl) isNumber = true } catch(e){}\n      try { if (type == __ZTIm) isNumber = true } catch(e){}\n      try { if (type == __ZTIx) isNumber = true } catch(e){}\n      try { if (type == __ZTIy) isNumber = true } catch(e){}\n      try { if (type == __ZTIf) isNumber = true } catch(e){}\n      try { if (type == __ZTId) isNumber = true } catch(e){}\n      try { if (type == __ZTIe) isNumber = true } catch(e){}\n      try { if (type == __ZTIc) isNumber = true } catch(e){}\n      try { if (type == __ZTIa) isNumber = true } catch(e){}\n      try { if (type == __ZTIh) isNumber = true } catch(e){}\n      try { if (type == __ZTIs) isNumber = true } catch(e){}\n      try { if (type == __ZTIt) isNumber = true } catch(e){}\n      return isNumber;\n    }function ___cxa_does_inherit(definiteType, possibilityType, possibility) {\n      if (possibility == 0) return false;\n      if (possibilityType == 0 || possibilityType == definiteType)\n        return true;\n      var possibility_type_info;\n      if (___cxa_is_number_type(possibilityType)) {\n        possibility_type_info = possibilityType;\n      } else {\n        var possibility_type_infoAddr = HEAP32[((possibilityType)>>2)] - 8;\n        possibility_type_info = HEAP32[((possibility_type_infoAddr)>>2)];\n      }\n      switch (possibility_type_info) {\n      case 0: // possibility is a pointer\n        // See if definite type is a pointer\n        var definite_type_infoAddr = HEAP32[((definiteType)>>2)] - 8;\n        var definite_type_info = HEAP32[((definite_type_infoAddr)>>2)];\n        if (definite_type_info == 0) {\n          // Also a pointer; compare base types of pointers\n          var defPointerBaseAddr = definiteType+8;\n          var defPointerBaseType = HEAP32[((defPointerBaseAddr)>>2)];\n          var possPointerBaseAddr = possibilityType+8;\n          var possPointerBaseType = HEAP32[((possPointerBaseAddr)>>2)];\n          return ___cxa_does_inherit(defPointerBaseType, possPointerBaseType, possibility);\n        } else\n          return false; // one pointer and one non-pointer\n      case 1: // class with no base class\n        return false;\n      case 2: // class with base class\n        var parentTypeAddr = possibilityType + 8;\n        var parentType = HEAP32[((parentTypeAddr)>>2)];\n        return ___cxa_does_inherit(definiteType, parentType, possibility);\n      default:\n        return false; // some unencountered type\n      }\n    }\n  \n  \n  \n  var ___cxa_last_thrown_exception=0;function ___resumeException(ptr) {\n      if (!___cxa_last_thrown_exception) { ___cxa_last_thrown_exception = ptr; }\n      throw ptr + \" - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.\";\n    }\n  \n  var ___cxa_exception_header_size=8;function ___cxa_find_matching_catch(thrown, throwntype) {\n      if (thrown == -1) thrown = ___cxa_last_thrown_exception;\n      header = thrown - ___cxa_exception_header_size;\n      if (throwntype == -1) throwntype = HEAP32[((header)>>2)];\n      var typeArray = Array.prototype.slice.call(arguments, 2);\n  \n      // If throwntype is a pointer, this means a pointer has been\n      // thrown. When a pointer is thrown, actually what's thrown\n      // is a pointer to the pointer. We'll dereference it.\n      if (throwntype != 0 && !___cxa_is_number_type(throwntype)) {\n        var throwntypeInfoAddr= HEAP32[((throwntype)>>2)] - 8;\n        var throwntypeInfo= HEAP32[((throwntypeInfoAddr)>>2)];\n        if (throwntypeInfo == 0)\n          thrown = HEAP32[((thrown)>>2)];\n      }\n      // The different catch blocks are denoted by different types.\n      // Due to inheritance, those types may not precisely match the\n      // type of the thrown object. Find one which matches, and\n      // return the type of the catch block which should be called.\n      for (var i = 0; i < typeArray.length; i++) {\n        if (___cxa_does_inherit(typeArray[i], throwntype, thrown))\n          return ((asm[\"setTempRet0\"](typeArray[i]),thrown)|0);\n      }\n      // Shouldn't happen unless we have bogus data in typeArray\n      // or encounter a type for which emscripten doesn't have suitable\n      // typeinfo defined. Best-efforts match just in case.\n      return ((asm[\"setTempRet0\"](throwntype),thrown)|0);\n    }function ___gxx_personality_v0() {\n    }\n\n  \n  \n  function __exit(status) {\n      // void _exit(int status);\n      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html\n      Module['exit'](status);\n    }function _exit(status) {\n      __exit(status);\n    }function __ZSt9terminatev() {\n      _exit(-1234);\n    }\n\n  var _llvm_memset_p0i8_i64=_memset;\n\n  function _abort() {\n      Module['abort']();\n    }\n\n  function ___errno_location() {\n      return ___errno_state;\n    }\n\n  function _sbrk(bytes) {\n      // Implement a Linux-like 'memory area' for our 'process'.\n      // Changes the size of the memory area by |bytes|; returns the\n      // address of the previous top ('break') of the memory area\n      // We control the \"dynamic\" memory - DYNAMIC_BASE to DYNAMICTOP\n      var self = _sbrk;\n      if (!self.called) {\n        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned\n        self.called = true;\n        assert(Runtime.dynamicAlloc);\n        self.alloc = Runtime.dynamicAlloc;\n        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };\n      }\n      var ret = DYNAMICTOP;\n      if (bytes != 0) self.alloc(bytes);\n      return ret;  // Previous break location.\n    }\n\n  function _sysconf(name) {\n      // long sysconf(int name);\n      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html\n      switch(name) {\n        case 30: return PAGE_SIZE;\n        case 132:\n        case 133:\n        case 12:\n        case 137:\n        case 138:\n        case 15:\n        case 235:\n        case 16:\n        case 17:\n        case 18:\n        case 19:\n        case 20:\n        case 149:\n        case 13:\n        case 10:\n        case 236:\n        case 153:\n        case 9:\n        case 21:\n        case 22:\n        case 159:\n        case 154:\n        case 14:\n        case 77:\n        case 78:\n        case 139:\n        case 80:\n        case 81:\n        case 79:\n        case 82:\n        case 68:\n        case 67:\n        case 164:\n        case 11:\n        case 29:\n        case 47:\n        case 48:\n        case 95:\n        case 52:\n        case 51:\n        case 46:\n          return 200809;\n        case 27:\n        case 246:\n        case 127:\n        case 128:\n        case 23:\n        case 24:\n        case 160:\n        case 161:\n        case 181:\n        case 182:\n        case 242:\n        case 183:\n        case 184:\n        case 243:\n        case 244:\n        case 245:\n        case 165:\n        case 178:\n        case 179:\n        case 49:\n        case 50:\n        case 168:\n        case 169:\n        case 175:\n        case 170:\n        case 171:\n        case 172:\n        case 97:\n        case 76:\n        case 32:\n        case 173:\n        case 35:\n          return -1;\n        case 176:\n        case 177:\n        case 7:\n        case 155:\n        case 8:\n        case 157:\n        case 125:\n        case 126:\n        case 92:\n        case 93:\n        case 129:\n        case 130:\n        case 131:\n        case 94:\n        case 91:\n          return 1;\n        case 74:\n        case 60:\n        case 69:\n        case 70:\n        case 4:\n          return 1024;\n        case 31:\n        case 42:\n        case 72:\n          return 32;\n        case 87:\n        case 26:\n        case 33:\n          return 2147483647;\n        case 34:\n        case 1:\n          return 47839;\n        case 38:\n        case 36:\n          return 99;\n        case 43:\n        case 37:\n          return 2048;\n        case 0: return 2097152;\n        case 3: return 65536;\n        case 28: return 32768;\n        case 44: return 32767;\n        case 75: return 16384;\n        case 39: return 1000;\n        case 89: return 700;\n        case 71: return 256;\n        case 40: return 255;\n        case 2: return 100;\n        case 180: return 64;\n        case 25: return 20;\n        case 5: return 16;\n        case 6: return 6;\n        case 73: return 4;\n        case 84: return 1;\n      }\n      ___setErrNo(ERRNO_CODES.EINVAL);\n      return -1;\n    }\n\n  function _time(ptr) {\n      var ret = Math.floor(Date.now()/1000);\n      if (ptr) {\n        HEAP32[((ptr)>>2)]=ret;\n      }\n      return ret;\n    }\n\n\n\n\n\n\n  var Browser={mainLoop:{scheduler:null,method:\"\",shouldPause:false,paused:false,queue:[],pause:function () {\n          Browser.mainLoop.shouldPause = true;\n        },resume:function () {\n          if (Browser.mainLoop.paused) {\n            Browser.mainLoop.paused = false;\n            Browser.mainLoop.scheduler();\n          }\n          Browser.mainLoop.shouldPause = false;\n        },updateStatus:function () {\n          if (Module['setStatus']) {\n            var message = Module['statusMessage'] || 'Please wait...';\n            var remaining = Browser.mainLoop.remainingBlockers;\n            var expected = Browser.mainLoop.expectedBlockers;\n            if (remaining) {\n              if (remaining < expected) {\n                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');\n              } else {\n                Module['setStatus'](message);\n              }\n            } else {\n              Module['setStatus']('');\n            }\n          }\n        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {\n        if (!Module[\"preloadPlugins\"]) Module[\"preloadPlugins\"] = []; // needs to exist even in workers\n  \n        if (Browser.initted || ENVIRONMENT_IS_WORKER) return;\n        Browser.initted = true;\n  \n        try {\n          new Blob();\n          Browser.hasBlobConstructor = true;\n        } catch(e) {\n          Browser.hasBlobConstructor = false;\n          console.log(\"warning: no blob constructor, cannot create blobs with mimetypes\");\n        }\n        Browser.BlobBuilder = typeof MozBlobBuilder != \"undefined\" ? MozBlobBuilder : (typeof WebKitBlobBuilder != \"undefined\" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log(\"warning: no BlobBuilder\") : null));\n        Browser.URLObject = typeof window != \"undefined\" ? (window.URL ? window.URL : window.webkitURL) : undefined;\n        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {\n          console.log(\"warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.\");\n          Module.noImageDecoding = true;\n        }\n  \n        // Support for plugins that can process preloaded files. You can add more of these to\n        // your app by creating and appending to Module.preloadPlugins.\n        //\n        // Each plugin is asked if it can handle a file based on the file's name. If it can,\n        // it is given the file's raw data. When it is done, it calls a callback with the file's\n        // (possibly modified) data. For example, a plugin might decompress a file, or it\n        // might create some side data structure for use later (like an Image element, etc.).\n  \n        var imagePlugin = {};\n        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {\n          return !Module.noImageDecoding && /\\.(jpg|jpeg|png|bmp)$/i.test(name);\n        };\n        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {\n          var b = null;\n          if (Browser.hasBlobConstructor) {\n            try {\n              b = new Blob([byteArray], { type: Browser.getMimetype(name) });\n              if (b.size !== byteArray.length) { // Safari bug #118630\n                // Safari's Blob can only take an ArrayBuffer\n                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });\n              }\n            } catch(e) {\n              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');\n            }\n          }\n          if (!b) {\n            var bb = new Browser.BlobBuilder();\n            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range\n            b = bb.getBlob();\n          }\n          var url = Browser.URLObject.createObjectURL(b);\n          var img = new Image();\n          img.onload = function img_onload() {\n            assert(img.complete, 'Image ' + name + ' could not be decoded');\n            var canvas = document.createElement('canvas');\n            canvas.width = img.width;\n            canvas.height = img.height;\n            var ctx = canvas.getContext('2d');\n            ctx.drawImage(img, 0, 0);\n            Module[\"preloadedImages\"][name] = canvas;\n            Browser.URLObject.revokeObjectURL(url);\n            if (onload) onload(byteArray);\n          };\n          img.onerror = function img_onerror(event) {\n            console.log('Image ' + url + ' could not be decoded');\n            if (onerror) onerror();\n          };\n          img.src = url;\n        };\n        Module['preloadPlugins'].push(imagePlugin);\n  \n        var audioPlugin = {};\n        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {\n          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };\n        };\n        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {\n          var done = false;\n          function finish(audio) {\n            if (done) return;\n            done = true;\n            Module[\"preloadedAudios\"][name] = audio;\n            if (onload) onload(byteArray);\n          }\n          function fail() {\n            if (done) return;\n            done = true;\n            Module[\"preloadedAudios\"][name] = new Audio(); // empty shim\n            if (onerror) onerror();\n          }\n          if (Browser.hasBlobConstructor) {\n            try {\n              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });\n            } catch(e) {\n              return fail();\n            }\n            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!\n            var audio = new Audio();\n            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926\n            audio.onerror = function audio_onerror(event) {\n              if (done) return;\n              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');\n              function encode64(data) {\n                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n                var PAD = '=';\n                var ret = '';\n                var leftchar = 0;\n                var leftbits = 0;\n                for (var i = 0; i < data.length; i++) {\n                  leftchar = (leftchar << 8) | data[i];\n                  leftbits += 8;\n                  while (leftbits >= 6) {\n                    var curr = (leftchar >> (leftbits-6)) & 0x3f;\n                    leftbits -= 6;\n                    ret += BASE[curr];\n                  }\n                }\n                if (leftbits == 2) {\n                  ret += BASE[(leftchar&3) << 4];\n                  ret += PAD + PAD;\n                } else if (leftbits == 4) {\n                  ret += BASE[(leftchar&0xf) << 2];\n                  ret += PAD;\n                }\n                return ret;\n              }\n              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);\n              finish(audio); // we don't wait for confirmation this worked - but it's worth trying\n            };\n            audio.src = url;\n            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror\n            Browser.safeSetTimeout(function() {\n              finish(audio); // try to use it even though it is not necessarily ready to play\n            }, 10000);\n          } else {\n            return fail();\n          }\n        };\n        Module['preloadPlugins'].push(audioPlugin);\n  \n        // Canvas event setup\n  \n        var canvas = Module['canvas'];\n        \n        // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module\n        // Module['forcedAspectRatio'] = 4 / 3;\n        \n        canvas.requestPointerLock = canvas['requestPointerLock'] ||\n                                    canvas['mozRequestPointerLock'] ||\n                                    canvas['webkitRequestPointerLock'] ||\n                                    canvas['msRequestPointerLock'] ||\n                                    function(){};\n        canvas.exitPointerLock = document['exitPointerLock'] ||\n                                 document['mozExitPointerLock'] ||\n                                 document['webkitExitPointerLock'] ||\n                                 document['msExitPointerLock'] ||\n                                 function(){}; // no-op if function does not exist\n        canvas.exitPointerLock = canvas.exitPointerLock.bind(document);\n  \n        function pointerLockChange() {\n          Browser.pointerLock = document['pointerLockElement'] === canvas ||\n                                document['mozPointerLockElement'] === canvas ||\n                                document['webkitPointerLockElement'] === canvas ||\n                                document['msPointerLockElement'] === canvas;\n        }\n  \n        document.addEventListener('pointerlockchange', pointerLockChange, false);\n        document.addEventListener('mozpointerlockchange', pointerLockChange, false);\n        document.addEventListener('webkitpointerlockchange', pointerLockChange, false);\n        document.addEventListener('mspointerlockchange', pointerLockChange, false);\n  \n        if (Module['elementPointerLock']) {\n          canvas.addEventListener(\"click\", function(ev) {\n            if (!Browser.pointerLock && canvas.requestPointerLock) {\n              canvas.requestPointerLock();\n              ev.preventDefault();\n            }\n          }, false);\n        }\n      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {\n        var ctx;\n        var errorInfo = '?';\n        function onContextCreationError(event) {\n          errorInfo = event.statusMessage || errorInfo;\n        }\n        try {\n          if (useWebGL) {\n            var contextAttributes = {\n              antialias: false,\n              alpha: false\n            };\n  \n            if (webGLContextAttributes) {\n              for (var attribute in webGLContextAttributes) {\n                contextAttributes[attribute] = webGLContextAttributes[attribute];\n              }\n            }\n  \n  \n            canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);\n            try {\n              ['experimental-webgl', 'webgl'].some(function(webglId) {\n                return ctx = canvas.getContext(webglId, contextAttributes);\n              });\n            } finally {\n              canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);\n            }\n          } else {\n            ctx = canvas.getContext('2d');\n          }\n          if (!ctx) throw ':(';\n        } catch (e) {\n          Module.print('Could not create canvas: ' + [errorInfo, e]);\n          return null;\n        }\n        if (useWebGL) {\n          // Set the background of the WebGL canvas to black\n          canvas.style.backgroundColor = \"black\";\n  \n          // Warn on context loss\n          canvas.addEventListener('webglcontextlost', function(event) {\n            alert('WebGL context lost. You will need to reload the page.');\n          }, false);\n        }\n        if (setInModule) {\n          GLctx = Module.ctx = ctx;\n          Module.useWebGL = useWebGL;\n          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });\n          Browser.init();\n        }\n        return ctx;\n      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {\n        Browser.lockPointer = lockPointer;\n        Browser.resizeCanvas = resizeCanvas;\n        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;\n        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;\n  \n        var canvas = Module['canvas'];\n        var canvasContainer = canvas.parentNode;\n        function fullScreenChange() {\n          Browser.isFullScreen = false;\n          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||\n               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||\n               document['fullScreenElement'] || document['fullscreenElement'] ||\n               document['msFullScreenElement'] || document['msFullscreenElement'] ||\n               document['webkitCurrentFullScreenElement']) === canvasContainer) {\n            canvas.cancelFullScreen = document['cancelFullScreen'] ||\n                                      document['mozCancelFullScreen'] ||\n                                      document['webkitCancelFullScreen'] ||\n                                      document['msExitFullscreen'] ||\n                                      document['exitFullscreen'] ||\n                                      function() {};\n            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);\n            if (Browser.lockPointer) canvas.requestPointerLock();\n            Browser.isFullScreen = true;\n            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();\n          } else {\n            \n            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen\n            var canvasContainer = canvas.parentNode;\n            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);\n            canvasContainer.parentNode.removeChild(canvasContainer);\n            \n            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();\n          }\n          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);\n          Browser.updateCanvasDimensions(canvas);\n        }\n  \n        if (!Browser.fullScreenHandlersInstalled) {\n          Browser.fullScreenHandlersInstalled = true;\n          document.addEventListener('fullscreenchange', fullScreenChange, false);\n          document.addEventListener('mozfullscreenchange', fullScreenChange, false);\n          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);\n          document.addEventListener('MSFullscreenChange', fullScreenChange, false);\n        }\n  \n        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root\n        var canvasContainer = document.createElement(\"div\");\n        canvas.parentNode.insertBefore(canvasContainer, canvas);\n        canvasContainer.appendChild(canvas);\n        \n        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)\n        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||\n                                            canvasContainer['mozRequestFullScreen'] ||\n                                            canvasContainer['msRequestFullscreen'] ||\n                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);\n        canvasContainer.requestFullScreen();\n      },requestAnimationFrame:function requestAnimationFrame(func) {\n        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)\n          setTimeout(func, 1000/60);\n        } else {\n          if (!window.requestAnimationFrame) {\n            window.requestAnimationFrame = window['requestAnimationFrame'] ||\n                                           window['mozRequestAnimationFrame'] ||\n                                           window['webkitRequestAnimationFrame'] ||\n                                           window['msRequestAnimationFrame'] ||\n                                           window['oRequestAnimationFrame'] ||\n                                           window['setTimeout'];\n          }\n          window.requestAnimationFrame(func);\n        }\n      },safeCallback:function (func) {\n        return function() {\n          if (!ABORT) return func.apply(null, arguments);\n        };\n      },safeRequestAnimationFrame:function (func) {\n        return Browser.requestAnimationFrame(function() {\n          if (!ABORT) func();\n        });\n      },safeSetTimeout:function (func, timeout) {\n        return setTimeout(function() {\n          if (!ABORT) func();\n        }, timeout);\n      },safeSetInterval:function (func, timeout) {\n        return setInterval(function() {\n          if (!ABORT) func();\n        }, timeout);\n      },getMimetype:function (name) {\n        return {\n          'jpg': 'image/jpeg',\n          'jpeg': 'image/jpeg',\n          'png': 'image/png',\n          'bmp': 'image/bmp',\n          'ogg': 'audio/ogg',\n          'wav': 'audio/wav',\n          'mp3': 'audio/mpeg'\n        }[name.substr(name.lastIndexOf('.')+1)];\n      },getUserMedia:function (func) {\n        if(!window.getUserMedia) {\n          window.getUserMedia = navigator['getUserMedia'] ||\n                                navigator['mozGetUserMedia'];\n        }\n        window.getUserMedia(func);\n      },getMovementX:function (event) {\n        return event['movementX'] ||\n               event['mozMovementX'] ||\n               event['webkitMovementX'] ||\n               0;\n      },getMovementY:function (event) {\n        return event['movementY'] ||\n               event['mozMovementY'] ||\n               event['webkitMovementY'] ||\n               0;\n      },getMouseWheelDelta:function (event) {\n        return Math.max(-1, Math.min(1, event.type === 'DOMMouseScroll' ? event.detail : -event.wheelDelta));\n      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup\n        if (Browser.pointerLock) {\n          // When the pointer is locked, calculate the coordinates\n          // based on the movement of the mouse.\n          // Workaround for Firefox bug 764498\n          if (event.type != 'mousemove' &&\n              ('mozMovementX' in event)) {\n            Browser.mouseMovementX = Browser.mouseMovementY = 0;\n          } else {\n            Browser.mouseMovementX = Browser.getMovementX(event);\n            Browser.mouseMovementY = Browser.getMovementY(event);\n          }\n          \n          // check if SDL is available\n          if (typeof SDL != \"undefined\") {\n          \tBrowser.mouseX = SDL.mouseX + Browser.mouseMovementX;\n          \tBrowser.mouseY = SDL.mouseY + Browser.mouseMovementY;\n          } else {\n          \t// just add the mouse delta to the current absolut mouse position\n          \t// FIXME: ideally this should be clamped against the canvas size and zero\n          \tBrowser.mouseX += Browser.mouseMovementX;\n          \tBrowser.mouseY += Browser.mouseMovementY;\n          }        \n        } else {\n          // Otherwise, calculate the movement based on the changes\n          // in the coordinates.\n          var rect = Module[\"canvas\"].getBoundingClientRect();\n          var x, y;\n          \n          // Neither .scrollX or .pageXOffset are defined in a spec, but\n          // we prefer .scrollX because it is currently in a spec draft.\n          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)\n          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);\n          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);\n          if (event.type == 'touchstart' ||\n              event.type == 'touchend' ||\n              event.type == 'touchmove') {\n            var t = event.touches.item(0);\n            if (t) {\n              x = t.pageX - (scrollX + rect.left);\n              y = t.pageY - (scrollY + rect.top);\n            } else {\n              return;\n            }\n          } else {\n            x = event.pageX - (scrollX + rect.left);\n            y = event.pageY - (scrollY + rect.top);\n          }\n  \n          // the canvas might be CSS-scaled compared to its backbuffer;\n          // SDL-using content will want mouse coordinates in terms\n          // of backbuffer units.\n          var cw = Module[\"canvas\"].width;\n          var ch = Module[\"canvas\"].height;\n          x = x * (cw / rect.width);\n          y = y * (ch / rect.height);\n  \n          Browser.mouseMovementX = x - Browser.mouseX;\n          Browser.mouseMovementY = y - Browser.mouseY;\n          Browser.mouseX = x;\n          Browser.mouseY = y;\n        }\n      },xhrLoad:function (url, onload, onerror) {\n        var xhr = new XMLHttpRequest();\n        xhr.open('GET', url, true);\n        xhr.responseType = 'arraybuffer';\n        xhr.onload = function xhr_onload() {\n          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0\n            onload(xhr.response);\n          } else {\n            onerror();\n          }\n        };\n        xhr.onerror = onerror;\n        xhr.send(null);\n      },asyncLoad:function (url, onload, onerror, noRunDep) {\n        Browser.xhrLoad(url, function(arrayBuffer) {\n          assert(arrayBuffer, 'Loading data file \"' + url + '\" failed (no arrayBuffer).');\n          onload(new Uint8Array(arrayBuffer));\n          if (!noRunDep) removeRunDependency('al ' + url);\n        }, function(event) {\n          if (onerror) {\n            onerror();\n          } else {\n            throw 'Loading data file \"' + url + '\" failed.';\n          }\n        });\n        if (!noRunDep) addRunDependency('al ' + url);\n      },resizeListeners:[],updateResizeListeners:function () {\n        var canvas = Module['canvas'];\n        Browser.resizeListeners.forEach(function(listener) {\n          listener(canvas.width, canvas.height);\n        });\n      },setCanvasSize:function (width, height, noUpdates) {\n        var canvas = Module['canvas'];\n        Browser.updateCanvasDimensions(canvas, width, height);\n        if (!noUpdates) Browser.updateResizeListeners();\n      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {\n        // check if SDL is available   \n        if (typeof SDL != \"undefined\") {\n        \tvar flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];\n        \tflags = flags | 0x00800000; // set SDL_FULLSCREEN flag\n        \tHEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags\n        }\n        Browser.updateResizeListeners();\n      },setWindowedCanvasSize:function () {\n        // check if SDL is available       \n        if (typeof SDL != \"undefined\") {\n        \tvar flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];\n        \tflags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag\n        \tHEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags\n        }\n        Browser.updateResizeListeners();\n      },updateCanvasDimensions:function (canvas, wNative, hNative) {\n        if (wNative && hNative) {\n          canvas.widthNative = wNative;\n          canvas.heightNative = hNative;\n        } else {\n          wNative = canvas.widthNative;\n          hNative = canvas.heightNative;\n        }\n        var w = wNative;\n        var h = hNative;\n        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {\n          if (w/h < Module['forcedAspectRatio']) {\n            w = Math.round(h * Module['forcedAspectRatio']);\n          } else {\n            h = Math.round(w / Module['forcedAspectRatio']);\n          }\n        }\n        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||\n             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||\n             document['fullScreenElement'] || document['fullscreenElement'] ||\n             document['msFullScreenElement'] || document['msFullscreenElement'] ||\n             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {\n           var factor = Math.min(screen.width / w, screen.height / h);\n           w = Math.round(w * factor);\n           h = Math.round(h * factor);\n        }\n        if (Browser.resizeCanvas) {\n          if (canvas.width  != w) canvas.width  = w;\n          if (canvas.height != h) canvas.height = h;\n          if (typeof canvas.style != 'undefined') {\n            canvas.style.removeProperty( \"width\");\n            canvas.style.removeProperty(\"height\");\n          }\n        } else {\n          if (canvas.width  != wNative) canvas.width  = wNative;\n          if (canvas.height != hNative) canvas.height = hNative;\n          if (typeof canvas.style != 'undefined') {\n            if (w != wNative || h != hNative) {\n              canvas.style.setProperty( \"width\", w + \"px\", \"important\");\n              canvas.style.setProperty(\"height\", h + \"px\", \"important\");\n            } else {\n              canvas.style.removeProperty( \"width\");\n              canvas.style.removeProperty(\"height\");\n            }\n          }\n        }\n      }};\nFS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module[\"noFSInit\"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module[\"FS_createFolder\"] = FS.createFolder;Module[\"FS_createPath\"] = FS.createPath;Module[\"FS_createDataFile\"] = FS.createDataFile;Module[\"FS_createPreloadedFile\"] = FS.createPreloadedFile;Module[\"FS_createLazyFile\"] = FS.createLazyFile;Module[\"FS_createLink\"] = FS.createLink;Module[\"FS_createDevice\"] = FS.createDevice;\n___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;\n__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();\nif (ENVIRONMENT_IS_NODE) { var fs = require(\"fs\"); NODEFS.staticInit(); }\n__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });\n_fputc.ret = allocate([0], \"i8\", ALLOC_STATIC);\nModule[\"requestFullScreen\"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };\n  Module[\"requestAnimationFrame\"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };\n  Module[\"setCanvasSize\"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };\n  Module[\"pauseMainLoop\"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };\n  Module[\"resumeMainLoop\"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };\n  Module[\"getUserMedia\"] = function Module_getUserMedia() { Browser.getUserMedia() }\nSTACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);\n\nstaticSealed = true; // seal the static portion of memory\n\nSTACK_MAX = STACK_BASE + 5242880;\n\nDYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);\n\nassert(DYNAMIC_BASE < TOTAL_MEMORY, \"TOTAL_MEMORY not big enough for stack\");\n\n\nvar Math_min = Math.min;\nfunction invoke_ii(index,a1) {\n  try {\n    return Module[\"dynCall_ii\"](index,a1);\n  } catch(e) {\n    if (typeof e !== 'number' && e !== 'longjmp') throw e;\n    asm[\"setThrew\"](1, 0);\n  }\n}\n\nfunction invoke_vi(index,a1) {\n  try {\n    Module[\"dynCall_vi\"](index,a1);\n  } catch(e) {\n    if (typeof e !== 'number' && e !== 'longjmp') throw e;\n    asm[\"setThrew\"](1, 0);\n  }\n}\n\nfunction invoke_iiiiii(index,a1,a2,a3,a4,a5) {\n  try {\n    return Module[\"dynCall_iiiiii\"](index,a1,a2,a3,a4,a5);\n  } catch(e) {\n    if (typeof e !== 'number' && e !== 'longjmp') throw e;\n    asm[\"setThrew\"](1, 0);\n  }\n}\n\nfunction invoke_viii(index,a1,a2,a3) {\n  try {\n    Module[\"dynCall_viii\"](index,a1,a2,a3);\n  } catch(e) {\n    if (typeof e !== 'number' && e !== 'longjmp') throw e;\n    asm[\"setThrew\"](1, 0);\n  }\n}\n\nfunction invoke_v(index) {\n  try {\n    Module[\"dynCall_v\"](index);\n  } catch(e) {\n    if (typeof e !== 'number' && e !== 'longjmp') throw e;\n    asm[\"setThrew\"](1, 0);\n  }\n}\n\nfunction invoke_iii(index,a1,a2) {\n  try {\n    return Module[\"dynCall_iii\"](index,a1,a2);\n  } catch(e) {\n    if (typeof e !== 'number' && e !== 'longjmp') throw e;\n    asm[\"setThrew\"](1, 0);\n  }\n}\n\nfunction asmPrintInt(x, y) {\n  Module.print('int ' + x + ',' + y);// + ' ' + new Error().stack);\n}\nfunction asmPrintFloat(x, y) {\n  Module.print('float ' + x + ',' + y);// + ' ' + new Error().stack);\n}\n// EMSCRIPTEN_START_ASM\nvar asm = (function(global, env, buffer) {\n  'use asm';\n  var HEAP8 = new global.Int8Array(buffer);\n  var HEAP16 = new global.Int16Array(buffer);\n  var HEAP32 = new global.Int32Array(buffer);\n  var HEAPU8 = new global.Uint8Array(buffer);\n  var HEAPU16 = new global.Uint16Array(buffer);\n  var HEAPU32 = new global.Uint32Array(buffer);\n  var HEAPF32 = new global.Float32Array(buffer);\n  var HEAPF64 = new global.Float64Array(buffer);\n\n  var STACKTOP=env.STACKTOP|0;\n  var STACK_MAX=env.STACK_MAX|0;\n  var tempDoublePtr=env.tempDoublePtr|0;\n  var ABORT=env.ABORT|0;\n  var NaN=+env.NaN;\n  var Infinity=+env.Infinity;\n\n  var __THREW__ = 0;\n  var threwValue = 0;\n  var setjmpId = 0;\n  var undef = 0;\n  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;\n\n  var tempRet0 = 0;\n  var tempRet1 = 0;\n  var tempRet2 = 0;\n  var tempRet3 = 0;\n  var tempRet4 = 0;\n  var tempRet5 = 0;\n  var tempRet6 = 0;\n  var tempRet7 = 0;\n  var tempRet8 = 0;\n  var tempRet9 = 0;\n  var Math_floor=global.Math.floor;\n  var Math_abs=global.Math.abs;\n  var Math_sqrt=global.Math.sqrt;\n  var Math_pow=global.Math.pow;\n  var Math_cos=global.Math.cos;\n  var Math_sin=global.Math.sin;\n  var Math_tan=global.Math.tan;\n  var Math_acos=global.Math.acos;\n  var Math_asin=global.Math.asin;\n  var Math_atan=global.Math.atan;\n  var Math_atan2=global.Math.atan2;\n  var Math_exp=global.Math.exp;\n  var Math_log=global.Math.log;\n  var Math_ceil=global.Math.ceil;\n  var Math_imul=global.Math.imul;\n  var abort=env.abort;\n  var assert=env.assert;\n  var asmPrintInt=env.asmPrintInt;\n  var asmPrintFloat=env.asmPrintFloat;\n  var Math_min=env.min;\n  var invoke_ii=env.invoke_ii;\n  var invoke_vi=env.invoke_vi;\n  var invoke_iiiiii=env.invoke_iiiiii;\n  var invoke_viii=env.invoke_viii;\n  var invoke_v=env.invoke_v;\n  var invoke_iii=env.invoke_iii;\n  var _snprintf=env._snprintf;\n  var _abort=env._abort;\n  var _fflush=env._fflush;\n  var __reallyNegative=env.__reallyNegative;\n  var _fputc=env._fputc;\n  var _sysconf=env._sysconf;\n  var _puts=env._puts;\n  var ___setErrNo=env.___setErrNo;\n  var _send=env._send;\n  var _write=env._write;\n  var _fputs=env._fputs;\n  var _exit=env._exit;\n  var _sprintf=env._sprintf;\n  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;\n  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;\n  var ___cxa_is_number_type=env.___cxa_is_number_type;\n  var _time=env._time;\n  var __formatString=env.__formatString;\n  var ___cxa_does_inherit=env.___cxa_does_inherit;\n  var __ZSt9terminatev=env.__ZSt9terminatev;\n  var _emscripten_memcpy_big=env._emscripten_memcpy_big;\n  var _fileno=env._fileno;\n  var _pwrite=env._pwrite;\n  var _sbrk=env._sbrk;\n  var ___errno_location=env.___errno_location;\n  var ___gxx_personality_v0=env.___gxx_personality_v0;\n  var _mkport=env._mkport;\n  var ___resumeException=env.___resumeException;\n  var __exit=env.__exit;\n  var tempFloat = 0.0;\n\n// EMSCRIPTEN_START_FUNCS\nfunction stackAlloc(size) {\n  size = size|0;\n  var ret = 0;\n  ret = STACKTOP;\n  STACKTOP = (STACKTOP + size)|0;\nSTACKTOP = (STACKTOP + 7)&-8;\n  return ret|0;\n}\nfunction stackSave() {\n  return STACKTOP|0;\n}\nfunction stackRestore(top) {\n  top = top|0;\n  STACKTOP = top;\n}\nfunction setThrew(threw, value) {\n  threw = threw|0;\n  value = value|0;\n  if ((__THREW__|0) == 0) {\n    __THREW__ = threw;\n    threwValue = value;\n  }\n}\nfunction copyTempFloat(ptr) {\n  ptr = ptr|0;\n  HEAP8[tempDoublePtr] = HEAP8[ptr];\n  HEAP8[tempDoublePtr+1|0] = HEAP8[ptr+1|0];\n  HEAP8[tempDoublePtr+2|0] = HEAP8[ptr+2|0];\n  HEAP8[tempDoublePtr+3|0] = HEAP8[ptr+3|0];\n}\nfunction copyTempDouble(ptr) {\n  ptr = ptr|0;\n  HEAP8[tempDoublePtr] = HEAP8[ptr];\n  HEAP8[tempDoublePtr+1|0] = HEAP8[ptr+1|0];\n  HEAP8[tempDoublePtr+2|0] = HEAP8[ptr+2|0];\n  HEAP8[tempDoublePtr+3|0] = HEAP8[ptr+3|0];\n  HEAP8[tempDoublePtr+4|0] = HEAP8[ptr+4|0];\n  HEAP8[tempDoublePtr+5|0] = HEAP8[ptr+5|0];\n  HEAP8[tempDoublePtr+6|0] = HEAP8[ptr+6|0];\n  HEAP8[tempDoublePtr+7|0] = HEAP8[ptr+7|0];\n}\n\nfunction setTempRet0(value) {\n  value = value|0;\n  tempRet0 = value;\n}\n\nfunction setTempRet1(value) {\n  value = value|0;\n  tempRet1 = value;\n}\n\nfunction setTempRet2(value) {\n  value = value|0;\n  tempRet2 = value;\n}\n\nfunction setTempRet3(value) {\n  value = value|0;\n  tempRet3 = value;\n}\n\nfunction setTempRet4(value) {\n  value = value|0;\n  tempRet4 = value;\n}\n\nfunction setTempRet5(value) {\n  value = value|0;\n  tempRet5 = value;\n}\n\nfunction setTempRet6(value) {\n  value = value|0;\n  tempRet6 = value;\n}\n\nfunction setTempRet7(value) {\n  value = value|0;\n  tempRet7 = value;\n}\n\nfunction setTempRet8(value) {\n  value = value|0;\n  tempRet8 = value;\n}\n\nfunction setTempRet9(value) {\n  value = value|0;\n  tempRet9 = value;\n}\nfunction runPostSets() {\n\n\n}\n\nfunction __ZN4crnd11crnd_assertEPKcS1_j($pExp,$pFile,$line){\n $pExp=($pExp)|0;\n $pFile=($pFile)|0;\n $line=($line)|0;\n var $buf=0,$1=0,$2=0,$3=0,label=0;\n var tempVarArgs=0;\n var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+512)|0;\n $buf=((sp)|0);\n $1=(($buf)|0);\n $2=((_sprintf((($1)|0),((824)|0),(((tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,HEAP32[((tempVarArgs)>>2)]=$pFile,HEAP32[(((tempVarArgs)+(8))>>2)]=$line,HEAP32[(((tempVarArgs)+(16))>>2)]=$pExp,tempVarArgs))|0)))|0); STACKTOP=tempVarArgs;\n $3=((_puts((($1)|0)))|0);\n STACKTOP=sp;return;\n}\n\n\nfunction __ZN4crnd16elemental_vector17increase_capacityEjbjPFvPvS1_jE($this,$min_new_capacity,$grow_hint,$element_size,$pMover){\n $this=($this)|0;\n $min_new_capacity=($min_new_capacity)|0;\n $grow_hint=($grow_hint)|0;\n $element_size=($element_size)|0;\n $pMover=($pMover)|0;\n var $actual_size=0,$1=0,$2=0,$3=0,$4=0,$5=0,$8=0,$9=0,$12=0,$13=0,$16=0,$18=0,$new_capacity_0=0,$20=0,$22=0,$23=0,$26=0,$27=0,$29=0,$30=0;\n var $31=0,$32=0,$35=0,$36=0,$38=0,$39=0,$40=0,$41=0,$42=0,$46=0,$47=0,$49=0,$storemerge=0,$_0=0,label=0;\n var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;\n $actual_size=((sp)|0);\n $1=(($this+4)|0);\n $2=((HEAP32[(($1)>>2)])|0);\n $3=(($this+8)|0);\n $4=((HEAP32[(($3)>>2)])|0);\n $5=($2>>>0)>($4>>>0);\n if ($5) {\n  __ZN4crnd11crnd_assertEPKcS1_j(800,488,2119);\n }\n $8=(((2147418112)/(($element_size>>>0)))&-1);\n $9=($8>>>0)>($min_new_capacity>>>0);\n if (!($9)) {\n  __ZN4crnd11crnd_assertEPKcS1_j(328,488,2120);\n }\n $12=((HEAP32[(($3)>>2)])|0);\n $13=($12>>>0)<($min_new_capacity>>>0);\n if (!($13)) {\n  $_0=1;\n\n  STACKTOP=sp;return (($_0)|0);\n }\n do {\n  if ($grow_hint) {\n   $16=((__ZN4crnd4math13is_power_of_2Ej($min_new_capacity))|0);\n   if ($16) {\n    $new_capacity_0=$min_new_capacity;\n    break;\n   }\n   $18=((__ZN4crnd4math9next_pow2Ej($min_new_capacity))|0);\n   $new_capacity_0=$18;\n  } else {\n   $new_capacity_0=$min_new_capacity;\n  }\n } while(0);\n\n $20=($new_capacity_0|0)==0;\n if ($20) {\n  label = 11;\n } else {\n  $22=((HEAP32[(($3)>>2)])|0);\n  $23=($new_capacity_0>>>0)>($22>>>0);\n  if (!($23)) {\n   label = 11;\n  }\n }\n if ((label|0) == 11) {\n  __ZN4crnd11crnd_assertEPKcS1_j(152,488,2129);\n }\n $26=(Math_imul($new_capacity_0,$element_size)|0);\n $27=($pMover|0)==0;\n do {\n  if ($27) {\n   $29=(($this)|0);\n   $30=((HEAP32[(($29)>>2)])|0);\n   $31=((__ZN4crnd12crnd_reallocEPvjPjb($30,$26,$actual_size,1))|0);\n   $32=($31|0)==0;\n   if ($32) {\n    $_0=0;\n\n    STACKTOP=sp;return (($_0)|0);\n   } else {\n    HEAP32[(($29)>>2)]=$31;\n    break;\n   }\n  } else {\n   $35=((__ZN4crnd11crnd_mallocEjPj($26,$actual_size))|0);\n   $36=($35|0)==0;\n   if ($36) {\n    $_0=0;\n\n    STACKTOP=sp;return (($_0)|0);\n   }\n   $38=(($this)|0);\n   $39=((HEAP32[(($38)>>2)])|0);\n   $40=((HEAP32[(($1)>>2)])|0);\n   FUNCTION_TABLE_viii[($pMover)&1]($35,$39,$40);\n   $41=((HEAP32[(($38)>>2)])|0);\n   $42=($41|0)==0;\n   if (!($42)) {\n    __ZN4crnd9crnd_freeEPv($41);\n   }\n   HEAP32[(($38)>>2)]=$35;\n  }\n } while(0);\n $46=((HEAP32[(($actual_size)>>2)])|0);\n $47=($46>>>0)>($26>>>0);\n if ($47) {\n  $49=(((($46>>>0))/(($element_size>>>0)))&-1);\n  $storemerge=$49;\n } else {\n  $storemerge=$new_capacity_0;\n }\n\n HEAP32[(($3)>>2)]=$storemerge;\n $_0=1;\n\n STACKTOP=sp;return (($_0)|0);\n}\n\n\nfunction __ZN4crnd4math13is_power_of_2Ej($x){\n $x=($x)|0;\n var $1=0,$3=0,$4=0,$5=0,$7=0,label=0;\n\n $1=($x|0)==0;\n if ($1) {\n  $7=0;\n } else {\n  $3=((($x)-(1))|0);\n  $4=$3&$x;\n  $5=($4|0)==0;\n  $7=$5;\n }\n\n return (($7)|0);\n}\n\n\nfunction __ZN4crnd4math9next_pow2Ej($val){\n $val=($val)|0;\n var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,label=0;\n\n $1=((($val)-(1))|0);\n $2=$1>>>16;\n $3=$2|$1;\n $4=$3>>>8;\n $5=$4|$3;\n $6=$5>>>4;\n $7=$6|$5;\n $8=$7>>>2;\n $9=$8|$7;\n $10=$9>>>1;\n $11=$10|$9;\n $12=((($11)+(1))|0);\n return (($12)|0);\n}\n\n\nfunction __ZN4crnd12crnd_reallocEPvjPjb($p,$size,$pActual_size,$movable){\n $p=($p)|0;\n $size=($size)|0;\n $pActual_size=($pActual_size)|0;\n $movable=($movable)|0;\n var $actual_size=0,$1=0,$2=0,$3=0,$6=0,$9=0,$10=0,$11=0,$12=0,$14=0,$16=0,$17=0,$18=0,$_0=0,label=0;\n var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;\n $actual_size=((sp)|0);\n $1=$p;\n $2=$1&7;\n $3=($2|0)==0;\n if (!($3)) {\n  __ZN4crndL14crnd_mem_errorEPKc(656);\n  $_0=0;\n\n  STACKTOP=sp;return (($_0)|0);\n }\n $6=($size>>>0)>((2147418112)>>>0);\n if ($6) {\n  __ZN4crndL14crnd_mem_errorEPKc(768);\n  $_0=0;\n\n  STACKTOP=sp;return (($_0)|0);\n }\n HEAP32[(($actual_size)>>2)]=$size;\n $9=((HEAP32[((928)>>2)])|0);\n $10=((HEAP32[((1448)>>2)])|0);\n $11=((FUNCTION_TABLE_iiiiii[($9)&3]($p,$size,$actual_size,$movable,$10))|0);\n $12=($pActual_size|0)==0;\n if (!($12)) {\n  $14=((HEAP32[(($actual_size)>>2)])|0);\n  HEAP32[(($pActual_size)>>2)]=$14;\n }\n $16=$11;\n $17=$16&7;\n $18=($17|0)==0;\n if ($18) {\n  $_0=$11;\n\n  STACKTOP=sp;return (($_0)|0);\n }\n __ZN4crnd11crnd_assertEPKcS1_j(680,488,2554);\n $_0=$11;\n\n STACKTOP=sp;return (($_0)|0);\n}\n\n\nfunction __ZN4crnd11crnd_mallocEjPj($size,$pActual_size){\n $size=($size)|0;\n $pActual_size=($pActual_size)|0;\n var $actual_size=0,$1=0,$2=0,$3=0,$_=0,$4=0,$7=0,$8=0,$9=0,$10=0,$12=0,$14=0,$15=0,$16=0,$or_cond=0,$19=0,$20=0,$21=0,$_0=0,label=0;\n var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+8)|0;\n $actual_size=((sp)|0);\n $1=((($size)+(3))|0);\n $2=$1&-4;\n $3=($2|0)==0;\n $_=($3?4:$2);\n $4=($_>>>0)>((2147418112)>>>0);\n if ($4) {\n  __ZN4crndL14crnd_mem_errorEPKc(768);\n  $_0=0;\n\n  STACKTOP=sp;return (($_0)|0);\n }\n HEAP32[(($actual_size)>>2)]=$_;\n $7=((HEAP32[((928)>>2)])|0);\n $8=((HEAP32[((1448)>>2)])|0);\n $9=((FUNCTION_TABLE_iiiiii[($7)&3](0,$_,$actual_size,1,$8))|0);\n $10=($pActual_size|0)==0;\n if (!($10)) {\n  $12=((HEAP32[(($actual_size)>>2)])|0);\n  HEAP32[(($pActual_size)>>2)]=$12;\n }\n $14=($9|0)==0;\n $15=((HEAP32[(($actual_size)>>2)])|0);\n $16=($15>>>0)<($_>>>0);\n $or_cond=$14|$16;\n if ($or_cond) {\n  __ZN4crndL14crnd_mem_errorEPKc(736);\n  $_0=0;\n\n  STACKTOP=sp;return (($_0)|0);\n }\n $19=$9;\n $20=$19&7;\n $21=($20|0)==0;\n if ($21) {\n  $_0=$9;\n\n  STACKTOP=sp;return (($_0)|0);\n }\n __ZN4crnd11crnd_assertEPKcS1_j(680,488,2529);\n $_0=$9;\n\n STACKTOP=sp;return (($_0)|0);\n}\n\n\nfunction __ZN4crnd9crnd_freeEPv($p){\n $p=($p)|0;\n var $1=0,$3=0,$4=0,$5=0,$8=0,$9=0,$10=0,label=0;\n\n $1=($p|0)==0;\n if ($1) {\n  return;\n }\n $3=$p;\n $4=$3&7;\n $5=($4|0)==0;\n if ($5) {\n  $8=((HEAP32[((928)>>2)])|0);\n  $9=((HEAP32[((1448)>>2)])|0);\n  $10=((FUNCTION_TABLE_iiiiii[($8)&3]($p,0,0,1,$9))|0);\n  return;\n } else {\n  __ZN4crndL14crnd_mem_errorEPKc(632);\n  return;\n }\n}\n\n\nfunction __ZN4crnd13prefix_coding14decoder_tables4initEjPKhj($this,$num_syms,$pCodesizes,$table_bits){\n $this=($this)|0;\n $num_syms=($num_syms)|0;\n $pCodesizes=($pCodesizes)|0;\n $table_bits=($table_bits)|0;\n var $min_codes=0,$num_codes=0,$sorted_positions=0,$1=0,$2=0,$or_cond=0,$4=0,$5=0,$i_0108=0,$6=0,$7=0,$8=0,$10=0,$11=0,$12=0,$13=0,$15=0,$16=0,$cur_code_0107=0,$total_used_syms_0106=0;\n var $max_code_size_0105=0,$min_code_size_0104=0,$i1_0103=0,$17=0,$18=0,$19=0,$21=0,$22=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0;\n var $36=0,$37=0,$38=0,$39=0,$min_code_size_1=0,$max_code_size_1=0,$total_used_syms_1=0,$cur_code_1=0,$41=0,$42=0,$43=0,$45=0,$46=0,$47=0,$48=0,$50=0,$52=0,$53=0,$storemerge=0,$55=0;\n var $56=0,$57=0,$60=0,$61=0,$62=0,$64=0,$65=0,$66=0,$67=0,$68=0,$69=0,$i2_0100=0,$71=0,$72=0,$73=0,$74=0,$76=0,$77=0,$78=0,$81=0;\n var $82=0,$83=0,$84=0,$87=0,$88=0,$89=0,$91=0,$92=0,$93=0,$94=0,$95=0,$table_bits_=0,$96=0,$97=0,$99=0,$100=0,$101=0,$102=0,$103=0,$104=0;\n var $105=0,$106=0,$108=0,$109=0,$110=0,$113=0,$114=0,$116=0,$117=0,$118=0,$119=0,$120=0,$121=0,$122=0,$codesize_098=0,$124=0,$125=0,$126=0,$128=0,$129=0;\n var $130=0,$131=0,$132=0,$133=0,$134=0,$135=0,$136=0,$137=0,$138=0,$code_097=0,$140=0,$141=0,$142=0,$143=0,$144=0,$145=0,$146=0,$147=0,$148=0,$150=0;\n var $151=0,$j_096=0,$153=0,$154=0,$157=0,$158=0,$159=0,$160=0,$163=0,$164=0,$165=0,$166=0,$168=0,$169=0,$170=0,$171=0,$172=0,$173=0,$174=0,$175=0;\n var $176=0,$177=0,$178=0,$179=0,$180=0,$181=0,$182=0,$183=0,$184=0,$185=0,$186=0,$187=0,$188=0,$189=0,$190=0,$191=0,$192=0,$193=0,$194=0,$195=0;\n var $196=0,$197=0,$198=0,$199=0,$200=0,$201=0,$202=0,$203=0,$204=0,$205=0,$206=0,$207=0,$208=0,$209=0,$210=0,$211=0,$212=0,$213=0,$214=0,$215=0;\n var $216=0,$217=0,$218=0,$219=0,$220=0,$221=0,$222=0,$223=0,$224=0,$225=0,$226=0,$227=0,$228=0,$229=0,$230=0,$231=0,$232=0,$233=0,$234=0,$235=0;\n var $236=0,$237=0,$238=0,$239=0,$240=0,$241=0,$242=0,$243=0,$244=0,$245=0,$246=0,$247=0,$248=0,$249=0,$250=0,$251=0,$252=0,$253=0,$254=0,$255=0;\n var $i5_0=0,$256=0,$258=0,$259=0,$260=0,$261=0,$263=0,$264=0,$265=0,$j6_0=0,$267=0,$269=0,$270=0,$271=0,$272=0,$274=0,$275=0,$276=0,$277=0,$278=0;\n var $_0=0,label=0;\n var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+208)|0;\n $min_codes=((sp)|0);\n $num_codes=(((sp)+(64))|0);\n $sorted_positions=(((sp)+(136))|0);\n $1=($num_syms|0)==0;\n $2=($table_bits>>>0)>((11)>>>0);\n $or_cond=$1|$2;\n if ($or_cond) {\n  $_0=0;\n\n  STACKTOP=sp;return (($_0)|0);\n }\n $4=(($this)|0);\n HEAP32[(($4)>>2)]=$num_syms;\n __ZN4crnd5utils11zero_objectIA17_jEEvRT_($num_codes);\n $5=($num_syms|0)==0;\n if ($5) {\n  $i1_0103=1;$min_code_size_0104=-1;$max_code_size_0105=0;$total_used_syms_0106=0;$cur_code_0107=0;\n } else {\n  $i_0108=0;\n  while(1) {\n\n   $6=(($pCodesizes+$i_0108)|0);\n   $7=((HEAP8[($6)])|0);\n   $8=(($7<<24)>>24)==0;\n   if (!($8)) {\n    $10=($7&255);\n    $11=(($num_codes+($10<<2))|0);\n    $12=((HEAP32[(($11)>>2)])|0);\n    $13=((($12)+(1))|0);\n    HEAP32[(($11)>>2)]=$13;\n   }\n   $15=((($i_0108)+(1))|0);\n   $16=($15>>>0)<($num_syms>>>0);\n   if ($16) {\n    $i_0108=$15;\n   } else {\n    $i1_0103=1;$min_code_size_0104=-1;$max_code_size_0105=0;$total_used_syms_0106=0;$cur_code_0107=0;\n    break;\n   }\n  }\n }\n while(1) {\n\n\n\n\n\n  $17=(($num_codes+($i1_0103<<2))|0);\n  $18=((HEAP32[(($17)>>2)])|0);\n  $19=($18|0)==0;\n  if ($19) {\n   $21=((($i1_0103)-(1))|0);\n   $22=(($this+28+($21<<2))|0);\n   HEAP32[(($22)>>2)]=0;\n   $cur_code_1=$cur_code_0107;$total_used_syms_1=$total_used_syms_0106;$max_code_size_1=$max_code_size_0105;$min_code_size_1=$min_code_size_0104;\n  } else {\n   $24=((__ZN4crnd4math7minimumIjEET_S2_S2_($min_code_size_0104,$i1_0103))|0);\n   $25=((__ZN4crnd4math7maximumIjEET_S2_S2_($max_code_size_0105,$i1_0103))|0);\n   $26=((($i1_0103)-(1))|0);\n   $27=(($min_codes+($26<<2))|0);\n   HEAP32[(($27)>>2)]=$cur_code_0107;\n   $28=((($18)+($cur_code_0107))|0);\n   $29=((($28)-(1))|0);\n   $30=(($this+28+($26<<2))|0);\n   $31=(((16)-($i1_0103))|0);\n   $32=$29<<$31;\n   $33=1<<$31;\n   $34=((($33)-(1))|0);\n   $35=$32|$34;\n   $36=((($35)+(1))|0);\n   HEAP32[(($30)>>2)]=$36;\n   $37=(($this+96+($26<<2))|0);\n   HEAP32[(($37)>>2)]=$total_used_syms_0106;\n   $38=(($sorted_positions+($i1_0103<<2))|0);\n   HEAP32[(($38)>>2)]=$total_used_syms_0106;\n   $39=((($18)+($total_used_syms_0106))|0);\n   $cur_code_1=$28;$total_used_syms_1=$39;$max_code_size_1=$25;$min_code_size_1=$24;\n  }\n\n\n\n\n  $41=$cur_code_1<<1;\n  $42=((($i1_0103)+(1))|0);\n  $43=($42>>>0)<((17)>>>0);\n  if ($43) {\n   $i1_0103=$42;$min_code_size_0104=$min_code_size_1;$max_code_size_0105=$max_code_size_1;$total_used_syms_0106=$total_used_syms_1;$cur_code_0107=$41;\n  } else {\n   break;\n  }\n }\n $45=(($this+4)|0);\n HEAP32[(($45)>>2)]=$total_used_syms_1;\n $46=(($this+172)|0);\n $47=((HEAP32[(($46)>>2)])|0);\n $48=($total_used_syms_1>>>0)>($47>>>0);\n do {\n  if ($48) {\n   $50=((__ZN4crnd4math13is_power_of_2Ej($total_used_syms_1))|0);\n   if ($50) {\n    $storemerge=$total_used_syms_1;\n   } else {\n    $52=((__ZN4crnd4math9next_pow2Ej($total_used_syms_1))|0);\n    $53=((__ZN4crnd4math7minimumIjEET_S2_S2_($num_syms,$52))|0);\n    $storemerge=$53;\n   }\n\n   HEAP32[(($46)>>2)]=$storemerge;\n   $55=(($this+176)|0);\n   $56=((HEAP32[(($55)>>2)])|0);\n   $57=($56|0)==0;\n   if (!($57)) {\n    __ZN4crnd17crnd_delete_arrayItEEvPT_($56);\n   }\n   $60=((HEAP32[(($46)>>2)])|0);\n   $61=((__ZN4crnd14crnd_new_arrayItEEPT_j($60))|0);\n   HEAP32[(($55)>>2)]=$61;\n   $62=($61|0)==0;\n   if ($62) {\n    $_0=0;\n   } else {\n    break;\n   }\n\n   STACKTOP=sp;return (($_0)|0);\n  }\n } while(0);\n $64=(($min_code_size_1)&255);\n $65=(($this+24)|0);\n HEAP8[($65)]=$64;\n $66=(($max_code_size_1)&255);\n $67=(($this+25)|0);\n HEAP8[($67)]=$66;\n $68=($num_syms|0)==0;\n if (!($68)) {\n  $69=(($this+176)|0);\n  $i2_0100=0;\n  while(1) {\n\n   $71=(($pCodesizes+$i2_0100)|0);\n   $72=((HEAP8[($71)])|0);\n   $73=($72&255);\n   $74=(($72<<24)>>24)==0;\n   if (!($74)) {\n    $76=(($num_codes+($73<<2))|0);\n    $77=((HEAP32[(($76)>>2)])|0);\n    $78=($77|0)==0;\n    if ($78) {\n     __ZN4crnd11crnd_assertEPKcS1_j(136,488,2272);\n    }\n    $81=(($sorted_positions+($73<<2))|0);\n    $82=((HEAP32[(($81)>>2)])|0);\n    $83=((($82)+(1))|0);\n    HEAP32[(($81)>>2)]=$83;\n    $84=($82>>>0)<($total_used_syms_1>>>0);\n    if (!($84)) {\n     __ZN4crnd11crnd_assertEPKcS1_j(104,488,2276);\n    }\n    $87=(($i2_0100)&65535);\n    $88=((HEAP32[(($69)>>2)])|0);\n    $89=(($88+($82<<1))|0);\n    HEAP16[(($89)>>1)]=$87;\n   }\n   $91=((($i2_0100)+(1))|0);\n   $92=($91>>>0)<($num_syms>>>0);\n   if ($92) {\n    $i2_0100=$91;\n   } else {\n    break;\n   }\n  }\n }\n $93=((HEAP8[($65)])|0);\n $94=($93&255);\n $95=($94>>>0)<($table_bits>>>0);\n $table_bits_=($95?$table_bits:0);\n $96=(($this+8)|0);\n HEAP32[(($96)>>2)]=$table_bits_;\n $97=($table_bits_|0)!=0;\n L41: do {\n  if ($97) {\n   $99=1<<$table_bits_;\n   $100=(($this+164)|0);\n   $101=((HEAP32[(($100)>>2)])|0);\n   $102=($99>>>0)>($101>>>0);\n   do {\n    if ($102) {\n     HEAP32[(($100)>>2)]=$99;\n     $108=(($this+168)|0);\n     $109=((HEAP32[(($108)>>2)])|0);\n     $110=($109|0)==0;\n     if (!($110)) {\n      __ZN4crnd17crnd_delete_arrayIjEEvPT_($109);\n     }\n     $113=((__ZN4crnd14crnd_new_arrayIjEEPT_j($99))|0);\n     HEAP32[(($108)>>2)]=$113;\n     $114=($113|0)==0;\n     if ($114) {\n      $_0=0;\n\n      STACKTOP=sp;return (($_0)|0);\n     } else {\n      $116=(($this+168)|0);\n      $117=((HEAP32[(($116)>>2)])|0);\n      $118=$117;\n      $119=$99<<2;\n      _memset((((($118)|0))|0), ((((-1)|0))|0), (((($119)|0))|0))|0;\n      $120=($table_bits_|0)==0;\n      if ($120) {\n       break L41;\n      } else {\n       $121=$116;\n       break;\n      }\n     }\n    } else {\n     $103=(($this+168)|0);\n     $104=((HEAP32[(($103)>>2)])|0);\n     $105=$104;\n     $106=$99<<2;\n     _memset((((($105)|0))|0), ((((-1)|0))|0), (((($106)|0))|0))|0;\n     $121=$103;\n    }\n   } while(0);\n\n   $122=(($this+176)|0);\n   $codesize_098=1;\n   while(1) {\n\n    $124=(($num_codes+($codesize_098<<2))|0);\n    $125=((HEAP32[(($124)>>2)])|0);\n    $126=($125|0)==0;\n    do {\n     if (!($126)) {\n      $128=((($table_bits_)-($codesize_098))|0);\n      $129=1<<$128;\n      $130=((($codesize_098)-(1))|0);\n      $131=(($min_codes+($130<<2))|0);\n      $132=((HEAP32[(($131)>>2)])|0);\n      $133=((__ZNK4crnd13prefix_coding14decoder_tables22get_unshifted_max_codeEj($this,$codesize_098))|0);\n      $134=($132>>>0)>($133>>>0);\n      if ($134) {\n       break;\n      }\n      $135=(($this+96+($130<<2))|0);\n      $136=((HEAP32[(($135)>>2)])|0);\n      $137=((($136)-($132))|0);\n      $138=$codesize_098<<16;\n      $code_097=$132;\n      while(1) {\n\n       $140=((($137)+($code_097))|0);\n       $141=((HEAP32[(($122)>>2)])|0);\n       $142=(($141+($140<<1))|0);\n       $143=((HEAP16[(($142)>>1)])|0);\n       $144=($143&65535);\n       $145=(($pCodesizes+$144)|0);\n       $146=((HEAP8[($145)])|0);\n       $147=($146&255);\n       $148=($147|0)==($codesize_098|0);\n       if (!($148)) {\n        __ZN4crnd11crnd_assertEPKcS1_j(64,488,2318);\n       }\n       $150=$code_097<<$128;\n       $151=$144|$138;\n       $j_096=0;\n       while(1) {\n\n        $153=((($j_096)+($150))|0);\n        $154=($153>>>0)<($99>>>0);\n        if (!($154)) {\n         __ZN4crnd11crnd_assertEPKcS1_j(40,488,2324);\n        }\n        $157=((HEAP32[(($121)>>2)])|0);\n        $158=(($157+($153<<2))|0);\n        $159=((HEAP32[(($158)>>2)])|0);\n        $160=($159|0)==-1;\n        if (!($160)) {\n         __ZN4crnd11crnd_assertEPKcS1_j(8,488,2326);\n        }\n        $163=((HEAP32[(($121)>>2)])|0);\n        $164=(($163+($153<<2))|0);\n        HEAP32[(($164)>>2)]=$151;\n        $165=((($j_096)+(1))|0);\n        $166=($165>>>0)<($129>>>0);\n        if ($166) {\n         $j_096=$165;\n        } else {\n         break;\n        }\n       }\n       $168=((($code_097)+(1))|0);\n       $169=($168>>>0)>($133>>>0);\n       if ($169) {\n        break;\n       } else {\n        $code_097=$168;\n       }\n      }\n     }\n    } while(0);\n    $170=((($codesize_098)+(1))|0);\n    $171=($170>>>0)>($table_bits_>>>0);\n    if ($171) {\n     break;\n    } else {\n     $codesize_098=$170;\n    }\n   }\n  }\n } while(0);\n $172=(($min_codes)|0);\n $173=((HEAP32[(($172)>>2)])|0);\n $174=(($this+96)|0);\n $175=((HEAP32[(($174)>>2)])|0);\n $176=((($175)-($173))|0);\n HEAP32[(($174)>>2)]=$176;\n $177=(($min_codes+4)|0);\n $178=((HEAP32[(($177)>>2)])|0);\n $179=(($this+100)|0);\n $180=((HEAP32[(($179)>>2)])|0);\n $181=((($180)-($178))|0);\n HEAP32[(($179)>>2)]=$181;\n $182=(($min_codes+8)|0);\n $183=((HEAP32[(($182)>>2)])|0);\n $184=(($this+104)|0);\n $185=((HEAP32[(($184)>>2)])|0);\n $186=((($185)-($183))|0);\n HEAP32[(($184)>>2)]=$186;\n $187=(($min_codes+12)|0);\n $188=((HEAP32[(($187)>>2)])|0);\n $189=(($this+108)|0);\n $190=((HEAP32[(($189)>>2)])|0);\n $191=((($190)-($188))|0);\n HEAP32[(($189)>>2)]=$191;\n $192=(($min_codes+16)|0);\n $193=((HEAP32[(($192)>>2)])|0);\n $194=(($this+112)|0);\n $195=((HEAP32[(($194)>>2)])|0);\n $196=((($195)-($193))|0);\n HEAP32[(($194)>>2)]=$196;\n $197=(($min_codes+20)|0);\n $198=((HEAP32[(($197)>>2)])|0);\n $199=(($this+116)|0);\n $200=((HEAP32[(($199)>>2)])|0);\n $201=((($200)-($198))|0);\n HEAP32[(($199)>>2)]=$201;\n $202=(($min_codes+24)|0);\n $203=((HEAP32[(($202)>>2)])|0);\n $204=(($this+120)|0);\n $205=((HEAP32[(($204)>>2)])|0);\n $206=((($205)-($203))|0);\n HEAP32[(($204)>>2)]=$206;\n $207=(($min_codes+28)|0);\n $208=((HEAP32[(($207)>>2)])|0);\n $209=(($this+124)|0);\n $210=((HEAP32[(($209)>>2)])|0);\n $211=((($210)-($208))|0);\n HEAP32[(($209)>>2)]=$211;\n $212=(($min_codes+32)|0);\n $213=((HEAP32[(($212)>>2)])|0);\n $214=(($this+128)|0);\n $215=((HEAP32[(($214)>>2)])|0);\n $216=((($215)-($213))|0);\n HEAP32[(($214)>>2)]=$216;\n $217=(($min_codes+36)|0);\n $218=((HEAP32[(($217)>>2)])|0);\n $219=(($this+132)|0);\n $220=((HEAP32[(($219)>>2)])|0);\n $221=((($220)-($218))|0);\n HEAP32[(($219)>>2)]=$221;\n $222=(($min_codes+40)|0);\n $223=((HEAP32[(($222)>>2)])|0);\n $224=(($this+136)|0);\n $225=((HEAP32[(($224)>>2)])|0);\n $226=((($225)-($223))|0);\n HEAP32[(($224)>>2)]=$226;\n $227=(($min_codes+44)|0);\n $228=((HEAP32[(($227)>>2)])|0);\n $229=(($this+140)|0);\n $230=((HEAP32[(($229)>>2)])|0);\n $231=((($230)-($228))|0);\n HEAP32[(($229)>>2)]=$231;\n $232=(($min_codes+48)|0);\n $233=((HEAP32[(($232)>>2)])|0);\n $234=(($this+144)|0);\n $235=((HEAP32[(($234)>>2)])|0);\n $236=((($235)-($233))|0);\n HEAP32[(($234)>>2)]=$236;\n $237=(($min_codes+52)|0);\n $238=((HEAP32[(($237)>>2)])|0);\n $239=(($this+148)|0);\n $240=((HEAP32[(($239)>>2)])|0);\n $241=((($240)-($238))|0);\n HEAP32[(($239)>>2)]=$241;\n $242=(($min_codes+56)|0);\n $243=((HEAP32[(($242)>>2)])|0);\n $244=(($this+152)|0);\n $245=((HEAP32[(($244)>>2)])|0);\n $246=((($245)-($243))|0);\n HEAP32[(($244)>>2)]=$246;\n $247=(($min_codes+60)|0);\n $248=((HEAP32[(($247)>>2)])|0);\n $249=(($this+156)|0);\n $250=((HEAP32[(($249)>>2)])|0);\n $251=((($250)-($248))|0);\n HEAP32[(($249)>>2)]=$251;\n $252=(($this+16)|0);\n HEAP32[(($252)>>2)]=0;\n $253=((HEAP8[($65)])|0);\n $254=($253&255);\n $255=(($this+20)|0);\n HEAP32[(($255)>>2)]=$254;\n L74: do {\n  if ($97) {\n   $i5_0=$table_bits_;\n   while(1) {\n\n    $256=($i5_0|0)==0;\n    if ($256) {\n     break L74;\n    }\n    $258=(($num_codes+($i5_0<<2))|0);\n    $259=((HEAP32[(($258)>>2)])|0);\n    $260=($259|0)==0;\n    $261=((($i5_0)-(1))|0);\n    if ($260) {\n     $i5_0=$261;\n    } else {\n     break;\n    }\n   }\n   $263=(($this+28+($261<<2))|0);\n   $264=((HEAP32[(($263)>>2)])|0);\n   HEAP32[(($252)>>2)]=$264;\n   $265=((($table_bits_)+(1))|0);\n   HEAP32[(($255)>>2)]=$265;\n   $j6_0=$265;\n   while(1) {\n\n    $267=($j6_0>>>0)>($max_code_size_1>>>0);\n    if ($267) {\n     break L74;\n    }\n    $269=(($num_codes+($j6_0<<2))|0);\n    $270=((HEAP32[(($269)>>2)])|0);\n    $271=($270|0)==0;\n    $272=((($j6_0)+(1))|0);\n    if ($271) {\n     $j6_0=$272;\n    } else {\n     break;\n    }\n   }\n   HEAP32[(($255)>>2)]=$j6_0;\n  }\n } while(0);\n $274=(($this+92)|0);\n HEAP32[(($274)>>2)]=-1;\n $275=(($this+160)|0);\n HEAP32[(($275)>>2)]=1048575;\n $276=((HEAP32[(($96)>>2)])|0);\n $277=(((32)-($276))|0);\n $278=(($this+12)|0);\n HEAP32[(($278)>>2)]=$277;\n $_0=1;\n\n STACKTOP=sp;return (($_0)|0);\n}\n\n\nfunction __ZN4crnd5utils11zero_objectIA17_jEEvRT_($obj){\n $obj=($obj)|0;\n var $1=0,label=0;\n\n $1=$obj;\n _memset((((($1)|0))|0), ((((0)|0))|0), ((((68)|0))|0))|0;\n return;\n}\n\n\nfunction __ZN4crnd4math7minimumIjEET_S2_S2_($a,$b){\n $a=($a)|0;\n $b=($b)|0;\n var $1=0,$2=0,label=0;\n\n $1=($a>>>0)<($b>>>0);\n $2=($1?$a:$b);\n return (($2)|0);\n}\n\n\nfunction __ZN4crnd4math7maximumIjEET_S2_S2_($a,$b){\n $a=($a)|0;\n $b=($b)|0;\n var $1=0,$2=0,label=0;\n\n $1=($a>>>0)>($b>>>0);\n $2=($1?$a:$b);\n return (($2)|0);\n}\n\n\nfunction __ZN4crnd17crnd_delete_arrayItEEvPT_($p){\n $p=($p)|0;\n var $1=0,$3=0,$4=0,$5=0,$6=0,$8=0,$9=0,$10=0,$11=0,$12=0,$15=0,$16=0,label=0;\n\n $1=($p|0)==0;\n if ($1) {\n  return;\n }\n $3=((($p)-(4))|0);\n $4=$3;\n $5=((HEAP32[(($4)>>2)])|0);\n $6=($5|0)==0;\n if ($6) {\n  label = 4;\n } else {\n  $8=((($p)-(8))|0);\n  $9=$8;\n  $10=((HEAP32[(($9)>>2)])|0);\n  $11=$10^-1;\n  $12=($5|0)==($11|0);\n  if (!($12)) {\n   label = 4;\n  }\n }\n if ((label|0) == 4) {\n  __ZN4crnd11crnd_assertEPKcS1_j(280,488,647);\n }\n $15=((($p)-(8))|0);\n $16=$15;\n __ZN4crnd9crnd_freeEPv($16);\n return;\n}\n\n\nfunction __ZN4crnd14crnd_new_arrayItEEPT_j($num){\n $num=($num)|0;\n var $1=0,$_num=0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$_0=0,label=0;\n\n $1=($num|0)==0;\n $_num=($1?1:$num);\n $2=$_num<<1;\n $3=((($2)+(8))|0);\n $4=((__ZN4crnd11crnd_mallocEjPj($3,0))|0);\n $5=($4|0)==0;\n if ($5) {\n  $_0=0;\n\n  return (($_0)|0);\n }\n $7=(($4+8)|0);\n $8=$7;\n $9=(($4+4)|0);\n $10=$9;\n HEAP32[(($10)>>2)]=$_num;\n $11=$_num^-1;\n $12=$4;\n HEAP32[(($12)>>2)]=$11;\n $_0=$8;\n\n return (($_0)|0);\n}\n\n\nfunction __ZN4crnd17crnd_delete_arrayIjEEvPT_($p){\n $p=($p)|0;\n var $1=0,$3=0,$4=0,$5=0,$7=0,$8=0,$9=0,$10=0,$13=0,$14=0,label=0;\n\n $1=($p|0)==0;\n if ($1) {\n  return;\n }\n $3=((($p)-(4))|0);\n $4=((HEAP32[(($3)>>2)])|0);\n $5=($4|0)==0;\n if ($5) {\n  label = 4;\n } else {\n  $7=((($p)-(8))|0);\n  $8=((HEAP32[(($7)>>2)])|0);\n  $9=$8^-1;\n  $10=($4|0)==($9|0);\n  if (!($10)) {\n   label = 4;\n  }\n }\n if ((label|0) == 4) {\n  __ZN4crnd11crnd_assertEPKcS1_j(280,488,647);\n }\n $13=((($p)-(8))|0);\n $14=$13;\n __ZN4crnd9crnd_freeEPv($14);\n return;\n}\n\n\nfunction __ZN4crnd14crnd_new_arrayIjEEPT_j($num){\n $num=($num)|0;\n var $1=0,$_num=0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$_0=0,label=0;\n\n $1=($num|0)==0;\n $_num=($1?1:$num);\n $2=$_num<<2;\n $3=((($2)+(8))|0);\n $4=((__ZN4crnd11crnd_mallocEjPj($3,0))|0);\n $5=($4|0)==0;\n if ($5) {\n  $_0=0;\n\n  return (($_0)|0);\n }\n $7=(($4+8)|0);\n $8=$7;\n $9=(($4+4)|0);\n $10=$9;\n HEAP32[(($10)>>2)]=$_num;\n $11=$_num^-1;\n $12=$4;\n HEAP32[(($12)>>2)]=$11;\n $_0=$8;\n\n return (($_0)|0);\n}\n\n\nfunction __ZNK4crnd13prefix_coding14decoder_tables22get_unshifted_max_codeEj($this,$len){\n $this=($this)|0;\n $len=($len)|0;\n var $1=0,$2=0,$or_cond=0,$5=0,$6=0,$7=0,$8=0,$10=0,$11=0,$12=0,$_0=0,label=0;\n\n $1=($len|0)!=0;\n $2=($len>>>0)<((17)>>>0);\n $or_cond=$1&$2;\n if (!($or_cond)) {\n  __ZN4crnd11crnd_assertEPKcS1_j(200,488,1956);\n }\n $5=((($len)-(1))|0);\n $6=(($this+28+($5<<2))|0);\n $7=((HEAP32[(($6)>>2)])|0);\n $8=($7|0)==0;\n if ($8) {\n  $_0=-1;\n\n  return (($_0)|0);\n }\n $10=((($7)-(1))|0);\n $11=(((16)-($len))|0);\n $12=$10>>>($11>>>0);\n $_0=$12;\n\n return (($_0)|0);\n}\n\n\nfunction __ZN4crndL20crnd_default_reallocEPvjPjbS0_($p,$size,$pActual_size,$movable,$pUser_data){\n $p=($p)|0;\n $size=($size)|0;\n $pActual_size=($pActual_size)|0;\n $movable=($movable)|0;\n $pUser_data=($pUser_data)|0;\n var $1=0,$3=0,$4=0,$6=0,$8=0,$10=0,$12=0,$14=0,$18=0,$19=0,$p_=0,$p_new_0=0,$p_final_block_0=0,$21=0,$23=0,$p_new_1=0,label=0;\n\n $1=($p|0)==0;\n do {\n  if ($1) {\n   $3=((_malloc($size))|0);\n   $4=($pActual_size|0)==0;\n   if ($4) {\n    $p_new_1=$3;\n    break;\n   }\n   $6=($3|0)==0;\n   if ($6) {\n    $10=0;\n   } else {\n    $8=((_malloc_usable_size($3))|0);\n    $10=$8;\n   }\n\n   HEAP32[(($pActual_size)>>2)]=$10;\n   $p_new_1=$3;\n  } else {\n   $12=($size|0)==0;\n   if ($12) {\n    _free($p);\n    $14=($pActual_size|0)==0;\n    if ($14) {\n     $p_new_1=0;\n     break;\n    }\n    HEAP32[(($pActual_size)>>2)]=0;\n    $p_new_1=0;\n    break;\n   }\n   if ($movable) {\n    $18=((_realloc($p,$size))|0);\n    $19=($18|0)==0;\n    $p_=($19?$p:$18);\n    $p_final_block_0=$p_;$p_new_0=$18;\n   } else {\n    $p_final_block_0=$p;$p_new_0=0;\n   }\n\n\n   $21=($pActual_size|0)==0;\n   if ($21) {\n    $p_new_1=$p_new_0;\n    break;\n   }\n   $23=((_malloc_usable_size($p_final_block_0))|0);\n   HEAP32[(($pActual_size)>>2)]=$23;\n   $p_new_1=$p_new_0;\n  }\n } while(0);\n\n return (($p_new_1)|0);\n}\n\n\nfunction __ZN4crndL14crnd_mem_errorEPKc($p_msg){\n $p_msg=($p_msg)|0;\n var label=0;\n\n __ZN4crnd11crnd_assertEPKcS1_j($p_msg,488,2502);\n return;\n}\n\n\nfunction __ZN4crnd34crnd_get_crn_format_bits_per_texelE10crn_format($fmt$0,$fmt$1){\n $fmt$0=($fmt$0)|0;\n $fmt$1=($fmt$1)|0;\n var $$etemp$10$0=0,$$etemp$10$1=0,$$etemp$9$0=0,$$etemp$9$1=0,$$etemp$8$0=0,$$etemp$8$1=0,$$etemp$7$0=0,$$etemp$7$1=0,$$etemp$6$0=0,$$etemp$6$1=0,$$etemp$5$0=0,$$etemp$5$1=0,$$etemp$4$0=0,$$etemp$4$1=0,$$etemp$3$0=0,$$etemp$3$1=0,$$etemp$2$0=0,$$etemp$2$1=0,$$etemp$1$0=0,$$etemp$1$1=0;\n var $$etemp$0$0=0,$$etemp$0$1=0,$_0=0,label=0;\n\n $$etemp$10$0=6;\n $$etemp$10$1=0;\n $$etemp$9$0=5;\n $$etemp$9$1=0;\n $$etemp$8$0=4;\n $$etemp$8$1=0;\n $$etemp$7$0=3;\n $$etemp$7$1=0;\n $$etemp$6$0=8;\n $$etemp$6$1=0;\n $$etemp$5$0=7;\n $$etemp$5$1=0;\n $$etemp$4$0=2;\n $$etemp$4$1=0;\n $$etemp$3$0=1;\n $$etemp$3$1=0;\n $$etemp$2$0=10;\n $$etemp$2$1=0;\n $$etemp$1$0=9;\n $$etemp$1$1=0;\n $$etemp$0$0=0;\n $$etemp$0$1=0;\n if ((($fmt$0)|0)==(($$etemp$3$0)|0)&(($fmt$1)|0)==(($$etemp$3$1)|0)|(($fmt$0)|0)==(($$etemp$4$0)|0)&(($fmt$1)|0)==(($$etemp$4$1)|0)|(($fmt$0)|0)==(($$etemp$5$0)|0)&(($fmt$1)|0)==(($$etemp$5$1)|0)|(($fmt$0)|0)==(($$etemp$6$0)|0)&(($fmt$1)|0)==(($$etemp$6$1)|0)|(($fmt$0)|0)==(($$etemp$7$0)|0)&(($fmt$1)|0)==(($$etemp$7$1)|0)|(($fmt$0)|0)==(($$etemp$8$0)|0)&(($fmt$1)|0)==(($$etemp$8$1)|0)|(($fmt$0)|0)==(($$etemp$9$0)|0)&(($fmt$1)|0)==(($$etemp$9$1)|0)|(($fmt$0)|0)==(($$etemp$10$0)|0)&(($fmt$1)|0)==(($$etemp$10$1)|0)) {\n  $_0=8;\n\n  return (($_0)|0);\n } else if ((($fmt$0)|0)==(($$etemp$0$0)|0)&(($fmt$1)|0)==(($$etemp$0$1)|0)|(($fmt$0)|0)==(($$etemp$1$0)|0)&(($fmt$1)|0)==(($$etemp$1$1)|0)|(($fmt$0)|0)==(($$etemp$2$0)|0)&(($fmt$1)|0)==(($$etemp$2$1)|0)) {\n  $_0=4;\n\n  return (($_0)|0);\n } else {\n  __ZN4crnd11crnd_assertEPKcS1_j(624,488,2668);\n  $_0=0;\n\n  return (($_0)|0);\n }\n  return 0;\n}\n\n\nfunction __ZN4crnd28crnd_get_bytes_per_dxt_blockE10crn_format($fmt$0,$fmt$1){\n $fmt$0=($fmt$0)|0;\n $fmt$1=($fmt$1)|0;\n var $1=0,$2=0,$3=0,label=0;\n\n $1=((__ZN4crnd34crnd_get_crn_format_bits_per_texelE10crn_format($fmt$0,$fmt$1))|0);\n $2=$1<<1;\n $3=$2&536870910;\n return (($3)|0);\n}\n\n\nfunction __ZN4crnd15crnd_get_headerERNS_10crn_headerEPKvj($tmp_header,$pData,$data_size){\n $tmp_header=($tmp_header)|0;\n $pData=($pData)|0;\n $data_size=($data_size)|0;\n var $1=0,$2=0,$or_cond=0,$4=0,$5=0,$6=0,$7=0,$9=0,$10=0,$11=0,$12=0,$14=0,$15=0,$16=0,$17=0,$_=0,label=0;\n\n $1=($pData|0)==0;\n $2=($data_size>>>0)<((74)>>>0);\n $or_cond=$1|$2;\n if ($or_cond) {\n  return ((0)|0);\n }\n $4=$pData;\n $5=$pData;\n $6=((__ZNK4crnd15crn_packed_uintILj2EEcvjEv($5))|0);\n $7=($6|0)==18552;\n if (!($7)) {\n  return ((0)|0);\n }\n $9=(($pData+2)|0);\n $10=$9;\n $11=((__ZNK4crnd15crn_packed_uintILj2EEcvjEv($10))|0);\n $12=($11>>>0)<((74)>>>0);\n if ($12) {\n  return ((0)|0);\n } else {\n  $14=(($pData+6)|0);\n  $15=$14;\n  $16=((__ZNK4crnd15crn_packed_uintILj4EEcvjEv($15))|0);\n  $17=($16>>>0)>($data_size>>>0);\n  $_=($17?0:$4);\n  return (($_)|0);\n }\n  return 0;\n}\n\n\nfunction __ZNK4crnd15crn_packed_uintILj2EEcvjEv($this){\n $this=($this)|0;\n var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,label=0;\n\n $1=(($this)|0);\n $2=((HEAP8[($1)])|0);\n $3=($2&255);\n $4=$3<<8;\n $5=(($this+1)|0);\n $6=((HEAP8[($5)])|0);\n $7=($6&255);\n $8=$4|$7;\n return (($8)|0);\n}\n\n\nfunction __ZNK4crnd15crn_packed_uintILj4EEcvjEv($this){\n $this=($this)|0;\n var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,label=0;\n\n $1=(($this)|0);\n $2=((HEAP8[($1)])|0);\n $3=($2&255);\n $4=$3<<24;\n $5=(($this+1)|0);\n $6=((HEAP8[($5)])|0);\n $7=($6&255);\n $8=$7<<16;\n $9=$8|$4;\n $10=(($this+2)|0);\n $11=((HEAP8[($10)])|0);\n $12=($11&255);\n $13=$12<<8;\n $14=$9|$13;\n $15=(($this+3)|0);\n $16=((HEAP8[($15)])|0);\n $17=($16&255);\n $18=$14|$17;\n return (($18)|0);\n}\n\n\nfunction __ZNK4crnd15crn_packed_uintILj1EEcvjEv($this){\n $this=($this)|0;\n var $1=0,$2=0,$3=0,label=0;\n\n $1=(($this)|0);\n $2=((HEAP8[($1)])|0);\n $3=($2&255);\n return (($3)|0);\n}\n\n\nfunction __ZNK4crnd15crn_packed_uintILj3EEcvjEv($this){\n $this=($this)|0;\n var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,label=0;\n\n $1=(($this)|0);\n $2=((HEAP8[($1)])|0);\n $3=($2&255);\n $4=$3<<16;\n $5=(($this+1)|0);\n $6=((HEAP8[($5)])|0);\n $7=($6&255);\n $8=$7<<8;\n $9=$8|$4;\n $10=(($this+2)|0);\n $11=((HEAP8[($10)])|0);\n $12=($11&255);\n $13=$9|$12;\n return (($13)|0);\n}\n\n\nfunction __ZN4crnd21crnd_get_texture_infoEPKvjPNS_16crn_texture_infoE($pData,$data_size,$pInfo){\n $pData=($pData)|0;\n $data_size=($data_size)|0;\n $pInfo=($pInfo)|0;\n var $1=0,$2=0,$or_cond=0,$3=0,$or_cond24=0,$5=0,$6=0,$7=0,$9=0,$10=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0;\n var $22=0,$23=0,$24=0,$25=0,$26$0=0,$26$1=0,$27=0,$st$0$0=0,$st$1$1=0,$28=0,$29=0,$31=0,$phitmp=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0,$39=0;\n var $40=0,$_0=0,label=0;\n\n $1=($pData|0)==0;\n $2=($data_size>>>0)<((74)>>>0);\n $or_cond=$1|$2;\n $3=($pInfo|0)==0;\n $or_cond24=$or_cond|$3;\n if ($or_cond24) {\n  $_0=0;\n\n  return (($_0)|0);\n }\n $5=(($pInfo)|0);\n $6=((HEAP32[(($5)>>2)])|0);\n $7=($6|0)==40;\n if (!($7)) {\n  $_0=0;\n\n  return (($_0)|0);\n }\n $9=((__ZN4crnd15crnd_get_headerERNS_10crn_headerEPKvj(0,$pData,$data_size))|0);\n $10=($9|0)==0;\n if ($10) {\n  $_0=0;\n\n  return (($_0)|0);\n }\n $12=(($9+12)|0);\n $13=((__ZNK4crnd15crn_packed_uintILj2EEcvjEv($12))|0);\n $14=(($pInfo+4)|0);\n HEAP32[(($14)>>2)]=$13;\n $15=(($9+14)|0);\n $16=((__ZNK4crnd15crn_packed_uintILj2EEcvjEv($15))|0);\n $17=(($pInfo+8)|0);\n HEAP32[(($17)>>2)]=$16;\n $18=(($9+16)|0);\n $19=((__ZNK4crnd15crn_packed_uintILj1EEcvjEv($18))|0);\n $20=(($pInfo+12)|0);\n HEAP32[(($20)>>2)]=$19;\n $21=(($9+17)|0);\n $22=((__ZNK4crnd15crn_packed_uintILj1EEcvjEv($21))|0);\n $23=(($pInfo+16)|0);\n HEAP32[(($23)>>2)]=$22;\n $24=(($9+18)|0);\n $25=((__ZNK4crnd15crn_packed_uintILj1EEcvjEv($24))|0);\n $26$0=$25;\n $26$1=0;\n $27=(($pInfo+32)|0);\n $st$0$0=(($27)|0);\n HEAP32[(($st$0$0)>>2)]=$26$0;\n $st$1$1=(($27+4)|0);\n HEAP32[(($st$1$1)>>2)]=$26$1;\n $28=((__ZNK4crnd15crn_packed_uintILj1EEcvjEv($24))|0);\n $29=($28|0)==0;\n if ($29) {\n  $33=8;\n } else {\n  $31=($28|0)==9;\n  $phitmp=($31?8:16);\n  $33=$phitmp;\n }\n\n $34=(($pInfo+20)|0);\n HEAP32[(($34)>>2)]=$33;\n $35=(($9+25)|0);\n $36=((__ZNK4crnd15crn_packed_uintILj4EEcvjEv($35))|0);\n $37=(($pInfo+24)|0);\n HEAP32[(($37)>>2)]=$36;\n $38=(($9+29)|0);\n $39=((__ZNK4crnd15crn_packed_uintILj4EEcvjEv($38))|0);\n $40=(($pInfo+28)|0);\n HEAP32[(($40)>>2)]=$39;\n $_0=1;\n\n return (($_0)|0);\n}\n\n\nfunction __ZN4crnd25static_huffman_data_modelC2Ev($this){\n $this=($this)|0;\n var $1=0,$2=0,$3=0,label=0;\n\n $1=(($this)|0);\n HEAP32[(($1)>>2)]=0;\n $2=(($this+4)|0);\n __ZN4crnd6vectorIhEC1Ev($2);\n $3=(($this+20)|0);\n HEAP32[(($3)>>2)]=0;\n return;\n}\n\n\nfunction __ZN4crnd6vectorIhEC1Ev($this){\n $this=($this)|0;\n var label=0;\n\n __ZN4crnd6vectorIhEC2Ev($this);\n return;\n}\n\n\nfunction __ZN4crnd6vectorIhED1Ev($this){\n $this=($this)|0;\n var label=0;\n\n __ZN4crnd6vectorIhED2Ev($this);\n return;\n}\n\n\nfunction __ZN4crnd25static_huffman_data_modelD2Ev($this){\n $this=($this)|0;\n var $1=0,$2=0,$3=0,$7=0,$9=0,$6$0=0,$6$1=0,$12$0=0,$12$1=0,label=0;\n\n $1=(($this+20)|0);\n $2=((HEAP32[(($1)>>2)])|0);\n $3=($2|0)==0;\n if (!($3)) {\n  __ZN4crnd11crnd_deleteINS_13prefix_coding14decoder_tablesEEEvPT_($2);\n }\n $9=(($this+4)|0);\n __ZN4crnd6vectorIhED1Ev($9);\n return;\n}\n\n\nfunction __ZN4crnd11crnd_deleteINS_13prefix_coding14decoder_tablesEEEvPT_($p){\n $p=($p)|0;\n var $1=0,$3=0,label=0;\n\n $1=($p|0)==0;\n if ($1) {\n  return;\n }\n __ZN4crnd7helpers8destructINS_13prefix_coding14decoder_tablesEEEvPT_($p);\n $3=$p;\n __ZN4crnd9crnd_freeEPv($3);\n return;\n}\n\n\nfunction __ZN4crnd25static_huffman_data_model5clearEv($this){\n $this=($this)|0;\n var $1=0,$2=0,$3=0,$4=0,$5=0,label=0;\n\n $1=(($this)|0);\n HEAP32[(($1)>>2)]=0;\n $2=(($this+4)|0);\n __ZN4crnd6vectorIhE5clearEv($2);\n $3=(($this+20)|0);\n $4=((HEAP32[(($3)>>2)])|0);\n $5=($4|0)==0;\n if ($5) {\n  return;\n }\n __ZN4crnd11crnd_deleteINS_13prefix_coding14decoder_tablesEEEvPT_($4);\n HEAP32[(($3)>>2)]=0;\n return;\n}\n\n\nfunction __ZN4crnd6vectorIhE5clearEv($this){\n $this=($this)|0;\n var $1=0,$2=0,$3=0,$5=0,$6=0,$8=0,label=0;\n\n $1=(($this)|0);\n $2=((HEAP32[(($1)>>2)])|0);\n $3=($2|0)==0;\n if ($3) {\n  $8=(($this+12)|0);\n  HEAP8[($8)]=0;\n  return;\n }\n $5=(($this+4)|0);\n __ZN4crnd9crnd_freeEPv($2);\n HEAP32[(($1)>>2)]=0;\n HEAP32[(($5)>>2)]=0;\n $6=(($this+8)|0);\n HEAP32[(($6)>>2)]=0;\n $8=(($this+12)|0);\n HEAP8[($8)]=0;\n return;\n}\n\n\nfunction __ZN4crnd6vectorIhE6resizeEj($this,$new_size){\n $this=($this)|0;\n $new_size=($new_size)|0;\n var $1=0,$2=0,$3=0,$5=0,$7=0,$8=0,$9=0,$11=0,$12=0,$13=0,$15=0,$16=0,$17=0,$18=0,$19=0,$_0=0,label=0;\n\n $1=(($this+4)|0);\n $2=((HEAP32[(($1)>>2)])|0);\n $3=($2|0)==($new_size|0);\n if ($3) {\n  $_0=1;\n\n  return (($_0)|0);\n }\n $5=($2>>>0)>($new_size>>>0);\n if (!($5)) {\n  $7=(($this+8)|0);\n  $8=((HEAP32[(($7)>>2)])|0);\n  $9=($8>>>0)<($new_size>>>0);\n  do {\n   if ($9) {\n    $11=((($2)+(1))|0);\n    $12=($11|0)==($new_size|0);\n    $13=((__ZN4crnd6vectorIhE17increase_capacityEjb($this,$new_size,$12))|0);\n    if ($13) {\n     break;\n    } else {\n     $_0=0;\n    }\n\n    return (($_0)|0);\n   }\n  } while(0);\n  $15=(($this)|0);\n  $16=((HEAP32[(($15)>>2)])|0);\n  $17=((HEAP32[(($1)>>2)])|0);\n  $18=(($16+$17)|0);\n  $19=((($new_size)-($17))|0);\n  __ZN4crnd11scalar_typeIhE15construct_arrayEPhj($18,$19);\n }\n HEAP32[(($1)>>2)]=$new_size;\n $_0=1;\n\n return (($_0)|0);\n}\n\n\nfunction __ZN4crnd6vectorIhEixEj($this,$i){\n $this=($this)|0;\n $i=($i)|0;\n var $1=0,$2=0,$3=0,$6=0,$7=0,$8=0,label=0;\n\n $1=(($this+4)|0);\n $2=((HEAP32[(($1)>>2)])|0);\n $3=($2>>>0)>($i>>>0);\n if (!($3)) {\n  __ZN4crnd11crnd_assertEPKcS1_j(312,488,906);\n }\n $6=(($this)|0);\n $7=((HEAP32[(($6)>>2)])|0);\n $8=(($7+$i)|0);\n return (($8)|0);\n}\n\n\nfunction __ZN4crnd8crnd_newINS_13prefix_coding14decoder_tablesEEEPT_v(){\n var $1=0,$2=0,$4=0,$5=0,$_0=0,label=0;\n\n $1=((__ZN4crnd11crnd_mallocEjPj(180,0))|0);\n $2=($1|0)==0;\n if ($2) {\n  $_0=0;\n\n  return (($_0)|0);\n }\n $4=$1;\n $5=((__ZN4crnd7helpers9constructINS_13prefix_coding14decoder_tablesEEEPT_S5_($4))|0);\n $_0=$5;\n\n return (($_0)|0);\n}\n\n\nfunction __ZNK4crnd25static_huffman_data_model26compute_decoder_table_bitsEv($this){\n $this=($this)|0;\n var $1=0,$2=0,$3=0,$5=0,$6=0,$7=0,$8=0,$decoder_table_bits_0=0,label=0;\n\n $1=(($this)|0);\n $2=((HEAP32[(($1)>>2)])|0);\n $3=($2>>>0)>((16)>>>0);\n if (!($3)) {\n  $decoder_table_bits_0=0;\n\n  return (($decoder_table_bits_0)|0);\n }\n $5=((__ZN4crnd4math10ceil_log2iEj($2))|0);\n $6=((($5)+(1))|0);\n $7=((__ZN4crnd4math7minimumIjEET_S2_S2_($6,11))|0);\n $8=$7&255;\n $decoder_table_bits_0=$8;\n\n return (($decoder_table_bits_0)|0);\n}\n\n\nfunction __ZN4crnd25static_huffman_data_model22prepare_decoder_tablesEv($this){\n $this=($this)|0;\n var $1=0,$2=0,$3=0,$4=0,$or_cond=0,$7=0,$8=0,$9=0,$10=0,$12=0,$14=0,$15=0,$16=0,$17=0,$18=0,label=0;\n\n $1=(($this+4)|0);\n $2=((__ZNK4crnd6vectorIhE4sizeEv($1))|0);\n $3=($2|0)!=0;\n $4=($2>>>0)<((8193)>>>0);\n $or_cond=$3&$4;\n if (!($or_cond)) {\n  __ZN4crnd11crnd_assertEPKcS1_j(552,488,3002);\n }\n $7=(($this)|0);\n HEAP32[(($7)>>2)]=$2;\n $8=(($this+20)|0);\n $9=((HEAP32[(($8)>>2)])|0);\n $10=($9|0)==0;\n if ($10) {\n  $12=((__ZN4crnd8crnd_newINS_13prefix_coding14decoder_tablesEEEPT_v())|0);\n  HEAP32[(($8)>>2)]=$12;\n }\n $14=((HEAP32[(($8)>>2)])|0);\n $15=((HEAP32[(($7)>>2)])|0);\n $16=((__ZN4crnd6vectorIhEixEj($1,0))|0);\n $17=((__ZNK4crnd25static_huffman_data_model26compute_decoder_table_bitsEv($this))|0);\n $18=((__ZN4crnd13prefix_coding14decoder_tables4initEjPKhj($14,$15,$16,$17))|0);\n return (($18)|0);\n}\n\n\nfunction __ZNK4crnd6vectorIhE4sizeEv($this){\n $this=($this)|0;\n var $1=0,$2=0,label=0;\n\n $1=(($this+4)|0);\n $2=((HEAP32[(($1)>>2)])|0);\n return (($2)|0);\n}\n\n\nfunction __ZN4crnd4math10ceil_log2iEj($v){\n $v=($v)|0;\n var $1=0,$2=0,$3=0,$4=0,$or_cond=0,$5=0,$l_0=0,label=0;\n\n $1=((__ZN4crnd4math11floor_log2iEj($v))|0);\n $2=($1|0)!=32;\n $3=1<<$1;\n $4=($3>>>0)<($v>>>0);\n $or_cond=$2&$4;\n $5=($or_cond&1);\n $l_0=((($5)+($1))|0);\n return (($l_0)|0);\n}\n\n\nfunction __ZN4crnd12symbol_codecC2Ev($this){\n $this=($this)|0;\n var $1=0,label=0;\n\n $1=$this;\n _memset((((($1)|0))|0), ((((0)|0))|0), ((((24)|0))|0))|0;\n return;\n}\n\n\nfunction __ZN4crnd12symbol_codec32decode_receive_static_data_modelERNS_25static_huffman_data_modelE($this,$model){\n $this=($this)|0;\n $model=($model)|0;\n var $dm=0,$1=0,$2=0,$3=0,$6=0,$7=0,$9=0,$10=0,$11=0,$12=0,$or_cond=0,$14=0,$15=0,$17=0,$i_052=0,$20=0,$21=0,$22=0,$23=0,$24=0;\n var $25=0,$26=0,$27=0,$28=0,$30=0,$31=0,$ofs_048=0,$32=0,$33=0,$34=0,$36=0,$37=0,$38=0,$41=0,$42=0,$43=0,$45=0,$ofs_0_be=0,$46=0,$48=0;\n var $49=0,$50=0,$52=0,$_off=0,$54=0,$56=0,$58=0,$59=0,$61=0,$62=0,$len2_0=0,$64=0,$65=0,$or_cond43=0,$67=0,$68=0,$69=0,$70=0,$72=0,$73=0;\n var $ofs_144=0,$74=0,$75=0,$76=0,$ofs_0_lcssa=0,$78=0,$80=0,$_0=0,$_1=0,$19$0=0,$19$1=0,$84$0=0,$84$1=0,label=0;\n var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+24)|0;\n $dm=((sp)|0);\n $1=((__ZN4crnd4math10total_bitsEj(8192))|0);\n $2=((__ZN4crnd12symbol_codec11decode_bitsEj($this,$1))|0);\n $3=($2|0)==0;\n if ($3) {\n  __ZN4crnd25static_huffman_data_model5clearEv($model);\n  $_1=1;\n\n  STACKTOP=sp;return (($_1)|0);\n }\n $6=(($model+4)|0);\n $7=((__ZN4crnd6vectorIhE6resizeEj($6,$2))|0);\n if (!($7)) {\n  $_1=0;\n\n  STACKTOP=sp;return (($_1)|0);\n }\n $9=((__ZN4crnd6vectorIhEixEj($6,0))|0);\n _memset((((($9)|0))|0), ((((0)|0))|0), (((($2)|0))|0))|0;\n $10=((__ZN4crnd12symbol_codec11decode_bitsEj($this,5))|0);\n $11=($10|0)==0;\n $12=($10>>>0)>((21)>>>0);\n $or_cond=$11|$12;\n if ($or_cond) {\n  $_1=0;\n\n  STACKTOP=sp;return (($_1)|0);\n }\n __ZN4crnd25static_huffman_data_modelC2Ev($dm);\n $14=(($dm+4)|0);\n $15=((__ZN4crnd6vectorIhE6resizeEj($14,21))|0);\n L12: do {\n  if ($15) {\n   $17=($10|0)==0;\n   if (!($17)) {\n    $i_052=0;\n    while(1) {\n\n     $20=((__ZN4crnd12symbol_codec11decode_bitsEj($this,3))|0);\n     $21=((864+$i_052)|0);\n     $22=((HEAP8[($21)])|0);\n     $23=($22&255);\n     $24=((__ZN4crnd6vectorIhEixEj($14,$23))|0);\n     $25=(($20)&255);\n     HEAP8[($24)]=$25;\n     $26=((($i_052)+(1))|0);\n     $27=($26>>>0)<($10>>>0);\n     if ($27) {\n      $i_052=$26;\n     } else {\n      break;\n     }\n    }\n   }\n   $28=((__ZN4crnd25static_huffman_data_model22prepare_decoder_tablesEv($dm))|0);\n   if (!($28)) {\n    $_0=0;\n    break;\n   }\n   $30=($2|0)==0;\n   L20: do {\n    if ($30) {\n     $ofs_0_lcssa=0;\n    } else {\n     $ofs_048=0;\n     L21: while(1) {\n\n      $32=((($2)-($ofs_048))|0);\n      $33=((__ZN4crnd12symbol_codec6decodeERKNS_25static_huffman_data_modelE($this,$dm))|0);\n      $34=($33>>>0)<((17)>>>0);\n      do {\n       if ($34) {\n        $36=((__ZN4crnd6vectorIhEixEj($6,$ofs_048))|0);\n        $37=((($ofs_048)+(1))|0);\n        $38=(($33)&255);\n        HEAP8[($36)]=$38;\n        $ofs_0_be=$37;\n       } else {\n        if (((($33|0))|0)==((17)|0)) {\n         $41=((__ZN4crnd12symbol_codec11decode_bitsEj($this,3))|0);\n         $42=((($41)+(3))|0);\n         $43=($42>>>0)>($32>>>0);\n         if ($43) {\n          $_0=0;\n          break L12;\n         }\n         $45=((($42)+($ofs_048))|0);\n         $ofs_0_be=$45;\n         break;\n        } else if (((($33|0))|0)==((18)|0)) {\n         $48=((__ZN4crnd12symbol_codec11decode_bitsEj($this,7))|0);\n         $49=((($48)+(11))|0);\n         $50=($49>>>0)>($32>>>0);\n         if ($50) {\n          $_0=0;\n          break L12;\n         }\n         $52=((($49)+($ofs_048))|0);\n         $ofs_0_be=$52;\n         break;\n        } else {\n         $_off=((($33)-(19))|0);\n         $54=($_off>>>0)<((2)>>>0);\n         if (!($54)) {\n          break L21;\n         }\n         $56=($33|0)==19;\n         if ($56) {\n          $58=((__ZN4crnd12symbol_codec11decode_bitsEj($this,2))|0);\n          $59=((($58)+(3))|0);\n          $len2_0=$59;\n         } else {\n          $61=((__ZN4crnd12symbol_codec11decode_bitsEj($this,6))|0);\n          $62=((($61)+(7))|0);\n          $len2_0=$62;\n         }\n\n         $64=($ofs_048|0)==0;\n         $65=($len2_0>>>0)>($32>>>0);\n         $or_cond43=$64|$65;\n         if ($or_cond43) {\n          $_0=0;\n          break L12;\n         }\n         $67=((($ofs_048)-(1))|0);\n         $68=((__ZN4crnd6vectorIhEixEj($6,$67))|0);\n         $69=((HEAP8[($68)])|0);\n         $70=(($69<<24)>>24)==0;\n         if ($70) {\n          $_0=0;\n          break L12;\n         }\n         $72=((($len2_0)+($ofs_048))|0);\n         $73=($ofs_048>>>0)<($72>>>0);\n         if ($73) {\n          $ofs_144=$ofs_048;\n         } else {\n          $ofs_0_be=$ofs_048;\n          break;\n         }\n         while(1) {\n\n          $74=((__ZN4crnd6vectorIhEixEj($6,$ofs_144))|0);\n          $75=((($ofs_144)+(1))|0);\n          HEAP8[($74)]=$69;\n          $76=($75>>>0)<($72>>>0);\n          if ($76) {\n           $ofs_144=$75;\n          } else {\n           break;\n          }\n         }\n         $31=((($len2_0)+($ofs_048))|0);\n         $ofs_0_be=$31;\n         break;\n        }\n       }\n      } while(0);\n\n      $46=($ofs_0_be>>>0)<($2>>>0);\n      if ($46) {\n       $ofs_048=$ofs_0_be;\n      } else {\n       $ofs_0_lcssa=$ofs_0_be;\n       break L20;\n      }\n     }\n     __ZN4crnd11crnd_assertEPKcS1_j(480,488,3145);\n     $_0=0;\n     break L12;\n    }\n   } while(0);\n\n   $78=($ofs_0_lcssa|0)==($2|0);\n   if (!($78)) {\n    $_0=0;\n    break;\n   }\n   $80=((__ZN4crnd25static_huffman_data_model22prepare_decoder_tablesEv($model))|0);\n   $_0=$80;\n  } else {\n   $_0=0;\n  }\n } while(0);\n\n __ZN4crnd25static_huffman_data_modelD2Ev($dm);\n $_1=$_0;\n\n STACKTOP=sp;return (($_1)|0);\n}\n\n\nfunction __ZN4crnd12symbol_codec11decode_bitsEj($this,$num_bits){\n $this=($this)|0;\n $num_bits=($num_bits)|0;\n var $1=0,$3=0,$5=0,$6=0,$7=0,$8=0,$9=0,$11=0,$_0=0,label=0;\n\n $1=($num_bits|0)==0;\n if ($1) {\n  $_0=0;\n\n  return (($_0)|0);\n }\n $3=($num_bits>>>0)>((16)>>>0);\n if ($3) {\n  $5=((($num_bits)-(16))|0);\n  $6=((__ZN4crnd12symbol_codec8get_bitsEj($this,$5))|0);\n  $7=((__ZN4crnd12symbol_codec8get_bitsEj($this,16))|0);\n  $8=$6<<16;\n  $9=$8|$7;\n  $_0=$9;\n\n  return (($_0)|0);\n } else {\n  $11=((__ZN4crnd12symbol_codec8get_bitsEj($this,$num_bits))|0);\n  $_0=$11;\n\n  return (($_0)|0);\n }\n  return 0;\n}\n\n\nfunction __ZN4crnd4math10total_bitsEj($v){\n $v=($v)|0;\n var $1=0,$l_04=0,$_03=0,$2=0,$3=0,$4=0,$l_0_lcssa=0,label=0;\n\n $1=($v|0)==0;\n if ($1) {\n  $l_0_lcssa=0;\n } else {\n  $_03=$v;$l_04=0;\n  while(1) {\n\n\n   $2=$_03>>>1;\n   $3=((($l_04)+(1))|0);\n   $4=($2|0)==0;\n   if ($4) {\n    $l_0_lcssa=$3;\n    break;\n   } else {\n    $_03=$2;$l_04=$3;\n   }\n  }\n }\n\n return (($l_0_lcssa)|0);\n}\n\n\nfunction __ZN4crnd12symbol_codec6decodeERKNS_25static_huffman_data_modelE($this,$model){\n $this=($this)|0;\n $model=($model)|0;\n var $1=0,$2=0,$3=0,$4=0,$5=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$15=0,$16=0,$17=0,$phitmp=0,$p_0=0,$c0_0=0,$19=0,$20=0,$22=0;\n var $23=0,$24=0,$p_1=0,$c1_0=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$36=0,$37=0,$38=0,$40=0,$41=0,$42=0,$43=0,$44=0;\n var $45=0,$46=0,$47=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$57=0,$58=0,$59=0,$60=0,$61=0,$62=0,$63=0,$64=0,$65=0,$68=0;\n var $69=0,$70=0,$71=0,$72=0,$73=0,$74=0,$77=0,$78=0,$len_0=0,$80=0,$81=0,$82=0,$83=0,$84=0,$86=0,$87=0,$88=0,$89=0,$90=0,$91=0;\n var $92=0,$93=0,$94=0,$97=0,$98=0,$99=0,$100=0,$101=0,$sym_0=0,$len_1=0,$103=0,$104=0,$105=0,$106=0,$_0=0,label=0;\n\n $1=(($model+20)|0);\n $2=((HEAP32[(($1)>>2)])|0);\n $3=(($this+20)|0);\n $4=((HEAP32[(($3)>>2)])|0);\n $5=($4|0)<24;\n do {\n  if ($5) {\n   $7=($4|0)<16;\n   $8=(($this+4)|0);\n   $9=((HEAP32[(($8)>>2)])|0);\n   $10=(($this+8)|0);\n   $11=((HEAP32[(($10)>>2)])|0);\n   $12=($9>>>0)<($11>>>0);\n   if (!($7)) {\n    if ($12) {\n     $36=(($9+1)|0);\n     HEAP32[(($8)>>2)]=$36;\n     $37=((HEAP8[($9)])|0);\n     $38=($37&255);\n     $40=$38;\n    } else {\n     $40=0;\n    }\n\n    $41=((HEAP32[(($3)>>2)])|0);\n    $42=((($41)+(8))|0);\n    HEAP32[(($3)>>2)]=$42;\n    $43=(((24)-($41))|0);\n    $44=$40<<$43;\n    $45=(($this+16)|0);\n    $46=((HEAP32[(($45)>>2)])|0);\n    $47=$44|$46;\n    HEAP32[(($45)>>2)]=$47;\n    break;\n   }\n   if ($12) {\n    $15=(($9+1)|0);\n    $16=((HEAP8[($9)])|0);\n    $17=($16&255);\n    $phitmp=$17<<8;\n    $c0_0=$phitmp;$p_0=$15;\n   } else {\n    $c0_0=0;$p_0=$9;\n   }\n\n\n   $19=((HEAP32[(($10)>>2)])|0);\n   $20=($p_0>>>0)<($19>>>0);\n   if ($20) {\n    $22=(($p_0+1)|0);\n    $23=((HEAP8[($p_0)])|0);\n    $24=($23&255);\n    $c1_0=$24;$p_1=$22;\n   } else {\n    $c1_0=0;$p_1=$p_0;\n   }\n\n\n   HEAP32[(($8)>>2)]=$p_1;\n   $26=((HEAP32[(($3)>>2)])|0);\n   $27=((($26)+(16))|0);\n   HEAP32[(($3)>>2)]=$27;\n   $28=$c1_0|$c0_0;\n   $29=(((16)-($26))|0);\n   $30=$28<<$29;\n   $31=(($this+16)|0);\n   $32=((HEAP32[(($31)>>2)])|0);\n   $33=$30|$32;\n   HEAP32[(($31)>>2)]=$33;\n  }\n } while(0);\n $49=(($this+16)|0);\n $50=((HEAP32[(($49)>>2)])|0);\n $51=$50>>>16;\n $52=((($51)+(1))|0);\n $53=(($2+16)|0);\n $54=((HEAP32[(($53)>>2)])|0);\n $55=($52>>>0)>($54>>>0);\n do {\n  if ($55) {\n   $77=(($2+20)|0);\n   $78=((HEAP32[(($77)>>2)])|0);\n   $len_0=$78;\n   while(1) {\n\n    $80=((($len_0)-(1))|0);\n    $81=(($2+28+($80<<2))|0);\n    $82=((HEAP32[(($81)>>2)])|0);\n    $83=($52>>>0)>($82>>>0);\n    $84=((($len_0)+(1))|0);\n    if ($83) {\n     $len_0=$84;\n    } else {\n     break;\n    }\n   }\n   $86=(($2+96+($80<<2))|0);\n   $87=((HEAP32[(($86)>>2)])|0);\n   $88=((HEAP32[(($49)>>2)])|0);\n   $89=(((32)-($len_0))|0);\n   $90=$88>>>($89>>>0);\n   $91=((($90)+($87))|0);\n   $92=(($model)|0);\n   $93=((HEAP32[(($92)>>2)])|0);\n   $94=($91>>>0)<($93>>>0);\n   if ($94) {\n    $97=(($2+176)|0);\n    $98=((HEAP32[(($97)>>2)])|0);\n    $99=(($98+($91<<1))|0);\n    $100=((HEAP16[(($99)>>1)])|0);\n    $101=($100&65535);\n    $len_1=$len_0;$sym_0=$101;\n    break;\n   }\n   __ZN4crnd11crnd_assertEPKcS1_j(480,488,3271);\n   $_0=0;\n\n   return (($_0)|0);\n  } else {\n   $57=(($2+8)|0);\n   $58=((HEAP32[(($57)>>2)])|0);\n   $59=(((32)-($58))|0);\n   $60=$50>>>($59>>>0);\n   $61=(($2+168)|0);\n   $62=((HEAP32[(($61)>>2)])|0);\n   $63=(($62+($60<<2))|0);\n   $64=((HEAP32[(($63)>>2)])|0);\n   $65=($64|0)==-1;\n   if ($65) {\n    __ZN4crnd11crnd_assertEPKcS1_j(408,488,3249);\n   }\n   $68=$64&65535;\n   $69=$64>>>16;\n   $70=(($model+4)|0);\n   $71=((__ZNK4crnd6vectorIhEixEj($70,$68))|0);\n   $72=((HEAP8[($71)])|0);\n   $73=($72&255);\n   $74=($73|0)==($69|0);\n   if ($74) {\n    $len_1=$69;$sym_0=$68;\n    break;\n   }\n   __ZN4crnd11crnd_assertEPKcS1_j(376,488,3253);\n   $len_1=$69;$sym_0=$68;\n  }\n } while(0);\n\n\n $103=((HEAP32[(($49)>>2)])|0);\n $104=$103<<$len_1;\n HEAP32[(($49)>>2)]=$104;\n $105=((HEAP32[(($3)>>2)])|0);\n $106=((($105)-($len_1))|0);\n HEAP32[(($3)>>2)]=$106;\n $_0=$sym_0;\n\n return (($_0)|0);\n}\n\n\nfunction __ZN4crnd12symbol_codec14start_decodingEPKhj($this,$pBuf,$buf_size){\n $this=($this)|0;\n $pBuf=($pBuf)|0;\n $buf_size=($buf_size)|0;\n var $1=0,$3=0,$4=0,$5=0,$6=0,$7=0,$_0=0,label=0;\n\n $1=($buf_size|0)==0;\n if ($1) {\n  $_0=0;\n\n  return (($_0)|0);\n }\n $3=(($this)|0);\n HEAP32[(($3)>>2)]=$pBuf;\n $4=(($this+4)|0);\n HEAP32[(($4)>>2)]=$pBuf;\n $5=(($this+12)|0);\n HEAP32[(($5)>>2)]=$buf_size;\n $6=(($pBuf+$buf_size)|0);\n $7=(($this+8)|0);\n HEAP32[(($7)>>2)]=$6;\n __ZN4crnd12symbol_codec13get_bits_initEv($this);\n $_0=1;\n\n return (($_0)|0);\n}\n\n\nfunction __ZN4crnd12symbol_codec13get_bits_initEv($this){\n $this=($this)|0;\n var $1=0,$2=0,label=0;\n\n $1=(($this+16)|0);\n HEAP32[(($1)>>2)]=0;\n $2=(($this+20)|0);\n HEAP32[(($2)>>2)]=0;\n return;\n}\n\n\nfunction __ZN4crnd12symbol_codec8get_bitsEj($this,$num_bits){\n $this=($this)|0;\n $num_bits=($num_bits)|0;\n var $1=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$10=0,$11=0,$12=0,$14=0,$15=0,$16=0,$c_0=0,$18=0,$19=0,$20=0,$23=0,$24=0,$25=0;\n var $26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,label=0;\n\n $1=($num_bits>>>0)<((33)>>>0);\n if (!($1)) {\n  __ZN4crnd11crnd_assertEPKcS1_j(464,488,3195);\n }\n $3=(($this+20)|0);\n $4=((HEAP32[(($3)>>2)])|0);\n $5=($4|0)<($num_bits|0);\n if ($5) {\n  $6=(($this+4)|0);\n  $7=(($this+8)|0);\n  $8=(($this+16)|0);\n  while(1) {\n   $10=((HEAP32[(($6)>>2)])|0);\n   $11=((HEAP32[(($7)>>2)])|0);\n   $12=($10|0)==($11|0);\n   if ($12) {\n    $c_0=0;\n   } else {\n    $14=(($10+1)|0);\n    HEAP32[(($6)>>2)]=$14;\n    $15=((HEAP8[($10)])|0);\n    $16=($15&255);\n    $c_0=$16;\n   }\n\n   $18=((HEAP32[(($3)>>2)])|0);\n   $19=((($18)+(8))|0);\n   HEAP32[(($3)>>2)]=$19;\n   $20=($19|0)<33;\n   if (!($20)) {\n    __ZN4crnd11crnd_assertEPKcS1_j(432,488,3204);\n   }\n   $23=((HEAP32[(($3)>>2)])|0);\n   $24=(((32)-($23))|0);\n   $25=$c_0<<$24;\n   $26=((HEAP32[(($8)>>2)])|0);\n   $27=$25|$26;\n   HEAP32[(($8)>>2)]=$27;\n   $28=((HEAP32[(($3)>>2)])|0);\n   $29=($28|0)<($num_bits|0);\n   if (!($29)) {\n    break;\n   }\n  }\n }\n $30=(($this+16)|0);\n $31=((HEAP32[(($30)>>2)])|0);\n $32=(((32)-($num_bits))|0);\n $33=$31>>>($32>>>0);\n $34=$31<<$num_bits;\n HEAP32[(($30)>>2)]=$34;\n $35=((HEAP32[(($3)>>2)])|0);\n $36=((($35)-($num_bits))|0);\n HEAP32[(($3)>>2)]=$36;\n return (($33)|0);\n}\n\n\nfunction __ZNK4crnd6vectorIhEixEj($this,$i){\n $this=($this)|0;\n $i=($i)|0;\n var $1=0,$2=0,$3=0,$6=0,$7=0,$8=0,label=0;\n\n $1=(($this+4)|0);\n $2=((HEAP32[(($1)>>2)])|0);\n $3=($2>>>0)>($i>>>0);\n if (!($3)) {\n  __ZN4crnd11crnd_assertEPKcS1_j(312,488,905);\n }\n $6=(($this)|0);\n $7=((HEAP32[(($6)>>2)])|0);\n $8=(($7+$i)|0);\n return (($8)|0);\n}\n\n\nfunction __ZN4crnd17crnd_unpack_beginEPKvj($pData,$data_size){\n $pData=($pData)|0;\n $data_size=($data_size)|0;\n var $1=0,$2=0,$or_cond=0,$4=0,$5=0,$7=0,$10=0,$_0=0,label=0;\n\n $1=($pData|0)==0;\n $2=($data_size>>>0)<((62)>>>0);\n $or_cond=$1|$2;\n do {\n  if ($or_cond) {\n   $_0=0;\n  } else {\n   $4=((__ZN4crnd8crnd_newINS_12crn_unpackerEEEPT_v())|0);\n   $5=($4|0)==0;\n   if ($5) {\n    $_0=0;\n    break;\n   }\n   $7=((__ZN4crnd12crn_unpacker4initEPKvj($4,$pData,$data_size))|0);\n   if ($7) {\n    $10=$4;\n    $_0=$10;\n    break;\n   } else {\n    __ZN4crnd11crnd_deleteINS_12crn_unpackerEEEvPT_($4);\n    $_0=0;\n    break;\n   }\n  }\n } while(0);\n\n return (($_0)|0);\n}\n\n\nfunction __ZN4crnd8crnd_newINS_12crn_unpackerEEEPT_v(){\n var $1=0,$2=0,$4=0,$5=0,$_0=0,label=0;\n\n $1=((__ZN4crnd11crnd_mallocEjPj(300,0))|0);\n $2=($1|0)==0;\n if ($2) {\n  $_0=0;\n\n  return (($_0)|0);\n }\n $4=$1;\n $5=((__ZN4crnd7helpers9constructINS_12crn_unpackerEEEPT_S4_($4))|0);\n $_0=$5;\n\n return (($_0)|0);\n}\n\n\nfunction __ZN4crnd12crn_unpacker4initEPKvj($this,$pData,$data_size){\n $this=($this)|0;\n $pData=($pData)|0;\n $data_size=($data_size)|0;\n var $1=0,$2=0,$3=0,$5=0,$6=0,$7=0,$9=0,$_0=0,label=0;\n\n $1=((__ZN4crnd15crnd_get_headerERNS_10crn_headerEPKvj(0,$pData,$data_size))|0);\n $2=(($this+88)|0);\n HEAP32[(($2)>>2)]=$1;\n $3=($1|0)==0;\n if ($3) {\n  $_0=0;\n\n  return (($_0)|0);\n }\n $5=(($this+4)|0);\n HEAP32[(($5)>>2)]=$pData;\n $6=(($this+8)|0);\n HEAP32[(($6)>>2)]=$data_size;\n $7=((__ZN4crnd12crn_unpacker11init_tablesEv($this))|0);\n if (!($7)) {\n  $_0=0;\n\n  return (($_0)|0);\n }\n $9=((__ZN4crnd12crn_unpacker15decode_palettesEv($this))|0);\n $_0=$9;\n\n return (($_0)|0);\n}\n\n\nfunction __ZN4crnd11crnd_deleteINS_12crn_unpackerEEEvPT_($p){\n $p=($p)|0;\n var $1=0,$3=0,label=0;\n\n $1=($p|0)==0;\n if ($1) {\n  return;\n }\n __ZN4crnd7helpers8destructINS_12crn_unpackerEEEvPT_($p);\n $3=$p;\n __ZN4crnd9crnd_freeEPv($3);\n return;\n}\n\n\nfunction __ZNK4crnd12crn_unpacker8is_validEv($this){\n $this=($this)|0;\n var $1=0,$2=0,$3=0,label=0;\n\n $1=(($this)|0);\n $2=((HEAP32[(($1)>>2)])|0);\n $3=($2|0)==519686845;\n return (($3)|0);\n}\n\n\nfunction __ZN4crnd17crnd_unpack_levelEPvPS0_jjj($pContext,$pDst,$dst_size_in_bytes,$row_pitch_in_bytes,$level_index){\n $pContext=($pContext)|0;\n $pDst=($pDst)|0;\n $dst_size_in_bytes=($dst_size_in_bytes)|0;\n $row_pitch_in_bytes=($row_pitch_in_bytes)|0;\n $level_index=($level_index)|0;\n var $1=0,$2=0,$or_cond=0,$3=0,$or_cond11=0,$4=0,$or_cond12=0,$6=0,$7=0,$9=0,$_0=0,label=0;\n\n $1=($pContext|0)==0;\n $2=($pDst|0)==0;\n $or_cond=$1|$2;\n $3=($dst_size_in_bytes>>>0)<((8)>>>0);\n $or_cond11=$or_cond|$3;\n $4=($level_index>>>0)>((15)>>>0);\n $or_cond12=$or_cond11|$4;\n if ($or_cond12) {\n  $_0=0;\n\n  return (($_0)|0);\n }\n $6=$pContext;\n $7=((__ZNK4crnd12crn_unpacker8is_validEv($6))|0);\n if (!($7)) {\n  $_0=0;\n\n  return (($_0)|0);\n }\n $9=((__ZN4crnd12crn_unpacker12unpack_levelEPPvjjj($6,$pDst,$dst_size_in_bytes,$row_pitch_in_bytes,$level_index))|0);\n $_0=$9;\n\n return (($_0)|0);\n}\n\n\nfunction __ZN4crnd12crn_unpacker12unpack_levelEPPvjjj($this,$pDst,$dst_size_in_bytes,$row_pitch_in_bytes,$level_index){\n $this=($this)|0;\n $pDst=($pDst)|0;\n $dst_size_in_bytes=($dst_size_in_bytes)|0;\n $row_pitch_in_bytes=($row_pitch_in_bytes)|0;\n $level_index=($level_index)|0;\n var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$12=0,$13=0,$next_level_ofs_0=0,$15=0,$18=0,$19=0,$20=0,$21=0,$22=0,label=0;\n\n $1=(($this+88)|0);\n $2=((HEAP32[(($1)>>2)])|0);\n $3=(($2+70+($level_index<<2))|0);\n $4=((__ZNK4crnd15crn_packed_uintILj4EEcvjEv($3))|0);\n $5=(($this+8)|0);\n $6=((HEAP32[(($5)>>2)])|0);\n $7=((($level_index)+(1))|0);\n $8=(($2+16)|0);\n $9=((__ZNK4crnd15crn_packed_uintILj1EEcvjEv($8))|0);\n $10=($7>>>0)<($9>>>0);\n if ($10) {\n  $12=(($2+70+($7<<2))|0);\n  $13=((__ZNK4crnd15crn_packed_uintILj4EEcvjEv($12))|0);\n  $next_level_ofs_0=$13;\n } else {\n  $next_level_ofs_0=$6;\n }\n\n $15=($next_level_ofs_0>>>0)>($4>>>0);\n if (!($15)) {\n  __ZN4crnd11crnd_assertEPKcS1_j(248,488,3690);\n }\n $18=(($this+4)|0);\n $19=((HEAP32[(($18)>>2)])|0);\n $20=(($19+$4)|0);\n $21=((($next_level_ofs_0)-($4))|0);\n $22=((__ZN4crnd12crn_unpacker12unpack_levelEPKvjPPvjjj($this,$20,$21,$pDst,$dst_size_in_bytes,$row_pitch_in_bytes,$level_index))|0);\n return (($22)|0);\n}\n\n\nfunction __ZN4crnd12crn_unpacker12unpack_levelEPKvjPPvjjj($this,$pSrc,$src_size_in_bytes,$pDst,$dst_size_in_bytes,$row_pitch_in_bytes,$level_index){\n $this=($this)|0;\n $pSrc=($pSrc)|0;\n $src_size_in_bytes=($src_size_in_bytes)|0;\n $pDst=($pDst)|0;\n $dst_size_in_bytes=($dst_size_in_bytes)|0;\n $row_pitch_in_bytes=($row_pitch_in_bytes)|0;\n $level_index=($level_index)|0;\n var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$19=0,$phitmp=0,$21=0;\n var $22=0,$23=0,$25=0,$26=0,$27=0,$or_cond=0,$_040=0,$29=0,$30=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$39=0,$40=0,$41=0,$43=0,$45=0;\n var $47=0,$49=0,$_0=0,label=0;\n\n $1=(($this+88)|0);\n $2=((HEAP32[(($1)>>2)])|0);\n $3=(($2+12)|0);\n $4=((__ZNK4crnd15crn_packed_uintILj2EEcvjEv($3))|0);\n $5=$4>>>($level_index>>>0);\n $6=((__ZN4crnd4math7maximumIjEET_S2_S2_($5,1))|0);\n $7=(($2+14)|0);\n $8=((__ZNK4crnd15crn_packed_uintILj2EEcvjEv($7))|0);\n $9=$8>>>($level_index>>>0);\n $10=((__ZN4crnd4math7maximumIjEET_S2_S2_($9,1))|0);\n $11=((($6)+(3))|0);\n $12=$11>>>2;\n $13=((($10)+(3))|0);\n $14=$13>>>2;\n $15=(($2+18)|0);\n $16=((__ZNK4crnd15crn_packed_uintILj1EEcvjEv($15))|0);\n $17=($16|0)==0;\n if ($17) {\n  $21=8;\n } else {\n  $19=($16|0)==9;\n  $phitmp=($19?8:16);\n  $21=$phitmp;\n }\n\n $22=(Math_imul($21,$12)|0);\n $23=($row_pitch_in_bytes|0)==0;\n do {\n  if ($23) {\n   $_040=$22;\n  } else {\n   $25=($22>>>0)<=($row_pitch_in_bytes>>>0);\n   $26=$row_pitch_in_bytes&3;\n   $27=($26|0)==0;\n   $or_cond=$25&$27;\n   if ($or_cond) {\n    $_040=$row_pitch_in_bytes;\n    break;\n   } else {\n    $_0=0;\n   }\n\n   return (($_0)|0);\n  }\n } while(0);\n\n $29=(Math_imul($_040,$14)|0);\n $30=($29>>>0)>($dst_size_in_bytes>>>0);\n if ($30) {\n  $_0=0;\n\n  return (($_0)|0);\n }\n $32=((($12)+(1))|0);\n $33=$32>>>1;\n $34=((($14)+(1))|0);\n $35=$34>>>1;\n $36=(($this+92)|0);\n $37=((__ZN4crnd12symbol_codec14start_decodingEPKhj($36,$pSrc,$src_size_in_bytes))|0);\n if (!($37)) {\n  $_0=0;\n\n  return (($_0)|0);\n }\n $39=((HEAP32[(($1)>>2)])|0);\n $40=(($39+18)|0);\n $41=((__ZNK4crnd15crn_packed_uintILj1EEcvjEv($40))|0);\n switch (($41|0)) {\n case 0: {\n  $43=((__ZN4crnd12crn_unpacker11unpack_dxt1EPPhjjjjjj($this,$pDst,0,$_040,$12,$14,$33,$35))|0);\n  $_0=1;\n\n  return (($_0)|0);\n  break;\n }\n case 2:case 3:case 5:case 6:case 4: {\n  $45=((__ZN4crnd12crn_unpacker11unpack_dxt5EPPhjjjjjj($this,$pDst,0,$_040,$12,$14,$33,$35))|0);\n  $_0=1;\n\n  return (($_0)|0);\n  break;\n }\n case 9: {\n  $47=((__ZN4crnd12crn_unpacker12unpack_dxt5aEPPhjjjjjj($this,$pDst,0,$_040,$12,$14,$33,$35))|0);\n  $_0=1;\n\n  return (($_0)|0);\n  break;\n }\n case 7:case 8: {\n  $49=((__ZN4crnd12crn_unpacker10unpack_dxnEPPhjjjjjj($this,$pDst,0,$_040,$12,$14,$33,$35))|0);\n  $_0=1;\n\n  return (($_0)|0);\n  break;\n }\n default: {\n  $_0=0;\n\n  return (($_0)|0);\n }\n }\n  return 0;\n}\n\n\nfunction __ZN4crnd15crnd_unpack_endEPv($pContext){\n $pContext=($pContext)|0;\n var $1=0,$3=0,$4=0,$_0=0,label=0;\n\n $1=($pContext|0)==0;\n do {\n  if ($1) {\n   $_0=0;\n  } else {\n   $3=$pContext;\n   $4=((__ZNK4crnd12crn_unpacker8is_validEv($3))|0);\n   if (!($4)) {\n    $_0=0;\n    break;\n   }\n   __ZN4crnd11crnd_deleteINS_12crn_unpackerEEEvPT_($3);\n   $_0=1;\n  }\n } while(0);\n\n return (($_0)|0);\n}\n\n\nfunction _crn_get_width($pSrc_file_data,$src_file_size){\n $pSrc_file_data=($pSrc_file_data)|0;\n $src_file_size=($src_file_size)|0;\n var $tex_info=0,$1=0,$3=0,$4=0,$_0=0,label=0;\n var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+40)|0;\n $tex_info=((sp)|0);\n __ZN4crnd16crn_texture_infoC1Ev($tex_info);\n $1=((__ZN4crnd21crnd_get_texture_infoEPKvjPNS_16crn_texture_infoE($pSrc_file_data,$src_file_size,$tex_info))|0);\n if (!($1)) {\n  $_0=-1;\n\n  STACKTOP=sp;return (($_0)|0);\n }\n $3=(($tex_info+4)|0);\n $4=((HEAP32[(($3)>>2)])|0);\n $_0=$4;\n\n STACKTOP=sp;return (($_0)|0);\n}\n\n\nfunction __ZN4crnd16crn_texture_infoC1Ev($this){\n $this=($this)|0;\n var label=0;\n\n __ZN4crnd16crn_texture_infoC2Ev($this);\n return;\n}\n\n\nfunction _crn_get_height($pSrc_file_data,$src_file_size){\n $pSrc_file_data=($pSrc_file_data)|0;\n $src_file_size=($src_file_size)|0;\n var $tex_info=0,$1=0,$3=0,$4=0,$_0=0,label=0;\n var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+40)|0;\n $tex_info=((sp)|0);\n __ZN4crnd16crn_texture_infoC1Ev($tex_info);\n $1=((__ZN4crnd21crnd_get_texture_infoEPKvjPNS_16crn_texture_infoE($pSrc_file_data,$src_file_size,$tex_info))|0);\n if (!($1)) {\n  $_0=-1;\n\n  STACKTOP=sp;return (($_0)|0);\n }\n $3=(($tex_info+8)|0);\n $4=((HEAP32[(($3)>>2)])|0);\n $_0=$4;\n\n STACKTOP=sp;return (($_0)|0);\n}\n\n\nfunction _crn_get_levels($pSrc_file_data,$src_file_size){\n $pSrc_file_data=($pSrc_file_data)|0;\n $src_file_size=($src_file_size)|0;\n var $tex_info=0,$1=0,$3=0,$4=0,$_0=0,label=0;\n var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+40)|0;\n $tex_info=((sp)|0);\n __ZN4crnd16crn_texture_infoC1Ev($tex_info);\n $1=((__ZN4crnd21crnd_get_texture_infoEPKvjPNS_16crn_texture_infoE($pSrc_file_data,$src_file_size,$tex_info))|0);\n if (!($1)) {\n  $_0=-1;\n\n  STACKTOP=sp;return (($_0)|0);\n }\n $3=(($tex_info+12)|0);\n $4=((HEAP32[(($3)>>2)])|0);\n $_0=$4;\n\n STACKTOP=sp;return (($_0)|0);\n}\n\n\nfunction _crn_get_format($pSrc_file_data,$src_file_size){\n $pSrc_file_data=($pSrc_file_data)|0;\n $src_file_size=($src_file_size)|0;\n var $tex_info=0,$1=0,$3=0,$ld$0$0=0,$4$0=0,$ld$1$1=0,$4$1=0,$5$0=0,$5=0,$_0=0,label=0;\n var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+40)|0;\n $tex_info=((sp)|0);\n __ZN4crnd16crn_texture_infoC1Ev($tex_info);\n $1=((__ZN4crnd21crnd_get_texture_infoEPKvjPNS_16crn_texture_infoE($pSrc_file_data,$src_file_size,$tex_info))|0);\n if (!($1)) {\n  $_0=-1;\n\n  STACKTOP=sp;return (($_0)|0);\n }\n $3=(($tex_info+32)|0);\n $ld$0$0=(($3)|0);\n $4$0=((HEAP32[(($ld$0$0)>>2)])|0);\n $ld$1$1=(($3+4)|0);\n $4$1=((HEAP32[(($ld$1$1)>>2)])|0);\n $5$0=$4$0;\n $5=$5$0;\n $_0=$5;\n\n STACKTOP=sp;return (($_0)|0);\n}\n\n\nfunction _crn_get_faces($pSrc_file_data,$src_file_size){\n $pSrc_file_data=($pSrc_file_data)|0;\n $src_file_size=($src_file_size)|0;\n var $tex_info=0,$1=0,$3=0,$4=0,$_0=0,label=0;\n var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+40)|0;\n $tex_info=((sp)|0);\n __ZN4crnd16crn_texture_infoC1Ev($tex_info);\n $1=((__ZN4crnd21crnd_get_texture_infoEPKvjPNS_16crn_texture_infoE($pSrc_file_data,$src_file_size,$tex_info))|0);\n if (!($1)) {\n  $_0=-1;\n\n  STACKTOP=sp;return (($_0)|0);\n }\n $3=(($tex_info+16)|0);\n $4=((HEAP32[(($3)>>2)])|0);\n $_0=$4;\n\n STACKTOP=sp;return (($_0)|0);\n}\n\n\nfunction _crn_unpack_begin($pSrc_file_data,$src_file_size){\n $pSrc_file_data=($pSrc_file_data)|0;\n $src_file_size=($src_file_size)|0;\n var $1=0,label=0;\n\n $1=((__ZN4crnd17crnd_unpack_beginEPKvj($pSrc_file_data,$src_file_size))|0);\n return (($1)|0);\n}\n\n\nfunction _crn_unpack_end($context){\n $context=($context)|0;\n var $1=0,label=0;\n\n $1=((__ZN4crnd15crnd_unpack_endEPv($context))|0);\n return;\n}\n\n\nfunction _crn_unpack_level($pContext,$pSrc_file_data,$src_file_size,$level_index){\n $pContext=($pContext)|0;\n $pSrc_file_data=($pSrc_file_data)|0;\n $src_file_size=($src_file_size)|0;\n $level_index=($level_index)|0;\n var $tex_info=0,$pDecomp_images=0,$1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$_op=0,$_op_op=0,$10=0,$11=0,$12=0,$_op23=0,$_op23_op=0,$13=0,$14=0;\n var $15=0,$16=0,$ld$0$0=0,$17$0=0,$ld$1$1=0,$17$1=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$face_index_024=0,$30=0,$31=0;\n var $32=0,$33=0,$34=0,$35=0,$36=0,$_0=0,label=0;\n var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+64)|0;\n $tex_info=((sp)|0);\n $pDecomp_images=(((sp)+(40))|0);\n __ZN4crnd16crn_texture_infoC1Ev($tex_info);\n $1=((__ZN4crnd21crnd_get_texture_infoEPKvjPNS_16crn_texture_infoE($pSrc_file_data,$src_file_size,$tex_info))|0);\n $2=(($tex_info+4)|0);\n $3=((HEAP32[(($2)>>2)])|0);\n $4=$3>>>($level_index>>>0);\n $5=($4|0)!=0;\n $6=(($tex_info+8)|0);\n $7=((HEAP32[(($6)>>2)])|0);\n $8=$7>>>($level_index>>>0);\n $9=($8|0)!=0;\n $_op=((($4)+(3))|0);\n $_op_op=$_op>>>2;\n $10=($5?$_op_op:1);\n $11=($10|0)!=0;\n $12=($11?$10:1);\n $_op23=((($8)+(3))|0);\n $_op23_op=$_op23>>>2;\n $13=($9?$_op23_op:1);\n $14=($13|0)!=0;\n $15=($14?$13:1);\n $16=(($tex_info+32)|0);\n $ld$0$0=(($16)|0);\n $17$0=((HEAP32[(($ld$0$0)>>2)])|0);\n $ld$1$1=(($16+4)|0);\n $17$1=((HEAP32[(($ld$1$1)>>2)])|0);\n $18=((__ZN4crnd28crnd_get_bytes_per_dxt_blockE10crn_format($17$0,$17$1))|0);\n $19=(Math_imul($12,$18)|0);\n $20=(Math_imul($19,$15)|0);\n $21=(($tex_info+16)|0);\n $22=((HEAP32[(($21)>>2)])|0);\n $23=(Math_imul($20,$22)|0);\n $24=((_malloc($23))|0);\n $25=($24|0)==0;\n if ($25) {\n  $_0=0;\n\n  STACKTOP=sp;return (($_0)|0);\n }\n $26=((HEAP32[(($21)>>2)])|0);\n $27=($26|0)==0;\n if (!($27)) {\n  $28=((HEAP32[(($21)>>2)])|0);\n  $face_index_024=0;\n  while(1) {\n\n   $30=(Math_imul($face_index_024,$20)|0);\n   $31=(($24+$30)|0);\n   $32=(($pDecomp_images+($face_index_024<<2))|0);\n   HEAP32[(($32)>>2)]=$31;\n   $33=((($face_index_024)+(1))|0);\n   $34=($33>>>0)<($28>>>0);\n   if ($34) {\n    $face_index_024=$33;\n   } else {\n    break;\n   }\n  }\n }\n $35=(($pDecomp_images)|0);\n $36=((__ZN4crnd17crnd_unpack_levelEPvPS0_jjj($pContext,$35,$20,$19,$level_index))|0);\n if ($36) {\n  $_0=$24;\n\n  STACKTOP=sp;return (($_0)|0);\n }\n _free($24);\n $_0=0;\n\n STACKTOP=sp;return (($_0)|0);\n}\n\n\nfunction __ZN4crnd7helpers8destructINS_12crn_unpackerEEEvPT_($p){\n $p=($p)|0;\n var label=0;\n\n __ZN4crnd12crn_unpackerD1Ev($p);\n return;\n}\n\n\nfunction __ZN4crnd12crn_unpackerD1Ev($this){\n $this=($this)|0;\n var label=0;\n\n __ZN4crnd12crn_unpackerD2Ev($this);\n return;\n}\n\n\nfunction __ZN4crnd12crn_unpackerD2Ev($this){\n $this=($this)|0;\n var $1=0,$2=0,$4=0,$6=0,$8=0,$10=0,$11=0,$13=0,$15=0,$16=0,$18=0,$21=0,$22=0,$23=0,$26=0,$27=0,$30=0,$31=0,$_03=0,$_0=0;\n var $33=0,$36=0,$37=0,$_14=0,$_1=0,$39=0,$_lcssa25=0,$42=0,$43=0,$44=0,$45=0,$46=0,$48=0,$_25=0,$_2=0,$50=0,$52=0,$_lcssa=0,$55=0,$56=0;\n var $57=0,$58=0,$59=0,$61=0,$_36=0,$_3=0,$62=0,$64=0,$_47=0,$_4=0,$65=0,$67$0=0,$67$1=0,$68$0=0,$68$1=0,$70=0,$20$0=0,$20$1=0,$25$0=0,$25$1=0;\n var $29$0=0,$29$1=0,$35$0=0,$35$1=0,$41$0=0,$41$1=0,$54$0=0,$54$1=0,$lpad_loopexit$0=0,$lpad_loopexit$1=0,$lpad_loopexit10$0=0,$lpad_loopexit10$1=0,$lpad_loopexit15$0=0,$lpad_loopexit15$1=0,$lpad_loopexit20$0=0,$lpad_loopexit20$1=0,$lpad_nonloopexit21$0=0,$lpad_nonloopexit21$1=0,label=0;\n\n $1=(($this)|0);\n HEAP32[(($1)>>2)]=0;\n $2=(($this+284)|0);\n __ZN4crnd6vectorItED1Ev($2);\n $4=(($this+268)|0);\n __ZN4crnd6vectorItED1Ev($4);\n $6=(($this+252)|0);\n __ZN4crnd6vectorIjED1Ev($6);\n $8=(($this+236)|0);\n __ZN4crnd6vectorIjED1Ev($8);\n $10=(($this+188)|0);\n $11=(($this+212)|0);\n __ZN4crnd25static_huffman_data_modelD2Ev($11);\n $13=(($this+188)|0);\n __ZN4crnd25static_huffman_data_modelD2Ev($13);\n $15=(($this+140)|0);\n $16=(($this+164)|0);\n __ZN4crnd25static_huffman_data_modelD2Ev($16);\n $18=(($this+140)|0);\n __ZN4crnd25static_huffman_data_modelD2Ev($18);\n $70=(($this+116)|0);\n __ZN4crnd25static_huffman_data_modelD2Ev($70);\n return;\n}\n\n\nfunction __ZN4crnd6vectorItED1Ev($this){\n $this=($this)|0;\n var label=0;\n\n __ZN4crnd6vectorItED2Ev($this);\n return;\n}\n\n\nfunction __ZN4crnd6vectorIjED1Ev($this){\n $this=($this)|0;\n var label=0;\n\n __ZN4crnd6vectorIjED2Ev($this);\n return;\n}\n\n\nfunction __ZN4crnd6vectorIjED2Ev($this){\n $this=($this)|0;\n var label=0;\n\n __ZN4crnd6vectorIjE5clearEv($this);\n return;\n}\n\n\nfunction __ZN4crnd6vectorIjE5clearEv($this){\n $this=($this)|0;\n var $1=0,$2=0,$3=0,$5=0,$6=0,$7=0,$9=0,label=0;\n\n $1=(($this)|0);\n $2=((HEAP32[(($1)>>2)])|0);\n $3=($2|0)==0;\n if ($3) {\n  $9=(($this+12)|0);\n  HEAP8[($9)]=0;\n  return;\n }\n $5=(($this+4)|0);\n $6=$2;\n __ZN4crnd9crnd_freeEPv($6);\n HEAP32[(($1)>>2)]=0;\n HEAP32[(($5)>>2)]=0;\n $7=(($this+8)|0);\n HEAP32[(($7)>>2)]=0;\n $9=(($this+12)|0);\n HEAP8[($9)]=0;\n return;\n}\n\n\nfunction __ZN4crnd6vectorItED2Ev($this){\n $this=($this)|0;\n var label=0;\n\n __ZN4crnd6vectorItE5clearEv($this);\n return;\n}\n\n\nfunction __ZN4crnd6vectorItE5clearEv($this){\n $this=($this)|0;\n var $1=0,$2=0,$3=0,$5=0,$6=0,$7=0,$9=0,label=0;\n\n $1=(($this)|0);\n $2=((HEAP32[(($1)>>2)])|0);\n $3=($2|0)==0;\n if ($3) {\n  $9=(($this+12)|0);\n  HEAP8[($9)]=0;\n  return;\n }\n $5=(($this+4)|0);\n $6=$2;\n __ZN4crnd9crnd_freeEPv($6);\n HEAP32[(($1)>>2)]=0;\n HEAP32[(($5)>>2)]=0;\n $7=(($this+8)|0);\n HEAP32[(($7)>>2)]=0;\n $9=(($this+12)|0);\n HEAP8[($9)]=0;\n return;\n}\n\n\nfunction __ZN4crnd7helpers9constructINS_12crn_unpackerEEEPT_S4_($p){\n $p=($p)|0;\n var $1=0,$4=0,label=0;\n\n $1=($p|0)==0;\n if ($1) {\n  $4=0;\n } else {\n  __ZN4crnd12crn_unpackerC1Ev($p);\n  $4=$p;\n }\n\n return (($4)|0);\n}\n\n\nfunction __ZN4crnd12crn_unpackerC1Ev($this){\n $this=($this)|0;\n var label=0;\n\n __ZN4crnd12crn_unpackerC2Ev($this);\n return;\n}\n\n\nfunction __ZN4crnd12crn_unpackerC2Ev($this){\n $this=($this)|0;\n var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,label=0;\n\n $1=(($this)|0);\n HEAP32[(($1)>>2)]=519686845;\n $2=(($this+4)|0);\n HEAP32[(($2)>>2)]=0;\n $3=(($this+8)|0);\n HEAP32[(($3)>>2)]=0;\n $4=(($this+88)|0);\n HEAP32[(($4)>>2)]=0;\n $5=(($this+92)|0);\n __ZN4crnd12symbol_codecC2Ev($5);\n $6=(($this+116)|0);\n __ZN4crnd25static_huffman_data_modelC2Ev($6);\n $7=(($this+140)|0);\n __ZN4crnd25static_huffman_data_modelC2Ev($7);\n $8=(($this+164)|0);\n __ZN4crnd25static_huffman_data_modelC2Ev($8);\n $9=(($this+188)|0);\n __ZN4crnd25static_huffman_data_modelC2Ev($9);\n $10=(($this+212)|0);\n __ZN4crnd25static_huffman_data_modelC2Ev($10);\n $11=(($this+236)|0);\n __ZN4crnd6vectorIjEC1Ev($11);\n $12=(($this+252)|0);\n __ZN4crnd6vectorIjEC1Ev($12);\n $13=(($this+268)|0);\n __ZN4crnd6vectorItEC1Ev($13);\n $14=(($this+284)|0);\n __ZN4crnd6vectorItEC1Ev($14);\n return;\n}\n\n\nfunction __ZN4crnd6vectorIjEC1Ev($this){\n $this=($this)|0;\n var label=0;\n\n __ZN4crnd6vectorIjEC2Ev($this);\n return;\n}\n\n\nfunction __ZN4crnd6vectorItEC1Ev($this){\n $this=($this)|0;\n var label=0;\n\n __ZN4crnd6vectorItEC2Ev($this);\n return;\n}\n\n\nfunction __ZN4crnd6vectorItEC2Ev($this){\n $this=($this)|0;\n var $1=0,label=0;\n\n $1=$this;\n _memset((((($1)|0))|0), ((((0)|0))|0), ((((13)|0))|0))|0;\n return;\n}\n\n\nfunction __ZN4crnd6vectorIjEC2Ev($this){\n $this=($this)|0;\n var $1=0,label=0;\n\n $1=$this;\n _memset((((($1)|0))|0), ((((0)|0))|0), ((((13)|0))|0))|0;\n return;\n}\n\n\nfunction __ZN4crnd7helpers9constructINS_13prefix_coding14decoder_tablesEEEPT_S5_($p){\n $p=($p)|0;\n var $1=0,$4=0,label=0;\n\n $1=($p|0)==0;\n if ($1) {\n  $4=0;\n } else {\n  __ZN4crnd13prefix_coding14decoder_tablesC1Ev($p);\n  $4=$p;\n }\n\n return (($4)|0);\n}\n\n\nfunction __ZN4crnd13prefix_coding14decoder_tablesC1Ev($this){\n $this=($this)|0;\n var label=0;\n\n __ZN4crnd13prefix_coding14decoder_tablesC2Ev($this);\n return;\n}\n\n\nfunction __ZN4crnd13prefix_coding14decoder_tablesC2Ev($this){\n $this=($this)|0;\n var $1=0,$2=0,label=0;\n\n $1=(($this+164)|0);\n $2=$1;\n _memset((((($2)|0))|0), ((((0)|0))|0), ((((16)|0))|0))|0;\n return;\n}\n\n\nfunction __ZN4crnd6vectorIhE17increase_capacityEjb($this,$min_new_capacity,$grow_hint){\n $this=($this)|0;\n $min_new_capacity=($min_new_capacity)|0;\n $grow_hint=($grow_hint)|0;\n var $1=0,$2=0,$4=0,$_0=0,label=0;\n\n $1=$this;\n $2=((__ZN4crnd16elemental_vector17increase_capacityEjbjPFvPvS1_jE($1,$min_new_capacity,$grow_hint,1,0))|0);\n if ($2) {\n  $_0=1;\n\n  return (($_0)|0);\n }\n $4=(($this+12)|0);\n HEAP8[($4)]=1;\n $_0=0;\n\n return (($_0)|0);\n}\n\n\nfunction __ZN4crnd11scalar_typeIhE15construct_arrayEPhj($p,$n){\n $p=($p)|0;\n $n=($n)|0;\n var label=0;\n\n _memset((((($p)|0))|0), ((((0)|0))|0), (((($n)|0))|0))|0;\n return;\n}\n\n\nfunction __ZN4crnd7helpers8destructINS_13prefix_coding14decoder_tablesEEEvPT_($p){\n $p=($p)|0;\n var label=0;\n\n __ZN4crnd13prefix_coding14decoder_tablesD1Ev($p);\n return;\n}\n\n\nfunction __ZN4crnd13prefix_coding14decoder_tablesD1Ev($this){\n $this=($this)|0;\n var label=0;\n\n __ZN4crnd13prefix_coding14decoder_tablesD2Ev($this);\n return;\n}\n\n\nfunction __ZN4crnd13prefix_coding14decoder_tablesD2Ev($this){\n $this=($this)|0;\n var $1=0,$2=0,$3=0,$6=0,$7=0,$8=0,label=0;\n\n $1=(($this+168)|0);\n $2=((HEAP32[(($1)>>2)])|0);\n $3=($2|0)==0;\n if (!($3)) {\n  __ZN4crnd17crnd_delete_arrayIjEEvPT_($2);\n }\n $6=(($this+176)|0);\n $7=((HEAP32[(($6)>>2)])|0);\n $8=($7|0)==0;\n if ($8) {\n  return;\n }\n __ZN4crnd17crnd_delete_arrayItEEvPT_($7);\n return;\n}\n\n\nfunction __ZN4crnd6vectorIhED2Ev($this){\n $this=($this)|0;\n var label=0;\n\n __ZN4crnd6vectorIhE5clearEv($this);\n return;\n}\n\n\nfunction __ZN4crnd6vectorIhEC2Ev($this){\n $this=($this)|0;\n var $1=0,label=0;\n\n $1=$this;\n _memset((((($1)|0))|0), ((((0)|0))|0), ((((13)|0))|0))|0;\n return;\n}\n\n\nfunction __ZN4crnd16crn_texture_infoC2Ev($this){\n $this=($this)|0;\n var $1=0,label=0;\n\n $1=(($this)|0);\n HEAP32[(($1)>>2)]=40;\n return;\n}\n\n\nfunction __ZN4crnd12crn_unpacker11unpack_dxt1EPPhjjjjjj($this,$pDst,$dst_size_in_bytes,$row_pitch_in_bytes,$blocks_x,$blocks_y,$chunks_x,$chunks_y){\n $this=($this)|0;\n $pDst=($pDst)|0;\n $dst_size_in_bytes=($dst_size_in_bytes)|0;\n $row_pitch_in_bytes=($row_pitch_in_bytes)|0;\n $blocks_x=($blocks_x)|0;\n $blocks_y=($blocks_y)|0;\n $chunks_x=($chunks_x)|0;\n $chunks_y=($chunks_y)|0;\n var $prev_color_endpoint_index=0,$prev_color_selector_index=0,$color_endpoints=0,$1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0;\n var $18=0,$19=0,$20=0,$21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$chunk_encoding_bits_080=0,$f_079=0,$32=0,$33=0,$chunk_encoding_bits_174=0,$pRow_073=0,$y_072=0;\n var $35=0,$36=0,$38=0,$pBlock_0=0,$block_delta_0=0,$dir_x_0=0,$end_x_0=0,$start_x_0=0,$40=0,$_=0,$41=0,$chunk_encoding_bits_268=0,$pBlock_167=0,$x_066=0,$42=0,$44=0,$45=0,$chunk_encoding_bits_3=0,$46=0,$47=0;\n var $48=0,$49=0,$50=0,$i_062=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0,$58=0,$59=0,$60=0,$61=0,$not_=0,$_86=0,$62=0,$brmerge=0,$64=0,$65=0;\n var $66=0,$67=0,$68=0,$69=0,$70=0,$71=0,$72=0,$73=0,$74=0,$75=0,$76=0,$77=0,$78=0,$79=0,$80=0,$81=0,$82=0,$83=0,$84=0,$85=0;\n var $86=0,$87=0,$88=0,$89=0,$90=0,$91=0,$92=0,$93=0,$94=0,$95=0,$96=0,$97=0,$98=0,$99=0,$100=0,$101=0,$102=0,$103=0,$104=0,$105=0;\n var $106=0,$107=0,$108=0,$109=0,$110=0,$111=0,$112=0,$113=0,$114=0,$115=0,$116=0,$117=0,$119=0,$120=0,$121=0,$122=0,$123=0,$124=0,$125=0,$126=0;\n var $127=0,$128=0,$129=0,$130=0,$131=0,$132=0,$133=0,$134=0,$135=0,$136=0,$137=0,$138=0,$chunk_encoding_bits_2_lcssa=0,$139=0,$140=0,$141=0,$chunk_encoding_bits_1_lcssa=0,$142=0,$143=0,$145=0;\n var $146=0,$147=0,$148=0,$149=0,$150=0,$151=0,$152=0,$153=0,$154=0,$155=0,$156=0,$158=0,$159=0,$160=0,$162=0,$163=0,$164=0,$165=0,$166=0,$167=0;\n var $168=0,$169=0,$170=0,$171=0,$_sum85=0,$172=0,$173=0,$175=0,$176=0,$177=0,$brmerge87=0,$_sum=0,$179=0,$180=0,$181=0,$182=0,$183=0,$184=0,$185=0,$186=0;\n var $187=0,$188=0,$_sum84=0,$189=0,$190=0,label=0;\n var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+32)|0;\n $prev_color_endpoint_index=((sp)|0);\n $prev_color_selector_index=(((sp)+(8))|0);\n $color_endpoints=(((sp)+(16))|0);\n $1=(($this+236)|0);\n $2=((__ZNK4crnd6vectorIjE4sizeEv($1))|0);\n $3=(($this+252)|0);\n $4=((__ZNK4crnd6vectorIjE4sizeEv($3))|0);\n HEAP32[(($prev_color_endpoint_index)>>2)]=0;\n HEAP32[(($prev_color_selector_index)>>2)]=0;\n $5=(($this+88)|0);\n $6=((HEAP32[(($5)>>2)])|0);\n $7=(($6+17)|0);\n $8=((__ZNK4crnd15crn_packed_uintILj1EEcvjEv($7))|0);\n $9=$row_pitch_in_bytes>>>2;\n $10=($8|0)==0;\n if ($10) {\n  STACKTOP=sp;return ((1)|0);\n }\n $11=($chunks_y|0)==0;\n $12=((($chunks_y)-(1))|0);\n $13=$blocks_y&1;\n $14=($13|0)!=0;\n $15=$row_pitch_in_bytes<<1;\n $16=(($this+92)|0);\n $17=(($this+116)|0);\n $18=$blocks_x&1;\n $19=(($this+92)|0);\n $20=(($this+188)|0);\n $21=((($9)+(1))|0);\n $22=((($9)+(2))|0);\n $23=((($9)+(3))|0);\n $24=(($this+92)|0);\n $25=(($this+188)|0);\n $26=((($chunks_x)-(1))|0);\n $27=(($this+92)|0);\n $28=(($this+140)|0);\n $29=((($chunks_x)-(1))|0);\n $30=$29<<4;\n $f_079=0;$chunk_encoding_bits_080=1;\n while(1) {\n\n\n  if ($11) {\n   $chunk_encoding_bits_1_lcssa=$chunk_encoding_bits_080;\n  } else {\n   $32=(($pDst+($f_079<<2))|0);\n   $33=((HEAP32[(($32)>>2)])|0);\n   $y_072=0;$pRow_073=$33;$chunk_encoding_bits_174=$chunk_encoding_bits_080;\n   while(1) {\n\n\n\n    $35=$y_072&1;\n    $36=($35|0)==0;\n    if ($36) {\n     $start_x_0=0;$end_x_0=$chunks_x;$dir_x_0=1;$block_delta_0=16;$pBlock_0=$pRow_073;\n    } else {\n     $38=(($pRow_073+$30)|0);\n     $start_x_0=$29;$end_x_0=-1;$dir_x_0=-1;$block_delta_0=-16;$pBlock_0=$38;\n    }\n\n\n\n\n\n    $40=($y_072|0)==($12|0);\n    $_=$40&$14;\n    $41=($start_x_0|0)==($end_x_0|0);\n    if ($41) {\n     $chunk_encoding_bits_2_lcssa=$chunk_encoding_bits_174;\n    } else {\n     $x_066=$start_x_0;$pBlock_167=$pBlock_0;$chunk_encoding_bits_268=$chunk_encoding_bits_174;\n     while(1) {\n\n\n\n      $42=($chunk_encoding_bits_268|0)==1;\n      if ($42) {\n       $44=((__ZN4crnd12symbol_codec6decodeERKNS_25static_huffman_data_modelE($16,$17))|0);\n       $45=$44|512;\n       $chunk_encoding_bits_3=$45;\n      } else {\n       $chunk_encoding_bits_3=$chunk_encoding_bits_268;\n      }\n\n      $46=$chunk_encoding_bits_3&7;\n      $47=$chunk_encoding_bits_3>>>3;\n      $48=((888+$46)|0);\n      $49=((HEAP8[($48)])|0);\n      $50=($49&255);\n      $i_062=0;\n      while(1) {\n\n       $52=((__ZN4crnd12symbol_codec6decodeERKNS_25static_huffman_data_modelE($27,$28))|0);\n       $53=((HEAP32[(($prev_color_endpoint_index)>>2)])|0);\n       $54=((($53)+($52))|0);\n       HEAP32[(($prev_color_endpoint_index)>>2)]=$54;\n       __ZN4crnd12crn_unpacker5limitERjj($prev_color_endpoint_index,$2);\n       $55=((HEAP32[(($prev_color_endpoint_index)>>2)])|0);\n       $56=((__ZN4crnd6vectorIjEixEj($1,$55))|0);\n       $57=((HEAP32[(($56)>>2)])|0);\n       $58=(($color_endpoints+($i_062<<2))|0);\n       HEAP32[(($58)>>2)]=$57;\n       $59=((($i_062)+(1))|0);\n       $60=($59>>>0)<($50>>>0);\n       if ($60) {\n        $i_062=$59;\n       } else {\n        break;\n       }\n      }\n      $61=($x_066|0)==($26|0);\n      $not_=($18|0)!=0;\n      $_86=$61&$not_;\n      $62=$pBlock_167;\n      $brmerge=$_|$_86;\n      do {\n       if ($brmerge) {\n        $119=$pBlock_167;\n        $120=((__ZN4crnd12symbol_codec6decodeERKNS_25static_huffman_data_modelE($24,$25))|0);\n        $121=((HEAP32[(($prev_color_selector_index)>>2)])|0);\n        $122=((($121)+($120))|0);\n        HEAP32[(($prev_color_selector_index)>>2)]=$122;\n        __ZN4crnd12crn_unpacker5limitERjj($prev_color_selector_index,$4);\n        $123=((896+($46<<2))|0);\n        $124=((HEAP8[($123)])|0);\n        $125=($124&255);\n        $126=(($color_endpoints+($125<<2))|0);\n        $127=((HEAP32[(($126)>>2)])|0);\n        HEAP32[(($119)>>2)]=$127;\n        $128=((HEAP32[(($prev_color_selector_index)>>2)])|0);\n        $129=((__ZN4crnd6vectorIjEixEj($3,$128))|0);\n        $130=((HEAP32[(($129)>>2)])|0);\n        $131=(($pBlock_167+4)|0);\n        $132=$131;\n        HEAP32[(($132)>>2)]=$130;\n        $133=((__ZN4crnd12symbol_codec6decodeERKNS_25static_huffman_data_modelE($24,$25))|0);\n        $134=((HEAP32[(($prev_color_selector_index)>>2)])|0);\n        $135=((($134)+($133))|0);\n        HEAP32[(($prev_color_selector_index)>>2)]=$135;\n        __ZN4crnd12crn_unpacker5limitERjj($prev_color_selector_index,$4);\n        if (!($_86)) {\n         $145=(($pBlock_167+8)|0);\n         $146=$145;\n         $147=((896+($46<<2)+1)|0);\n         $148=((HEAP8[($147)])|0);\n         $149=($148&255);\n         $150=(($color_endpoints+($149<<2))|0);\n         $151=((HEAP32[(($150)>>2)])|0);\n         HEAP32[(($146)>>2)]=$151;\n         $152=((HEAP32[(($prev_color_selector_index)>>2)])|0);\n         $153=((__ZN4crnd6vectorIjEixEj($3,$152))|0);\n         $154=((HEAP32[(($153)>>2)])|0);\n         $155=(($pBlock_167+12)|0);\n         $156=$155;\n         HEAP32[(($156)>>2)]=$154;\n        }\n        $158=((__ZN4crnd12symbol_codec6decodeERKNS_25static_huffman_data_modelE($24,$25))|0);\n        $159=((HEAP32[(($prev_color_selector_index)>>2)])|0);\n        $160=((($159)+($158))|0);\n        HEAP32[(($prev_color_selector_index)>>2)]=$160;\n        __ZN4crnd12crn_unpacker5limitERjj($prev_color_selector_index,$4);\n        if (!($_)) {\n         $162=(($pBlock_167+$row_pitch_in_bytes)|0);\n         $163=$162;\n         $164=((896+($46<<2)+2)|0);\n         $165=((HEAP8[($164)])|0);\n         $166=($165&255);\n         $167=(($color_endpoints+($166<<2))|0);\n         $168=((HEAP32[(($167)>>2)])|0);\n         HEAP32[(($163)>>2)]=$168;\n         $169=((HEAP32[(($prev_color_selector_index)>>2)])|0);\n         $170=((__ZN4crnd6vectorIjEixEj($3,$169))|0);\n         $171=((HEAP32[(($170)>>2)])|0);\n         $_sum85=((($row_pitch_in_bytes)+(4))|0);\n         $172=(($pBlock_167+$_sum85)|0);\n         $173=$172;\n         HEAP32[(($173)>>2)]=$171;\n        }\n        $175=((__ZN4crnd12symbol_codec6decodeERKNS_25static_huffman_data_modelE($24,$25))|0);\n        $176=((HEAP32[(($prev_color_selector_index)>>2)])|0);\n        $177=((($176)+($175))|0);\n        HEAP32[(($prev_color_selector_index)>>2)]=$177;\n        __ZN4crnd12crn_unpacker5limitERjj($prev_color_selector_index,$4);\n        $brmerge87=$_86|$_;\n        if ($brmerge87) {\n         break;\n        }\n        $_sum=((($row_pitch_in_bytes)+(8))|0);\n        $179=(($pBlock_167+$_sum)|0);\n        $180=$179;\n        $181=((896+($46<<2)+3)|0);\n        $182=((HEAP8[($181)])|0);\n        $183=($182&255);\n        $184=(($color_endpoints+($183<<2))|0);\n        $185=((HEAP32[(($184)>>2)])|0);\n        HEAP32[(($180)>>2)]=$185;\n        $186=((HEAP32[(($prev_color_selector_index)>>2)])|0);\n        $187=((__ZN4crnd6vectorIjEixEj($3,$186))|0);\n        $188=((HEAP32[(($187)>>2)])|0);\n        $_sum84=((($row_pitch_in_bytes)+(12))|0);\n        $189=(($pBlock_167+$_sum84)|0);\n        $190=$189;\n        HEAP32[(($190)>>2)]=$188;\n       } else {\n        $64=((896+($46<<2))|0);\n        $65=((HEAP8[($64)])|0);\n        $66=($65&255);\n        $67=(($color_endpoints+($66<<2))|0);\n        $68=((HEAP32[(($67)>>2)])|0);\n        HEAP32[(($62)>>2)]=$68;\n        $69=((__ZN4crnd12symbol_codec6decodeERKNS_25static_huffman_data_modelE($19,$20))|0);\n        $70=((HEAP32[(($prev_color_selector_index)>>2)])|0);\n        $71=((($70)+($69))|0);\n        HEAP32[(($prev_color_selector_index)>>2)]=$71;\n        __ZN4crnd12crn_unpacker5limitERjj($prev_color_selector_index,$4);\n        $72=((HEAP32[(($prev_color_selector_index)>>2)])|0);\n        $73=((__ZN4crnd6vectorIjEixEj($3,$72))|0);\n        $74=((HEAP32[(($73)>>2)])|0);\n        $75=(($pBlock_167+4)|0);\n        $76=$75;\n        HEAP32[(($76)>>2)]=$74;\n        $77=((896+($46<<2)+1)|0);\n        $78=((HEAP8[($77)])|0);\n        $79=($78&255);\n        $80=(($color_endpoints+($79<<2))|0);\n        $81=((HEAP32[(($80)>>2)])|0);\n        $82=(($pBlock_167+8)|0);\n        $83=$82;\n        HEAP32[(($83)>>2)]=$81;\n        $84=((__ZN4crnd12symbol_codec6decodeERKNS_25static_huffman_data_modelE($19,$20))|0);\n        $85=((HEAP32[(($prev_color_selector_index)>>2)])|0);\n        $86=((($85)+($84))|0);\n        HEAP32[(($prev_color_selector_index)>>2)]=$86;\n        __ZN4crnd12crn_unpacker5limitERjj($prev_color_selector_index,$4);\n        $87=((HEAP32[(($prev_color_selector_index)>>2)])|0);\n        $88=((__ZN4crnd6vectorIjEixEj($3,$87))|0);\n        $89=((HEAP32[(($88)>>2)])|0);\n        $90=(($pBlock_167+12)|0);\n        $91=$90;\n        HEAP32[(($91)>>2)]=$89;\n        $92=((896+($46<<2)+2)|0);\n        $93=((HEAP8[($92)])|0);\n        $94=($93&255);\n        $95=(($color_endpoints+($94<<2))|0);\n        $96=((HEAP32[(($95)>>2)])|0);\n        $97=(($62+($9<<2))|0);\n        HEAP32[(($97)>>2)]=$96;\n        $98=((__ZN4crnd12symbol_codec6decodeERKNS_25static_huffman_data_modelE($19,$20))|0);\n        $99=((HEAP32[(($prev_color_selector_index)>>2)])|0);\n        $100=((($99)+($98))|0);\n        HEAP32[(($prev_color_selector_index)>>2)]=$100;\n        __ZN4crnd12crn_unpacker5limitERjj($prev_color_selector_index,$4);\n        $101=((HEAP32[(($prev_color_selector_index)>>2)])|0);\n        $102=((__ZN4crnd6vectorIjEixEj($3,$101))|0);\n        $103=((HEAP32[(($102)>>2)])|0);\n        $104=(($62+($21<<2))|0);\n        HEAP32[(($104)>>2)]=$103;\n        $105=((896+($46<<2)+3)|0);\n        $106=((HEAP8[($105)])|0);\n        $107=($106&255);\n        $108=(($color_endpoints+($107<<2))|0);\n        $109=((HEAP32[(($108)>>2)])|0);\n        $110=(($62+($22<<2))|0);\n        HEAP32[(($110)>>2)]=$109;\n        $111=((__ZN4crnd12symbol_codec6decodeERKNS_25static_huffman_data_modelE($19,$20))|0);\n        $112=((HEAP32[(($prev_color_selector_index)>>2)])|0);\n        $113=((($112)+($111))|0);\n        HEAP32[(($prev_color_selector_index)>>2)]=$113;\n        __ZN4crnd12crn_unpacker5limitERjj($prev_color_selector_index,$4);\n        $114=((HEAP32[(($prev_color_selector_index)>>2)])|0);\n        $115=((__ZN4crnd6vectorIjEixEj($3,$114))|0);\n        $116=((HEAP32[(($115)>>2)])|0);\n        $117=(($62+($23<<2))|0);\n        HEAP32[(($117)>>2)]=$116;\n       }\n      } while(0);\n      $136=(($pBlock_167+$block_delta_0)|0);\n      $137=((($x_066)+($dir_x_0))|0);\n      $138=($137|0)==($end_x_0|0);\n      if ($138) {\n       $chunk_encoding_bits_2_lcssa=$47;\n       break;\n      } else {\n       $x_066=$137;$pBlock_167=$136;$chunk_encoding_bits_268=$47;\n      }\n     }\n    }\n\n    $139=(($pRow_073+$15)|0);\n    $140=((($y_072)+(1))|0);\n    $141=($140>>>0)<($chunks_y>>>0);\n    if ($141) {\n     $y_072=$140;$pRow_073=$139;$chunk_encoding_bits_174=$chunk_encoding_bits_2_lcssa;\n    } else {\n     $chunk_encoding_bits_1_lcssa=$chunk_encoding_bits_2_lcssa;\n     break;\n    }\n   }\n  }\n\n  $142=((($f_079)+(1))|0);\n  $143=($142>>>0)<($8>>>0);\n  if ($143) {\n   $f_079=$142;$chunk_encoding_bits_080=$chunk_encoding_bits_1_lcssa;\n  } else {\n   break;\n  }\n }\n STACKTOP=sp;return ((1)|0);\n}\n\n\nfunction __ZN4crnd12crn_unpacker11unpack_dxt5EPPhjjjjjj($this,$pDst,$dst_size_in_bytes,$row_pitch_in_bytes,$blocks_x,$blocks_y,$chunks_x,$chunks_y){\n $this=($this)|0;\n $pDst=($pDst)|0;\n $dst_size_in_bytes=($dst_size_in_bytes)|0;\n $row_pitch_in_bytes=($row_pitch_in_bytes)|0;\n $blocks_x=($blocks_x)|0;\n $blocks_y=($blocks_y)|0;\n $chunks_x=($chunks_x)|0;\n $chunks_y=($chunks_y)|0;\n var $prev_color_endpoint_index=0,$prev_color_selector_index=0,$prev_alpha_endpoint_index=0,$prev_alpha_selector_index=0,$color_endpoints=0,$alpha_endpoints=0,$1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0;\n var $15=0,$16=0,$17=0,$phitmp48=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$chunk_encoding_bits_069=0;\n var $f_068=0,$34=0,$35=0,$chunk_encoding_bits_163=0,$pRow_062=0,$y_061=0,$37=0,$38=0,$40=0,$pBlock_0=0,$block_delta_0=0,$dir_x_0=0,$end_x_0=0,$start_x_0=0,$not_=0,$phitmp48_=0,$42=0,$chunk_encoding_bits_259=0,$pBlock_158=0,$x_057=0;\n var $43=0,$45=0,$46=0,$chunk_encoding_bits_3=0,$47=0,$48=0,$49=0,$50=0,$51=0,$i_049=0,$53=0,$54=0,$55=0,$56=0,$57=0,$58=0,$59=0,$60=0,$61=0,$62=0;\n var $i1_051=0,$63=0,$64=0,$65=0,$66=0,$67=0,$68=0,$69=0,$70=0,$71=0,$by_056=0,$pD_0_in55=0,$73=0,$brmerge47=0,$74=0,$75=0,$76=0,$77=0,$78=0,$79=0;\n var $80=0,$pD_0=0,$82=0,$83=0,$84=0,$85=0,$86=0,$87=0,$88=0,$89=0,$90=0,$91=0,$92=0,$93=0,$94=0,$95=0,$96=0,$97=0,$98=0,$99=0;\n var $100=0,$101=0,$102=0,$103=0,$104=0,$105=0,$106=0,$107=0,$108=0,$109=0,$110=0,$111=0,$112=0,$114=0,$115=0,$116=0,$117=0,$118=0,$119=0,$notlhs=0;\n var $notrhs=0,$_phitmp_not=0,$brmerge47_not=0,$brmerge=0,$121=0,$122=0,$123=0,$chunk_encoding_bits_2_lcssa=0,$124=0,$125=0,$126=0,$chunk_encoding_bits_1_lcssa=0,$127=0,$128=0,$130=0,$131=0,$132=0,$133=0,$134=0,$135=0;\n var $136=0,$137=0,$138=0,$139=0,$140=0,$141=0,$142=0,$143=0,$144=0,$145=0,$146=0,$147=0,$148=0,$149=0,$150=0,$151=0,$152=0,$153=0,$154=0,$155=0;\n var $156=0,$157=0,$158=0,$159=0,$160=0,$161=0,$162=0,$163=0,$165=0,$166=0,$167=0,label=0;\n var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+64)|0;\n $prev_color_endpoint_index=((sp)|0);\n $prev_color_selector_index=(((sp)+(8))|0);\n $prev_alpha_endpoint_index=(((sp)+(16))|0);\n $prev_alpha_selector_index=(((sp)+(24))|0);\n $color_endpoints=(((sp)+(32))|0);\n $alpha_endpoints=(((sp)+(48))|0);\n $1=(($this+236)|0);\n $2=((__ZNK4crnd6vectorIjE4sizeEv($1))|0);\n $3=(($this+252)|0);\n $4=((__ZNK4crnd6vectorIjE4sizeEv($3))|0);\n $5=(($this+268)|0);\n $6=((__ZNK4crnd6vectorItE4sizeEv($5))|0);\n $7=(($this+88)|0);\n $8=((HEAP32[(($7)>>2)])|0);\n $9=(($8+63)|0);\n $10=((__ZNK4crnd15crn_packed_uintILj2EEcvjEv($9))|0);\n HEAP32[(($prev_color_endpoint_index)>>2)]=0;\n HEAP32[(($prev_color_selector_index)>>2)]=0;\n HEAP32[(($prev_alpha_endpoint_index)>>2)]=0;\n HEAP32[(($prev_alpha_selector_index)>>2)]=0;\n $11=((HEAP32[(($7)>>2)])|0);\n $12=(($11+17)|0);\n $13=((__ZNK4crnd15crn_packed_uintILj1EEcvjEv($12))|0);\n $14=($13|0)==0;\n if ($14) {\n  STACKTOP=sp;return ((1)|0);\n }\n $15=($chunks_y|0)==0;\n $16=((($chunks_y)-(1))|0);\n $17=$blocks_y&1;\n $phitmp48=($17|0)==0;\n $18=$row_pitch_in_bytes<<1;\n $19=(($this+92)|0);\n $20=(($this+116)|0);\n $21=$blocks_x&1;\n $22=(($this+92)|0);\n $23=(($this+212)|0);\n $24=(($this+188)|0);\n $25=(($this+284)|0);\n $26=(($this+92)|0);\n $27=(($this+140)|0);\n $28=(($this+92)|0);\n $29=(($this+164)|0);\n $30=((($chunks_x)-(1))|0);\n $31=((($chunks_x)-(1))|0);\n $32=$31<<5;\n $f_068=0;$chunk_encoding_bits_069=1;\n while(1) {\n\n\n  if ($15) {\n   $chunk_encoding_bits_1_lcssa=$chunk_encoding_bits_069;\n  } else {\n   $34=(($pDst+($f_068<<2))|0);\n   $35=((HEAP32[(($34)>>2)])|0);\n   $y_061=0;$pRow_062=$35;$chunk_encoding_bits_163=$chunk_encoding_bits_069;\n   while(1) {\n\n\n\n    $37=$y_061&1;\n    $38=($37|0)==0;\n    if ($38) {\n     $start_x_0=0;$end_x_0=$chunks_x;$dir_x_0=1;$block_delta_0=32;$pBlock_0=$pRow_062;\n    } else {\n     $40=(($pRow_062+$32)|0);\n     $start_x_0=$31;$end_x_0=-1;$dir_x_0=-1;$block_delta_0=-32;$pBlock_0=$40;\n    }\n\n\n\n\n\n    $not_=($y_061|0)!=($16|0);\n    $phitmp48_=$phitmp48|$not_;\n    $42=($start_x_0|0)==($end_x_0|0);\n    if ($42) {\n     $chunk_encoding_bits_2_lcssa=$chunk_encoding_bits_163;\n    } else {\n     $x_057=$start_x_0;$pBlock_158=$pBlock_0;$chunk_encoding_bits_259=$chunk_encoding_bits_163;\n     while(1) {\n\n\n\n      $43=($chunk_encoding_bits_259|0)==1;\n      if ($43) {\n       $45=((__ZN4crnd12symbol_codec6decodeERKNS_25static_huffman_data_modelE($19,$20))|0);\n       $46=$45|512;\n       $chunk_encoding_bits_3=$46;\n      } else {\n       $chunk_encoding_bits_3=$chunk_encoding_bits_259;\n      }\n\n      $47=$chunk_encoding_bits_3&7;\n      $48=$chunk_encoding_bits_3>>>3;\n      $49=((888+$47)|0);\n      $50=((HEAP8[($49)])|0);\n      $51=($50&255);\n      $i_049=0;\n      while(1) {\n\n       $53=((__ZN4crnd12symbol_codec6decodeERKNS_25static_huffman_data_modelE($28,$29))|0);\n       $54=((HEAP32[(($prev_alpha_endpoint_index)>>2)])|0);\n       $55=((($54)+($53))|0);\n       HEAP32[(($prev_alpha_endpoint_index)>>2)]=$55;\n       __ZN4crnd12crn_unpacker5limitERjj($prev_alpha_endpoint_index,$6);\n       $56=((HEAP32[(($prev_alpha_endpoint_index)>>2)])|0);\n       $57=((__ZN4crnd6vectorItEixEj($5,$56))|0);\n       $58=((HEAP16[(($57)>>1)])|0);\n       $59=($58&65535);\n       $60=(($alpha_endpoints+($i_049<<2))|0);\n       HEAP32[(($60)>>2)]=$59;\n       $61=((($i_049)+(1))|0);\n       $62=($61>>>0)<($51>>>0);\n       if ($62) {\n        $i_049=$61;\n       } else {\n        $i1_051=0;\n        break;\n       }\n      }\n      while(1) {\n\n       $63=((__ZN4crnd12symbol_codec6decodeERKNS_25static_huffman_data_modelE($26,$27))|0);\n       $64=((HEAP32[(($prev_color_endpoint_index)>>2)])|0);\n       $65=((($64)+($63))|0);\n       HEAP32[(($prev_color_endpoint_index)>>2)]=$65;\n       __ZN4crnd12crn_unpacker5limitERjj($prev_color_endpoint_index,$2);\n       $66=((HEAP32[(($prev_color_endpoint_index)>>2)])|0);\n       $67=((__ZN4crnd6vectorIjEixEj($1,$66))|0);\n       $68=((HEAP32[(($67)>>2)])|0);\n       $69=(($color_endpoints+($i1_051<<2))|0);\n       HEAP32[(($69)>>2)]=$68;\n       $70=((($i1_051)+(1))|0);\n       $71=($70>>>0)<($51>>>0);\n       if ($71) {\n        $i1_051=$70;\n       } else {\n        $pD_0_in55=$pBlock_158;$by_056=0;\n        break;\n       }\n      }\n      while(1) {\n\n\n       $73=($by_056|0)==0;\n       $brmerge47=$73|$phitmp48_;\n       $74=$by_056<<1;\n       $75=((__ZN4crnd12symbol_codec6decodeERKNS_25static_huffman_data_modelE($22,$23))|0);\n       $76=((HEAP32[(($prev_alpha_selector_index)>>2)])|0);\n       $77=((($76)+($75))|0);\n       HEAP32[(($prev_alpha_selector_index)>>2)]=$77;\n       __ZN4crnd12crn_unpacker5limitERjj($prev_alpha_selector_index,$10);\n       $78=((__ZN4crnd12symbol_codec6decodeERKNS_25static_huffman_data_modelE($22,$24))|0);\n       $79=((HEAP32[(($prev_color_selector_index)>>2)])|0);\n       $80=((($79)+($78))|0);\n       HEAP32[(($prev_color_selector_index)>>2)]=$80;\n       __ZN4crnd12crn_unpacker5limitERjj($prev_color_selector_index,$4);\n       if ($brmerge47) {\n        $pD_0=$pD_0_in55;\n        $82=((896+($47<<2)+$74)|0);\n        $83=((HEAP8[($82)])|0);\n        $84=($83&255);\n        $85=((HEAP32[(($prev_alpha_selector_index)>>2)])|0);\n        $86=((($85)*(3))&-1);\n        $87=((__ZN4crnd6vectorItEixEj($25,$86))|0);\n        $88=(($alpha_endpoints+($84<<2))|0);\n        $89=((HEAP32[(($88)>>2)])|0);\n        $90=((HEAP16[(($87)>>1)])|0);\n        $91=($90&65535);\n        $92=$91<<16;\n        $93=$92|$89;\n        HEAP32[(($pD_0)>>2)]=$93;\n        $94=(($87+2)|0);\n        $95=((HEAP16[(($94)>>1)])|0);\n        $96=($95&65535);\n        $97=(($87+4)|0);\n        $98=((HEAP16[(($97)>>1)])|0);\n        $99=($98&65535);\n        $100=$99<<16;\n        $101=$100|$96;\n        $102=(($pD_0_in55+4)|0);\n        $103=$102;\n        HEAP32[(($103)>>2)]=$101;\n        $104=(($color_endpoints+($84<<2))|0);\n        $105=((HEAP32[(($104)>>2)])|0);\n        $106=(($pD_0_in55+8)|0);\n        $107=$106;\n        HEAP32[(($107)>>2)]=$105;\n        $108=((HEAP32[(($prev_color_selector_index)>>2)])|0);\n        $109=((__ZN4crnd6vectorIjEixEj($3,$108))|0);\n        $110=((HEAP32[(($109)>>2)])|0);\n        $111=(($pD_0_in55+12)|0);\n        $112=$111;\n        HEAP32[(($112)>>2)]=$110;\n       }\n       $114=((__ZN4crnd12symbol_codec6decodeERKNS_25static_huffman_data_modelE($22,$23))|0);\n       $115=((HEAP32[(($prev_alpha_selector_index)>>2)])|0);\n       $116=((($115)+($114))|0);\n       HEAP32[(($prev_alpha_selector_index)>>2)]=$116;\n       __ZN4crnd12crn_unpacker5limitERjj($prev_alpha_selector_index,$10);\n       $117=((__ZN4crnd12symbol_codec6decodeERKNS_25static_huffman_data_modelE($22,$24))|0);\n       $118=((HEAP32[(($prev_color_selector_index)>>2)])|0);\n       $119=((($118)+($117))|0);\n       HEAP32[(($prev_color_selector_index)>>2)]=$119;\n       __ZN4crnd12crn_unpacker5limitERjj($prev_color_selector_index,$4);\n       $notlhs=($21|0)!=0;\n       $notrhs=($x_057|0)==($30|0);\n       $_phitmp_not=$notrhs&$notlhs;\n       $brmerge47_not=$brmerge47^1;\n       $brmerge=$_phitmp_not|$brmerge47_not;\n       if (!($brmerge)) {\n        $130=(($pD_0_in55+16)|0);\n        $131=$130;\n        $132=$74|1;\n        $133=((896+($47<<2)+$132)|0);\n        $134=((HEAP8[($133)])|0);\n        $135=($134&255);\n        $136=((HEAP32[(($prev_alpha_selector_index)>>2)])|0);\n        $137=((($136)*(3))&-1);\n        $138=((__ZN4crnd6vectorItEixEj($25,$137))|0);\n        $139=(($alpha_endpoints+($135<<2))|0);\n        $140=((HEAP32[(($139)>>2)])|0);\n        $141=((HEAP16[(($138)>>1)])|0);\n        $142=($141&65535);\n        $143=$142<<16;\n        $144=$143|$140;\n        HEAP32[(($131)>>2)]=$144;\n        $145=(($138+2)|0);\n        $146=((HEAP16[(($145)>>1)])|0);\n        $147=($146&65535);\n        $148=(($138+4)|0);\n        $149=((HEAP16[(($148)>>1)])|0);\n        $150=($149&65535);\n        $151=$150<<16;\n        $152=$151|$147;\n        $153=(($pD_0_in55+20)|0);\n        $154=$153;\n        HEAP32[(($154)>>2)]=$152;\n        $155=(($color_endpoints+($135<<2))|0);\n        $156=((HEAP32[(($155)>>2)])|0);\n        $157=(($pD_0_in55+24)|0);\n        $158=$157;\n        HEAP32[(($158)>>2)]=$156;\n        $159=((HEAP32[(($prev_color_selector_index)>>2)])|0);\n        $160=((__ZN4crnd6vectorIjEixEj($3,$159))|0);\n        $161=((HEAP32[(($160)>>2)])|0);\n        $162=(($pD_0_in55+28)|0);\n        $163=$162;\n        HEAP32[(($163)>>2)]=$161;\n       }\n       $165=(($pD_0_in55+$row_pitch_in_bytes)|0);\n       $166=((($by_056)+(1))|0);\n       $167=($166>>>0)<((2)>>>0);\n       if ($167) {\n        $pD_0_in55=$165;$by_056=$166;\n       } else {\n        break;\n       }\n      }\n      $121=(($pBlock_158+$block_delta_0)|0);\n      $122=((($x_057)+($dir_x_0))|0);\n      $123=($122|0)==($end_x_0|0);\n      if ($123) {\n       $chunk_encoding_bits_2_lcssa=$48;\n       break;\n      } else {\n       $x_057=$122;$pBlock_158=$121;$chunk_encoding_bits_259=$48;\n      }\n     }\n    }\n\n    $124=(($pRow_062+$18)|0);\n    $125=((($y_061)+(1))|0);\n    $126=($125>>>0)<($chunks_y>>>0);\n    if ($126) {\n     $y_061=$125;$pRow_062=$124;$chunk_encoding_bits_163=$chunk_encoding_bits_2_lcssa;\n    } else {\n     $chunk_encoding_bits_1_lcssa=$chunk_encoding_bits_2_lcssa;\n     break;\n    }\n   }\n  }\n\n  $127=((($f_068)+(1))|0);\n  $128=($127>>>0)<($13>>>0);\n  if ($128) {\n   $f_068=$127;$chunk_encoding_bits_069=$chunk_encoding_bits_1_lcssa;\n  } else {\n   break;\n  }\n }\n STACKTOP=sp;return ((1)|0);\n}\n\n\nfunction __ZN4crnd12crn_unpacker12unpack_dxt5aEPPhjjjjjj($this,$pDst,$dst_size_in_bytes,$row_pitch_in_bytes,$blocks_x,$blocks_y,$chunks_x,$chunks_y){\n $this=($this)|0;\n $pDst=($pDst)|0;\n $dst_size_in_bytes=($dst_size_in_bytes)|0;\n $row_pitch_in_bytes=($row_pitch_in_bytes)|0;\n $blocks_x=($blocks_x)|0;\n $blocks_y=($blocks_y)|0;\n $chunks_x=($chunks_x)|0;\n $chunks_y=($chunks_y)|0;\n var $prev_alpha0_endpoint_index=0,$prev_alpha0_selector_index=0,$alpha0_endpoints=0,$1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$phitmp42=0,$14=0,$15=0,$16=0;\n var $17=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0,$24=0,$25=0,$chunk_encoding_bits_060=0,$f_059=0,$27=0,$28=0,$chunk_encoding_bits_154=0,$pRow_053=0,$y_052=0,$30=0,$31=0,$33=0,$pBlock_0=0;\n var $block_delta_0=0,$dir_x_0=0,$end_x_0=0,$start_x_0=0,$not_=0,$phitmp42_=0,$35=0,$chunk_encoding_bits_250=0,$x_049=0,$pBlock_148=0,$36=0,$38=0,$39=0,$chunk_encoding_bits_3=0,$40=0,$41=0,$42=0,$43=0,$44=0,$i_043=0;\n var $46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$by_047=0,$pD_0_in46=0,$57=0,$brmerge41=0,$58=0,$59=0,$60=0,$61=0,$pD_0=0,$63=0;\n var $64=0,$65=0,$66=0,$67=0,$68=0,$69=0,$70=0,$71=0,$72=0,$73=0,$74=0,$75=0,$76=0,$77=0,$78=0,$79=0,$80=0,$81=0,$82=0,$83=0;\n var $84=0,$86=0,$87=0,$88=0,$notlhs=0,$notrhs=0,$_phitmp_not=0,$brmerge41_not=0,$brmerge=0,$90=0,$91=0,$92=0,$chunk_encoding_bits_2_lcssa=0,$93=0,$94=0,$95=0,$chunk_encoding_bits_1_lcssa=0,$96=0,$97=0,$99=0;\n var $100=0,$101=0,$102=0,$103=0,$104=0,$105=0,$106=0,$107=0,$108=0,$109=0,$110=0,$111=0,$112=0,$113=0,$114=0,$115=0,$116=0,$117=0,$118=0,$119=0;\n var $120=0,$121=0,$122=0,$123=0,$125=0,$126=0,$127=0,label=0;\n var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+32)|0;\n $prev_alpha0_endpoint_index=((sp)|0);\n $prev_alpha0_selector_index=(((sp)+(8))|0);\n $alpha0_endpoints=(((sp)+(16))|0);\n $1=(($this+268)|0);\n $2=((__ZNK4crnd6vectorItE4sizeEv($1))|0);\n $3=(($this+88)|0);\n $4=((HEAP32[(($3)>>2)])|0);\n $5=(($4+63)|0);\n $6=((__ZNK4crnd15crn_packed_uintILj2EEcvjEv($5))|0);\n HEAP32[(($prev_alpha0_endpoint_index)>>2)]=0;\n HEAP32[(($prev_alpha0_selector_index)>>2)]=0;\n $7=((HEAP32[(($3)>>2)])|0);\n $8=(($7+17)|0);\n $9=((__ZNK4crnd15crn_packed_uintILj1EEcvjEv($8))|0);\n $10=($9|0)==0;\n if ($10) {\n  STACKTOP=sp;return ((1)|0);\n }\n $11=($chunks_y|0)==0;\n $12=((($chunks_y)-(1))|0);\n $13=$blocks_y&1;\n $phitmp42=($13|0)==0;\n $14=$row_pitch_in_bytes<<1;\n $15=(($this+92)|0);\n $16=(($this+116)|0);\n $17=$blocks_x&1;\n $18=(($this+92)|0);\n $19=(($this+212)|0);\n $20=(($this+284)|0);\n $21=(($this+92)|0);\n $22=(($this+164)|0);\n $23=((($chunks_x)-(1))|0);\n $24=((($chunks_x)-(1))|0);\n $25=$24<<4;\n $f_059=0;$chunk_encoding_bits_060=1;\n while(1) {\n\n\n  if ($11) {\n   $chunk_encoding_bits_1_lcssa=$chunk_encoding_bits_060;\n  } else {\n   $27=(($pDst+($f_059<<2))|0);\n   $28=((HEAP32[(($27)>>2)])|0);\n   $y_052=0;$pRow_053=$28;$chunk_encoding_bits_154=$chunk_encoding_bits_060;\n   while(1) {\n\n\n\n    $30=$y_052&1;\n    $31=($30|0)==0;\n    if ($31) {\n     $start_x_0=0;$end_x_0=$chunks_x;$dir_x_0=1;$block_delta_0=16;$pBlock_0=$pRow_053;\n    } else {\n     $33=(($pRow_053+$25)|0);\n     $start_x_0=$24;$end_x_0=-1;$dir_x_0=-1;$block_delta_0=-16;$pBlock_0=$33;\n    }\n\n\n\n\n\n    $not_=($y_052|0)!=($12|0);\n    $phitmp42_=$phitmp42|$not_;\n    $35=($start_x_0|0)==($end_x_0|0);\n    if ($35) {\n     $chunk_encoding_bits_2_lcssa=$chunk_encoding_bits_154;\n    } else {\n     $pBlock_148=$pBlock_0;$x_049=$start_x_0;$chunk_encoding_bits_250=$chunk_encoding_bits_154;\n     while(1) {\n\n\n\n      $36=($chunk_encoding_bits_250|0)==1;\n      if ($36) {\n       $38=((__ZN4crnd12symbol_codec6decodeERKNS_25static_huffman_data_modelE($15,$16))|0);\n       $39=$38|512;\n       $chunk_encoding_bits_3=$39;\n      } else {\n       $chunk_encoding_bits_3=$chunk_encoding_bits_250;\n      }\n\n      $40=$chunk_encoding_bits_3&7;\n      $41=$chunk_encoding_bits_3>>>3;\n      $42=((888+$40)|0);\n      $43=((HEAP8[($42)])|0);\n      $44=($43&255);\n      $i_043=0;\n      while(1) {\n\n       $46=((__ZN4crnd12symbol_codec6decodeERKNS_25static_huffman_data_modelE($21,$22))|0);\n       $47=((HEAP32[(($prev_alpha0_endpoint_index)>>2)])|0);\n       $48=((($47)+($46))|0);\n       HEAP32[(($prev_alpha0_endpoint_index)>>2)]=$48;\n       __ZN4crnd12crn_unpacker5limitERjj($prev_alpha0_endpoint_index,$2);\n       $49=((HEAP32[(($prev_alpha0_endpoint_index)>>2)])|0);\n       $50=((__ZN4crnd6vectorItEixEj($1,$49))|0);\n       $51=((HEAP16[(($50)>>1)])|0);\n       $52=($51&65535);\n       $53=(($alpha0_endpoints+($i_043<<2))|0);\n       HEAP32[(($53)>>2)]=$52;\n       $54=((($i_043)+(1))|0);\n       $55=($54>>>0)<($44>>>0);\n       if ($55) {\n        $i_043=$54;\n       } else {\n        $pD_0_in46=$pBlock_148;$by_047=0;\n        break;\n       }\n      }\n      while(1) {\n\n\n       $57=($by_047|0)==0;\n       $brmerge41=$57|$phitmp42_;\n       $58=$by_047<<1;\n       $59=((__ZN4crnd12symbol_codec6decodeERKNS_25static_huffman_data_modelE($18,$19))|0);\n       $60=((HEAP32[(($prev_alpha0_selector_index)>>2)])|0);\n       $61=((($60)+($59))|0);\n       HEAP32[(($prev_alpha0_selector_index)>>2)]=$61;\n       __ZN4crnd12crn_unpacker5limitERjj($prev_alpha0_selector_index,$6);\n       if ($brmerge41) {\n        $pD_0=$pD_0_in46;\n        $63=((896+($40<<2)+$58)|0);\n        $64=((HEAP8[($63)])|0);\n        $65=($64&255);\n        $66=((HEAP32[(($prev_alpha0_selector_index)>>2)])|0);\n        $67=((($66)*(3))&-1);\n        $68=((__ZN4crnd6vectorItEixEj($20,$67))|0);\n        $69=(($alpha0_endpoints+($65<<2))|0);\n        $70=((HEAP32[(($69)>>2)])|0);\n        $71=((HEAP16[(($68)>>1)])|0);\n        $72=($71&65535);\n        $73=$72<<16;\n        $74=$73|$70;\n        HEAP32[(($pD_0)>>2)]=$74;\n        $75=(($68+2)|0);\n        $76=((HEAP16[(($75)>>1)])|0);\n        $77=($76&65535);\n        $78=(($68+4)|0);\n        $79=((HEAP16[(($78)>>1)])|0);\n        $80=($79&65535);\n        $81=$80<<16;\n        $82=$81|$77;\n        $83=(($pD_0_in46+4)|0);\n        $84=$83;\n        HEAP32[(($84)>>2)]=$82;\n       }\n       $86=((__ZN4crnd12symbol_codec6decodeERKNS_25static_huffman_data_modelE($18,$19))|0);\n       $87=((HEAP32[(($prev_alpha0_selector_index)>>2)])|0);\n       $88=((($87)+($86))|0);\n       HEAP32[(($prev_alpha0_selector_index)>>2)]=$88;\n       __ZN4crnd12crn_unpacker5limitERjj($prev_alpha0_selector_index,$6);\n       $notlhs=($17|0)!=0;\n       $notrhs=($x_049|0)==($23|0);\n       $_phitmp_not=$notrhs&$notlhs;\n       $brmerge41_not=$brmerge41^1;\n       $brmerge=$_phitmp_not|$brmerge41_not;\n       if (!($brmerge)) {\n        $99=(($pD_0_in46+8)|0);\n        $100=$99;\n        $101=$58|1;\n        $102=((896+($40<<2)+$101)|0);\n        $103=((HEAP8[($102)])|0);\n        $104=($103&255);\n        $105=((HEAP32[(($prev_alpha0_selector_index)>>2)])|0);\n        $106=((($105)*(3))&-1);\n        $107=((__ZN4crnd6vectorItEixEj($20,$106))|0);\n        $108=(($alpha0_endpoints+($104<<2))|0);\n        $109=((HEAP32[(($108)>>2)])|0);\n        $110=((HEAP16[(($107)>>1)])|0);\n        $111=($110&65535);\n        $112=$111<<16;\n        $113=$112|$109;\n        HEAP32[(($100)>>2)]=$113;\n        $114=(($107+2)|0);\n        $115=((HEAP16[(($114)>>1)])|0);\n        $116=($115&65535);\n        $117=(($107+4)|0);\n        $118=((HEAP16[(($117)>>1)])|0);\n        $119=($118&65535);\n        $120=$119<<16;\n        $121=$120|$116;\n        $122=(($pD_0_in46+12)|0);\n        $123=$122;\n        HEAP32[(($123)>>2)]=$121;\n       }\n       $125=(($pD_0_in46+$row_pitch_in_bytes)|0);\n       $126=((($by_047)+(1))|0);\n       $127=($126>>>0)<((2)>>>0);\n       if ($127) {\n        $pD_0_in46=$125;$by_047=$126;\n       } else {\n        break;\n       }\n      }\n      $90=(($pBlock_148+$block_delta_0)|0);\n      $91=((($x_049)+($dir_x_0))|0);\n      $92=($91|0)==($end_x_0|0);\n      if ($92) {\n       $chunk_encoding_bits_2_lcssa=$41;\n       break;\n      } else {\n       $pBlock_148=$90;$x_049=$91;$chunk_encoding_bits_250=$41;\n      }\n     }\n    }\n\n    $93=(($pRow_053+$14)|0);\n    $94=((($y_052)+(1))|0);\n    $95=($94>>>0)<($chunks_y>>>0);\n    if ($95) {\n     $y_052=$94;$pRow_053=$93;$chunk_encoding_bits_154=$chunk_encoding_bits_2_lcssa;\n    } else {\n     $chunk_encoding_bits_1_lcssa=$chunk_encoding_bits_2_lcssa;\n     break;\n    }\n   }\n  }\n\n  $96=((($f_059)+(1))|0);\n  $97=($96>>>0)<($9>>>0);\n  if ($97) {\n   $f_059=$96;$chunk_encoding_bits_060=$chunk_encoding_bits_1_lcssa;\n  } else {\n   break;\n  }\n }\n STACKTOP=sp;return ((1)|0);\n}\n\n\nfunction __ZN4crnd12crn_unpacker10unpack_dxnEPPhjjjjjj($this,$pDst,$dst_size_in_bytes,$row_pitch_in_bytes,$blocks_x,$blocks_y,$chunks_x,$chunks_y){\n $this=($this)|0;\n $pDst=($pDst)|0;\n $dst_size_in_bytes=($dst_size_in_bytes)|0;\n $row_pitch_in_bytes=($row_pitch_in_bytes)|0;\n $blocks_x=($blocks_x)|0;\n $blocks_y=($blocks_y)|0;\n $chunks_x=($chunks_x)|0;\n $chunks_y=($chunks_y)|0;\n var $prev_alpha0_endpoint_index=0,$prev_alpha0_selector_index=0,$prev_alpha1_endpoint_index=0,$prev_alpha1_selector_index=0,$alpha0_endpoints=0,$alpha1_endpoints=0,$1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$phitmp52=0;\n var $14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$21=0,$22=0,$23=0,$24=0,$25=0,$26=0,$27=0,$chunk_encoding_bits_073=0,$f_072=0,$29=0,$30=0,$chunk_encoding_bits_167=0,$pRow_066=0;\n var $y_065=0,$32=0,$33=0,$35=0,$pBlock_0=0,$block_delta_0=0,$dir_x_0=0,$end_x_0=0,$start_x_0=0,$not_=0,$phitmp52_=0,$37=0,$chunk_encoding_bits_263=0,$pBlock_162=0,$x_061=0,$38=0,$40=0,$41=0,$chunk_encoding_bits_3=0,$42=0;\n var $43=0,$44=0,$45=0,$46=0,$i_053=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0,$57=0,$i1_055=0,$58=0,$59=0,$60=0,$61=0;\n var $62=0,$63=0,$64=0,$65=0,$66=0,$67=0,$by_060=0,$pD_0_in59=0,$69=0,$brmerge51=0,$70=0,$71=0,$72=0,$73=0,$74=0,$75=0,$76=0,$pD_0=0,$78=0,$79=0;\n var $80=0,$81=0,$82=0,$83=0,$84=0,$85=0,$86=0,$87=0,$88=0,$89=0,$90=0,$91=0,$92=0,$93=0,$94=0,$95=0,$96=0,$97=0,$98=0,$99=0;\n var $100=0,$101=0,$102=0,$103=0,$104=0,$105=0,$106=0,$107=0,$108=0,$109=0,$110=0,$111=0,$112=0,$113=0,$114=0,$115=0,$116=0,$117=0,$118=0,$119=0;\n var $120=0,$122=0,$123=0,$124=0,$125=0,$126=0,$127=0,$notlhs=0,$notrhs=0,$_phitmp_not=0,$brmerge51_not=0,$brmerge=0,$129=0,$130=0,$131=0,$chunk_encoding_bits_2_lcssa=0,$132=0,$133=0,$134=0,$chunk_encoding_bits_1_lcssa=0;\n var $135=0,$136=0,$138=0,$139=0,$140=0,$141=0,$142=0,$143=0,$144=0,$145=0,$146=0,$147=0,$148=0,$149=0,$150=0,$151=0,$152=0,$153=0,$154=0,$155=0;\n var $156=0,$157=0,$158=0,$159=0,$160=0,$161=0,$162=0,$163=0,$164=0,$165=0,$166=0,$167=0,$168=0,$169=0,$170=0,$171=0,$172=0,$173=0,$174=0,$175=0;\n var $176=0,$177=0,$178=0,$179=0,$180=0,$181=0,$182=0,$183=0,$185=0,$186=0,$187=0,label=0;\n var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+64)|0;\n $prev_alpha0_endpoint_index=((sp)|0);\n $prev_alpha0_selector_index=(((sp)+(8))|0);\n $prev_alpha1_endpoint_index=(((sp)+(16))|0);\n $prev_alpha1_selector_index=(((sp)+(24))|0);\n $alpha0_endpoints=(((sp)+(32))|0);\n $alpha1_endpoints=(((sp)+(48))|0);\n $1=(($this+268)|0);\n $2=((__ZNK4crnd6vectorItE4sizeEv($1))|0);\n $3=(($this+88)|0);\n $4=((HEAP32[(($3)>>2)])|0);\n $5=(($4+63)|0);\n $6=((__ZNK4crnd15crn_packed_uintILj2EEcvjEv($5))|0);\n HEAP32[(($prev_alpha0_endpoint_index)>>2)]=0;\n HEAP32[(($prev_alpha0_selector_index)>>2)]=0;\n HEAP32[(($prev_alpha1_endpoint_index)>>2)]=0;\n HEAP32[(($prev_alpha1_selector_index)>>2)]=0;\n $7=((HEAP32[(($3)>>2)])|0);\n $8=(($7+17)|0);\n $9=((__ZNK4crnd15crn_packed_uintILj1EEcvjEv($8))|0);\n $10=($9|0)==0;\n if ($10) {\n  STACKTOP=sp;return ((1)|0);\n }\n $11=($chunks_y|0)==0;\n $12=((($chunks_y)-(1))|0);\n $13=$blocks_y&1;\n $phitmp52=($13|0)==0;\n $14=$row_pitch_in_bytes<<1;\n $15=(($this+92)|0);\n $16=(($this+116)|0);\n $17=$blocks_x&1;\n $18=(($this+92)|0);\n $19=(($this+212)|0);\n $20=(($this+284)|0);\n $21=(($this+92)|0);\n $22=(($this+164)|0);\n $23=(($this+92)|0);\n $24=(($this+164)|0);\n $25=((($chunks_x)-(1))|0);\n $26=((($chunks_x)-(1))|0);\n $27=$26<<5;\n $f_072=0;$chunk_encoding_bits_073=1;\n while(1) {\n\n\n  if ($11) {\n   $chunk_encoding_bits_1_lcssa=$chunk_encoding_bits_073;\n  } else {\n   $29=(($pDst+($f_072<<2))|0);\n   $30=((HEAP32[(($29)>>2)])|0);\n   $y_065=0;$pRow_066=$30;$chunk_encoding_bits_167=$chunk_encoding_bits_073;\n   while(1) {\n\n\n\n    $32=$y_065&1;\n    $33=($32|0)==0;\n    if ($33) {\n     $start_x_0=0;$end_x_0=$chunks_x;$dir_x_0=1;$block_delta_0=32;$pBlock_0=$pRow_066;\n    } else {\n     $35=(($pRow_066+$27)|0);\n     $start_x_0=$26;$end_x_0=-1;$dir_x_0=-1;$block_delta_0=-32;$pBlock_0=$35;\n    }\n\n\n\n\n\n    $not_=($y_065|0)!=($12|0);\n    $phitmp52_=$phitmp52|$not_;\n    $37=($start_x_0|0)==($end_x_0|0);\n    if ($37) {\n     $chunk_encoding_bits_2_lcssa=$chunk_encoding_bits_167;\n    } else {\n     $x_061=$start_x_0;$pBlock_162=$pBlock_0;$chunk_encoding_bits_263=$chunk_encoding_bits_167;\n     while(1) {\n\n\n\n      $38=($chunk_encoding_bits_263|0)==1;\n      if ($38) {\n       $40=((__ZN4crnd12symbol_codec6decodeERKNS_25static_huffman_data_modelE($15,$16))|0);\n       $41=$40|512;\n       $chunk_encoding_bits_3=$41;\n      } else {\n       $chunk_encoding_bits_3=$chunk_encoding_bits_263;\n      }\n\n      $42=$chunk_encoding_bits_3&7;\n      $43=$chunk_encoding_bits_3>>>3;\n      $44=((888+$42)|0);\n      $45=((HEAP8[($44)])|0);\n      $46=($45&255);\n      $i_053=0;\n      while(1) {\n\n       $48=((__ZN4crnd12symbol_codec6decodeERKNS_25static_huffman_data_modelE($23,$24))|0);\n       $49=((HEAP32[(($prev_alpha0_endpoint_index)>>2)])|0);\n       $50=((($49)+($48))|0);\n       HEAP32[(($prev_alpha0_endpoint_index)>>2)]=$50;\n       __ZN4crnd12crn_unpacker5limitERjj($prev_alpha0_endpoint_index,$2);\n       $51=((HEAP32[(($prev_alpha0_endpoint_index)>>2)])|0);\n       $52=((__ZN4crnd6vectorItEixEj($1,$51))|0);\n       $53=((HEAP16[(($52)>>1)])|0);\n       $54=($53&65535);\n       $55=(($alpha0_endpoints+($i_053<<2))|0);\n       HEAP32[(($55)>>2)]=$54;\n       $56=((($i_053)+(1))|0);\n       $57=($56>>>0)<($46>>>0);\n       if ($57) {\n        $i_053=$56;\n       } else {\n        $i1_055=0;\n        break;\n       }\n      }\n      while(1) {\n\n       $58=((__ZN4crnd12symbol_codec6decodeERKNS_25static_huffman_data_modelE($21,$22))|0);\n       $59=((HEAP32[(($prev_alpha1_endpoint_index)>>2)])|0);\n       $60=((($59)+($58))|0);\n       HEAP32[(($prev_alpha1_endpoint_index)>>2)]=$60;\n       __ZN4crnd12crn_unpacker5limitERjj($prev_alpha1_endpoint_index,$2);\n       $61=((HEAP32[(($prev_alpha1_endpoint_index)>>2)])|0);\n       $62=((__ZN4crnd6vectorItEixEj($1,$61))|0);\n       $63=((HEAP16[(($62)>>1)])|0);\n       $64=($63&65535);\n       $65=(($alpha1_endpoints+($i1_055<<2))|0);\n       HEAP32[(($65)>>2)]=$64;\n       $66=((($i1_055)+(1))|0);\n       $67=($66>>>0)<($46>>>0);\n       if ($67) {\n        $i1_055=$66;\n       } else {\n        $pD_0_in59=$pBlock_162;$by_060=0;\n        break;\n       }\n      }\n      while(1) {\n\n\n       $69=($by_060|0)==0;\n       $brmerge51=$69|$phitmp52_;\n       $70=$by_060<<1;\n       $71=((__ZN4crnd12symbol_codec6decodeERKNS_25static_huffman_data_modelE($18,$19))|0);\n       $72=((HEAP32[(($prev_alpha0_selector_index)>>2)])|0);\n       $73=((($72)+($71))|0);\n       HEAP32[(($prev_alpha0_selector_index)>>2)]=$73;\n       __ZN4crnd12crn_unpacker5limitERjj($prev_alpha0_selector_index,$6);\n       $74=((__ZN4crnd12symbol_codec6decodeERKNS_25static_huffman_data_modelE($18,$19))|0);\n       $75=((HEAP32[(($prev_alpha1_selector_index)>>2)])|0);\n       $76=((($75)+($74))|0);\n       HEAP32[(($prev_alpha1_selector_index)>>2)]=$76;\n       __ZN4crnd12crn_unpacker5limitERjj($prev_alpha1_selector_index,$6);\n       if ($brmerge51) {\n        $pD_0=$pD_0_in59;\n        $78=((896+($42<<2)+$70)|0);\n        $79=((HEAP8[($78)])|0);\n        $80=($79&255);\n        $81=((HEAP32[(($prev_alpha0_selector_index)>>2)])|0);\n        $82=((($81)*(3))&-1);\n        $83=((__ZN4crnd6vectorItEixEj($20,$82))|0);\n        $84=((HEAP32[(($prev_alpha1_selector_index)>>2)])|0);\n        $85=((($84)*(3))&-1);\n        $86=((__ZN4crnd6vectorItEixEj($20,$85))|0);\n        $87=(($alpha0_endpoints+($80<<2))|0);\n        $88=((HEAP32[(($87)>>2)])|0);\n        $89=((HEAP16[(($83)>>1)])|0);\n        $90=($89&65535);\n        $91=$90<<16;\n        $92=$91|$88;\n        HEAP32[(($pD_0)>>2)]=$92;\n        $93=(($83+2)|0);\n        $94=((HEAP16[(($93)>>1)])|0);\n        $95=($94&65535);\n        $96=(($83+4)|0);\n        $97=((HEAP16[(($96)>>1)])|0);\n        $98=($97&65535);\n        $99=$98<<16;\n        $100=$99|$95;\n        $101=(($pD_0_in59+4)|0);\n        $102=$101;\n        HEAP32[(($102)>>2)]=$100;\n        $103=(($alpha1_endpoints+($80<<2))|0);\n        $104=((HEAP32[(($103)>>2)])|0);\n        $105=((HEAP16[(($86)>>1)])|0);\n        $106=($105&65535);\n        $107=$106<<16;\n        $108=$107|$104;\n        $109=(($pD_0_in59+8)|0);\n        $110=$109;\n        HEAP32[(($110)>>2)]=$108;\n        $111=(($86+2)|0);\n        $112=((HEAP16[(($111)>>1)])|0);\n        $113=($112&65535);\n        $114=(($86+4)|0);\n        $115=((HEAP16[(($114)>>1)])|0);\n        $116=($115&65535);\n        $117=$116<<16;\n        $118=$117|$113;\n        $119=(($pD_0_in59+12)|0);\n        $120=$119;\n        HEAP32[(($120)>>2)]=$118;\n       }\n       $122=((__ZN4crnd12symbol_codec6decodeERKNS_25static_huffman_data_modelE($18,$19))|0);\n       $123=((HEAP32[(($prev_alpha0_selector_index)>>2)])|0);\n       $124=((($123)+($122))|0);\n       HEAP32[(($prev_alpha0_selector_index)>>2)]=$124;\n       __ZN4crnd12crn_unpacker5limitERjj($prev_alpha0_selector_index,$6);\n       $125=((__ZN4crnd12symbol_codec6decodeERKNS_25static_huffman_data_modelE($18,$19))|0);\n       $126=((HEAP32[(($prev_alpha1_selector_index)>>2)])|0);\n       $127=((($126)+($125))|0);\n       HEAP32[(($prev_alpha1_selector_index)>>2)]=$127;\n       __ZN4crnd12crn_unpacker5limitERjj($prev_alpha1_selector_index,$6);\n       $notlhs=($17|0)!=0;\n       $notrhs=($x_061|0)==($25|0);\n       $_phitmp_not=$notrhs&$notlhs;\n       $brmerge51_not=$brmerge51^1;\n       $brmerge=$_phitmp_not|$brmerge51_not;\n       if (!($brmerge)) {\n        $138=(($pD_0_in59+16)|0);\n        $139=$138;\n        $140=$70|1;\n        $141=((896+($42<<2)+$140)|0);\n        $142=((HEAP8[($141)])|0);\n        $143=($142&255);\n        $144=((HEAP32[(($prev_alpha0_selector_index)>>2)])|0);\n        $145=((($144)*(3))&-1);\n        $146=((__ZN4crnd6vectorItEixEj($20,$145))|0);\n        $147=((HEAP32[(($prev_alpha1_selector_index)>>2)])|0);\n        $148=((($147)*(3))&-1);\n        $149=((__ZN4crnd6vectorItEixEj($20,$148))|0);\n        $150=(($alpha0_endpoints+($143<<2))|0);\n        $151=((HEAP32[(($150)>>2)])|0);\n        $152=((HEAP16[(($146)>>1)])|0);\n        $153=($152&65535);\n        $154=$153<<16;\n        $155=$154|$151;\n        HEAP32[(($139)>>2)]=$155;\n        $156=(($146+2)|0);\n        $157=((HEAP16[(($156)>>1)])|0);\n        $158=($157&65535);\n        $159=(($146+4)|0);\n        $160=((HEAP16[(($159)>>1)])|0);\n        $161=($160&65535);\n        $162=$161<<16;\n        $163=$162|$158;\n        $164=(($pD_0_in59+20)|0);\n        $165=$164;\n        HEAP32[(($165)>>2)]=$163;\n        $166=(($alpha1_endpoints+($143<<2))|0);\n        $167=((HEAP32[(($166)>>2)])|0);\n        $168=((HEAP16[(($149)>>1)])|0);\n        $169=($168&65535);\n        $170=$169<<16;\n        $171=$170|$167;\n        $172=(($pD_0_in59+24)|0);\n        $173=$172;\n        HEAP32[(($173)>>2)]=$171;\n        $174=(($149+2)|0);\n        $175=((HEAP16[(($174)>>1)])|0);\n        $176=($175&65535);\n        $177=(($149+4)|0);\n        $178=((HEAP16[(($177)>>1)])|0);\n        $179=($178&65535);\n        $180=$179<<16;\n        $181=$180|$176;\n        $182=(($pD_0_in59+28)|0);\n        $183=$182;\n        HEAP32[(($183)>>2)]=$181;\n       }\n       $185=(($pD_0_in59+$row_pitch_in_bytes)|0);\n       $186=((($by_060)+(1))|0);\n       $187=($186>>>0)<((2)>>>0);\n       if ($187) {\n        $pD_0_in59=$185;$by_060=$186;\n       } else {\n        break;\n       }\n      }\n      $129=(($pBlock_162+$block_delta_0)|0);\n      $130=((($x_061)+($dir_x_0))|0);\n      $131=($130|0)==($end_x_0|0);\n      if ($131) {\n       $chunk_encoding_bits_2_lcssa=$43;\n       break;\n      } else {\n       $x_061=$130;$pBlock_162=$129;$chunk_encoding_bits_263=$43;\n      }\n     }\n    }\n\n    $132=(($pRow_066+$14)|0);\n    $133=((($y_065)+(1))|0);\n    $134=($133>>>0)<($chunks_y>>>0);\n    if ($134) {\n     $y_065=$133;$pRow_066=$132;$chunk_encoding_bits_167=$chunk_encoding_bits_2_lcssa;\n    } else {\n     $chunk_encoding_bits_1_lcssa=$chunk_encoding_bits_2_lcssa;\n     break;\n    }\n   }\n  }\n\n  $135=((($f_072)+(1))|0);\n  $136=($135>>>0)<($9>>>0);\n  if ($136) {\n   $f_072=$135;$chunk_encoding_bits_073=$chunk_encoding_bits_1_lcssa;\n  } else {\n   break;\n  }\n }\n STACKTOP=sp;return ((1)|0);\n}\n\n\nfunction __ZNK4crnd6vectorItE4sizeEv($this){\n $this=($this)|0;\n var $1=0,$2=0,label=0;\n\n $1=(($this+4)|0);\n $2=((HEAP32[(($1)>>2)])|0);\n return (($2)|0);\n}\n\n\nfunction __ZN4crnd12crn_unpacker5limitERjj($x,$n){\n $x=($x)|0;\n $n=($n)|0;\n var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,label=0;\n\n $1=((HEAP32[(($x)>>2)])|0);\n $2=((($1)-($n))|0);\n $3=$2>>31;\n $4=$3&$1;\n $5=$3^-1;\n $6=$2&$5;\n $7=$4|$6;\n HEAP32[(($x)>>2)]=$7;\n return;\n}\n\n\nfunction __ZN4crnd6vectorItEixEj($this,$i){\n $this=($this)|0;\n $i=($i)|0;\n var $1=0,$2=0,$3=0,$6=0,$7=0,$8=0,label=0;\n\n $1=(($this+4)|0);\n $2=((HEAP32[(($1)>>2)])|0);\n $3=($2>>>0)>($i>>>0);\n if (!($3)) {\n  __ZN4crnd11crnd_assertEPKcS1_j(312,488,906);\n }\n $6=(($this)|0);\n $7=((HEAP32[(($6)>>2)])|0);\n $8=(($7+($i<<1))|0);\n return (($8)|0);\n}\n\n\nfunction __ZNK4crnd6vectorIjE4sizeEv($this){\n $this=($this)|0;\n var $1=0,$2=0,label=0;\n\n $1=(($this+4)|0);\n $2=((HEAP32[(($1)>>2)])|0);\n return (($2)|0);\n}\n\n\nfunction __ZN4crnd6vectorIjEixEj($this,$i){\n $this=($this)|0;\n $i=($i)|0;\n var $1=0,$2=0,$3=0,$6=0,$7=0,$8=0,label=0;\n\n $1=(($this+4)|0);\n $2=((HEAP32[(($1)>>2)])|0);\n $3=($2>>>0)>($i>>>0);\n if (!($3)) {\n  __ZN4crnd11crnd_assertEPKcS1_j(312,488,906);\n }\n $6=(($this)|0);\n $7=((HEAP32[(($6)>>2)])|0);\n $8=(($7+($i<<2))|0);\n return (($8)|0);\n}\n\n\nfunction __ZN4crnd12crn_unpacker11init_tablesEv($this){\n $this=($this)|0;\n var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$13=0,$14=0,$16=0,$17=0,$18=0,$19=0,$21=0,$22=0,$23=0;\n var $25=0,$26=0,$27=0,$28=0,$30=0,$31=0,$33=0,$34=0,$36=0,$37=0,$38=0,$39=0,$41=0,$42=0,$44=0,$45=0,$_0=0,label=0;\n\n $1=(($this+92)|0);\n $2=(($this+4)|0);\n $3=((HEAP32[(($2)>>2)])|0);\n $4=(($this+88)|0);\n $5=((HEAP32[(($4)>>2)])|0);\n $6=(($5+67)|0);\n $7=((__ZNK4crnd15crn_packed_uintILj3EEcvjEv($6))|0);\n $8=(($3+$7)|0);\n $9=(($5+65)|0);\n $10=((__ZNK4crnd15crn_packed_uintILj2EEcvjEv($9))|0);\n $11=((__ZN4crnd12symbol_codec14start_decodingEPKhj($1,$8,$10))|0);\n if (!($11)) {\n  $_0=0;\n\n  return (($_0)|0);\n }\n $13=(($this+116)|0);\n $14=((__ZN4crnd12symbol_codec32decode_receive_static_data_modelERNS_25static_huffman_data_modelE($1,$13))|0);\n if (!($14)) {\n  $_0=0;\n\n  return (($_0)|0);\n }\n $16=((HEAP32[(($4)>>2)])|0);\n $17=(($16+39)|0);\n $18=((__ZNK4crnd15crn_packed_uintILj2EEcvjEv($17))|0);\n $19=($18|0)==0;\n do {\n  if ($19) {\n   $21=(($16+55)|0);\n   $22=((__ZNK4crnd15crn_packed_uintILj2EEcvjEv($21))|0);\n   $23=($22|0)==0;\n   if ($23) {\n    $_0=0;\n   } else {\n    break;\n   }\n\n   return (($_0)|0);\n  }\n } while(0);\n $25=((HEAP32[(($4)>>2)])|0);\n $26=(($25+39)|0);\n $27=((__ZNK4crnd15crn_packed_uintILj2EEcvjEv($26))|0);\n $28=($27|0)==0;\n do {\n  if (!($28)) {\n   $30=(($this+140)|0);\n   $31=((__ZN4crnd12symbol_codec32decode_receive_static_data_modelERNS_25static_huffman_data_modelE($1,$30))|0);\n   if (!($31)) {\n    $_0=0;\n\n    return (($_0)|0);\n   }\n   $33=(($this+188)|0);\n   $34=((__ZN4crnd12symbol_codec32decode_receive_static_data_modelERNS_25static_huffman_data_modelE($1,$33))|0);\n   if ($34) {\n    break;\n   } else {\n    $_0=0;\n   }\n\n   return (($_0)|0);\n  }\n } while(0);\n $36=((HEAP32[(($4)>>2)])|0);\n $37=(($36+55)|0);\n $38=((__ZNK4crnd15crn_packed_uintILj2EEcvjEv($37))|0);\n $39=($38|0)==0;\n do {\n  if (!($39)) {\n   $41=(($this+164)|0);\n   $42=((__ZN4crnd12symbol_codec32decode_receive_static_data_modelERNS_25static_huffman_data_modelE($1,$41))|0);\n   if (!($42)) {\n    $_0=0;\n\n    return (($_0)|0);\n   }\n   $44=(($this+212)|0);\n   $45=((__ZN4crnd12symbol_codec32decode_receive_static_data_modelERNS_25static_huffman_data_modelE($1,$44))|0);\n   if ($45) {\n    break;\n   } else {\n    $_0=0;\n   }\n\n   return (($_0)|0);\n  }\n } while(0);\n $_0=1;\n\n return (($_0)|0);\n}\n\n\nfunction __ZN4crnd12crn_unpacker15decode_palettesEv($this){\n $this=($this)|0;\n var $1=0,$2=0,$3=0,$4=0,$5=0,$7=0,$9=0,$11=0,$12=0,$13=0,$14=0,$16=0,$18=0,$_0=0,label=0;\n\n $1=(($this+88)|0);\n $2=((HEAP32[(($1)>>2)])|0);\n $3=(($2+39)|0);\n $4=((__ZNK4crnd15crn_packed_uintILj2EEcvjEv($3))|0);\n $5=($4|0)==0;\n do {\n  if (!($5)) {\n   $7=((__ZN4crnd12crn_unpacker22decode_color_endpointsEv($this))|0);\n   if (!($7)) {\n    $_0=0;\n\n    return (($_0)|0);\n   }\n   $9=((__ZN4crnd12crn_unpacker22decode_color_selectorsEv($this))|0);\n   if ($9) {\n    break;\n   } else {\n    $_0=0;\n   }\n\n   return (($_0)|0);\n  }\n } while(0);\n $11=((HEAP32[(($1)>>2)])|0);\n $12=(($11+55)|0);\n $13=((__ZNK4crnd15crn_packed_uintILj2EEcvjEv($12))|0);\n $14=($13|0)==0;\n do {\n  if (!($14)) {\n   $16=((__ZN4crnd12crn_unpacker22decode_alpha_endpointsEv($this))|0);\n   if (!($16)) {\n    $_0=0;\n\n    return (($_0)|0);\n   }\n   $18=((__ZN4crnd12crn_unpacker22decode_alpha_selectorsEv($this))|0);\n   if ($18) {\n    break;\n   } else {\n    $_0=0;\n   }\n\n   return (($_0)|0);\n  }\n } while(0);\n $_0=1;\n\n return (($_0)|0);\n}\n\n\nfunction __ZN4crnd12crn_unpacker22decode_color_endpointsEv($this){\n $this=($this)|0;\n var $dm=0,$1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$i_0=0;\n var $21=0,$23=0,$24=0,$26=0,$28=0,$29=0,$30=0,$a_028=0,$i1_027=0,$pDst_026=0,$f_025=0,$e_024=0,$d_023=0,$c_022=0,$b_021=0,$32=0,$33=0,$34=0,$35=0,$36=0;\n var $37=0,$38=0,$39=0,$40=0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0;\n var $57=0,$58=0,$59=0,$60=0,$61=0,$62=0,$_0=0,$63=0,$65=0,$_lcssa=0,$68=0,$69=0,$70=0,$71=0,$72=0,$74=0,$77=0,$79=0,$80=0,$81=0;\n var $_1=0,$_015=0,$_014=0,$82$0=0,$82$1=0,$83$0=0,$83$1=0,$67$0=0,$67$1=0,$76$0=0,$76$1=0,$lpad_loopexit$0=0,$lpad_loopexit$1=0,$lpad_nonloopexit$0=0,$lpad_nonloopexit$1=0,label=0;\n var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+48)|0;\n $dm=((sp)|0);\n $1=(($this+88)|0);\n $2=((HEAP32[(($1)>>2)])|0);\n $3=(($2+39)|0);\n $4=((__ZNK4crnd15crn_packed_uintILj2EEcvjEv($3))|0);\n $5=(($this+236)|0);\n $6=((__ZN4crnd6vectorIjE6resizeEj($5,$4))|0);\n if (!($6)) {\n  $_1=0;\n\n  STACKTOP=sp;return (($_1)|0);\n }\n $8=(($this+92)|0);\n $9=(($this+4)|0);\n $10=((HEAP32[(($9)>>2)])|0);\n $11=((HEAP32[(($1)>>2)])|0);\n $12=(($11+33)|0);\n $13=((__ZNK4crnd15crn_packed_uintILj3EEcvjEv($12))|0);\n $14=(($10+$13)|0);\n $15=(($11+36)|0);\n $16=((__ZNK4crnd15crn_packed_uintILj3EEcvjEv($15))|0);\n $17=((__ZN4crnd12symbol_codec14start_decodingEPKhj($8,$14,$16))|0);\n if (!($17)) {\n  $_1=0;\n\n  STACKTOP=sp;return (($_1)|0);\n }\n $18=(($dm)|0);\n __ZN4crnd25static_huffman_data_modelC2Ev($18);\n $19=(($dm+24)|0);\n __ZN4crnd25static_huffman_data_modelC2Ev($19);\n $i_0=0;\n while(1) {\n\n  $21=($i_0>>>0)<((2)>>>0);\n  if (!($21)) {\n   label = 7;\n   break;\n  }\n  $23=(($dm+((($i_0)*(24))&-1))|0);\n  $24=((__ZN4crnd12symbol_codec32decode_receive_static_data_modelERNS_25static_huffman_data_modelE($8,$23))|0);\n  $26=((($i_0)+(1))|0);\n  if ($24) {\n   $i_0=$26;\n  } else {\n   $_0=0;\n   break;\n  }\n }\n do {\n  if ((label|0) == 7) {\n   $28=((__ZN4crnd6vectorIjEixEj($5,0))|0);\n   $29=($4|0)==0;\n   if ($29) {\n    $_0=1;\n    break;\n   }\n   $30=(($dm+24)|0);\n   $b_021=0;$c_022=0;$d_023=0;$e_024=0;$f_025=0;$pDst_026=$28;$i1_027=0;$a_028=0;\n   while(1) {\n\n\n\n\n\n\n\n\n    $32=((__ZN4crnd12symbol_codec6decodeERKNS_25static_huffman_data_modelE($8,$18))|0);\n    $33=((($32)+($a_028))|0);\n    $34=$33&31;\n    $35=((__ZN4crnd12symbol_codec6decodeERKNS_25static_huffman_data_modelE($8,$30))|0);\n    $36=((($35)+($b_021))|0);\n    $37=$36&63;\n    $38=((__ZN4crnd12symbol_codec6decodeERKNS_25static_huffman_data_modelE($8,$18))|0);\n    $39=((($38)+($c_022))|0);\n    $40=$39&31;\n    $41=((__ZN4crnd12symbol_codec6decodeERKNS_25static_huffman_data_modelE($8,$18))|0);\n    $42=((($41)+($d_023))|0);\n    $43=$42&31;\n    $44=((__ZN4crnd12symbol_codec6decodeERKNS_25static_huffman_data_modelE($8,$30))|0);\n    $45=((($44)+($e_024))|0);\n    $46=$45&63;\n    $47=((__ZN4crnd12symbol_codec6decodeERKNS_25static_huffman_data_modelE($8,$18))|0);\n    $48=((($47)+($f_025))|0);\n    $49=$48&31;\n    $50=$37<<5;\n    $51=$34<<11;\n    $52=$49<<16;\n    $53=$46<<21;\n    $54=$42<<27;\n    $55=$50|$51;\n    $56=$55|$40;\n    $57=$56|$54;\n    $58=$57|$53;\n    $59=$58|$52;\n    $60=(($pDst_026+4)|0);\n    HEAP32[(($pDst_026)>>2)]=$59;\n    $61=((($i1_027)+(1))|0);\n    $62=($61>>>0)<($4>>>0);\n    if ($62) {\n     $b_021=$37;$c_022=$40;$d_023=$43;$e_024=$46;$f_025=$49;$pDst_026=$60;$i1_027=$61;$a_028=$34;\n    } else {\n     $_0=1;\n     break;\n    }\n   }\n  }\n } while(0);\n\n $63=(($dm+24)|0);\n __ZN4crnd25static_huffman_data_modelD2Ev($63);\n $65=(($dm)|0);\n __ZN4crnd25static_huffman_data_modelD2Ev($65);\n $_1=$_0;\n\n STACKTOP=sp;return (($_1)|0);\n}\n\n\nfunction __ZN4crnd12crn_unpacker22decode_color_selectorsEv($this){\n $this=($this)|0;\n var $dm=0,$delta0=0,$delta1=0,$cur=0,$1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$15=0,$i_038=0,$m_037=0;\n var $l_036=0,$19=0,$20=0,$21=0,$22=0,$_=0,$23=0,$_m_0=0,$24=0,$25=0,$27=0,$28=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0;\n var $39=0,$40=0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$i1_034=0,$pDst_033=0,$j_032=0,$50=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0;\n var $57=0,$58=0,$59=0,$60=0,$61=0,$62=0,$63=0,$64=0,$65=0,$66=0,$68=0,$69=0,$70=0,$71=0,$72=0,$73=0,$74=0,$75=0,$76=0,$77=0;\n var $78=0,$79=0,$80=0,$81=0,$82=0,$83=0,$84=0,$85=0,$86=0,$87=0,$88=0,$89=0,$90=0,$91=0,$92=0,$93=0,$94=0,$95=0,$96=0,$97=0;\n var $98=0,$99=0,$100=0,$101=0,$102=0,$103=0,$104=0,$105=0,$106=0,$107=0,$108=0,$109=0,$110=0,$111=0,$112=0,$113=0,$114=0,$115=0,$116=0,$117=0;\n var $118=0,$119=0,$120=0,$121=0,$122=0,$123=0,$124=0,$125=0,$126=0,$127=0,$128=0,$129=0,$130=0,$131=0,$132=0,$133=0,$134=0,$135=0,$136=0,$137=0;\n var $138=0,$139=0,$140=0,$141=0,$142=0,$143=0,$144=0,$145=0,$146=0,$147=0,$148=0,$149=0,$150=0,$151=0,$152=0,$153=0,$154=0,$155=0,$156=0,$157=0;\n var $158=0,$159=0,$160=0,$161=0,$162=0,$163=0,$164=0,$_0=0,$_1=0,$18$0=0,$18$1=0,$168$0=0,$168$1=0,label=0;\n var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+488)|0;\n $dm=((sp)|0);\n $delta0=(((sp)+(24))|0);\n $delta1=(((sp)+(224))|0);\n $cur=(((sp)+(424))|0);\n $1=(($this+88)|0);\n $2=((HEAP32[(($1)>>2)])|0);\n $3=(($2+47)|0);\n $4=((__ZNK4crnd15crn_packed_uintILj2EEcvjEv($3))|0);\n $5=(($this+92)|0);\n $6=(($this+4)|0);\n $7=((HEAP32[(($6)>>2)])|0);\n $8=(($2+41)|0);\n $9=((__ZNK4crnd15crn_packed_uintILj3EEcvjEv($8))|0);\n $10=(($7+$9)|0);\n $11=(($2+44)|0);\n $12=((__ZNK4crnd15crn_packed_uintILj3EEcvjEv($11))|0);\n $13=((__ZN4crnd12symbol_codec14start_decodingEPKhj($5,$10,$12))|0);\n if (!($13)) {\n  $_1=0;\n\n  STACKTOP=sp;return (($_1)|0);\n }\n __ZN4crnd25static_huffman_data_modelC2Ev($dm);\n $15=((__ZN4crnd12symbol_codec32decode_receive_static_data_modelERNS_25static_huffman_data_modelE($5,$dm))|0);\n do {\n  if ($15) {\n   $l_036=-3;$m_037=-3;$i_038=0;\n   while(1) {\n\n\n\n    $19=(($delta0+($i_038<<2))|0);\n    HEAP32[(($19)>>2)]=$l_036;\n    $20=(($delta1+($i_038<<2))|0);\n    HEAP32[(($20)>>2)]=$m_037;\n    $21=((($l_036)+(1))|0);\n    $22=($21|0)>3;\n    $_=($22?-3:$21);\n    $23=($22&1);\n    $_m_0=((($23)+($m_037))|0);\n    $24=((($i_038)+(1))|0);\n    $25=($24>>>0)<((49)>>>0);\n    if ($25) {\n     $l_036=$_;$m_037=$_m_0;$i_038=$24;\n    } else {\n     break;\n    }\n   }\n   __ZN4crnd5utils11zero_objectIA16_jEEvRT_($cur);\n   $27=(($this+252)|0);\n   $28=((__ZN4crnd6vectorIjE6resizeEj($27,$4))|0);\n   if (!($28)) {\n    $_0=0;\n    break;\n   }\n   $31=((__ZN4crnd6vectorIjEixEj($27,0))|0);\n   $32=($4|0)==0;\n   if ($32) {\n    $_0=1;\n    break;\n   }\n   $33=(($cur)|0);\n   $34=(($cur+4)|0);\n   $35=(($cur+8)|0);\n   $36=(($cur+12)|0);\n   $37=(($cur+16)|0);\n   $38=(($cur+20)|0);\n   $39=(($cur+24)|0);\n   $40=(($cur+28)|0);\n   $41=(($cur+32)|0);\n   $42=(($cur+36)|0);\n   $43=(($cur+40)|0);\n   $44=(($cur+44)|0);\n   $45=(($cur+48)|0);\n   $46=(($cur+52)|0);\n   $47=(($cur+56)|0);\n   $48=(($cur+60)|0);\n   $pDst_033=$31;$i1_034=0;\n   while(1) {\n\n\n    $j_032=0;\n    while(1) {\n\n     $50=((__ZN4crnd12symbol_codec6decodeERKNS_25static_huffman_data_modelE($5,$dm))|0);\n     $51=(($delta0+($50<<2))|0);\n     $52=((HEAP32[(($51)>>2)])|0);\n     $53=$j_032<<1;\n     $54=(($cur+($53<<2))|0);\n     $55=((HEAP32[(($54)>>2)])|0);\n     $56=((($55)+($52))|0);\n     $57=$56&3;\n     HEAP32[(($54)>>2)]=$57;\n     $58=(($delta1+($50<<2))|0);\n     $59=((HEAP32[(($58)>>2)])|0);\n     $60=$53|1;\n     $61=(($cur+($60<<2))|0);\n     $62=((HEAP32[(($61)>>2)])|0);\n     $63=((($62)+($59))|0);\n     $64=$63&3;\n     HEAP32[(($61)>>2)]=$64;\n     $65=((($j_032)+(1))|0);\n     $66=($65>>>0)<((8)>>>0);\n     if ($66) {\n      $j_032=$65;\n     } else {\n      break;\n     }\n    }\n    $68=((HEAP32[(($33)>>2)])|0);\n    $69=((944+$68)|0);\n    $70=((HEAP8[($69)])|0);\n    $71=($70&255);\n    $72=((HEAP32[(($34)>>2)])|0);\n    $73=((944+$72)|0);\n    $74=((HEAP8[($73)])|0);\n    $75=($74&255);\n    $76=$75<<2;\n    $77=$76|$71;\n    $78=((HEAP32[(($35)>>2)])|0);\n    $79=((944+$78)|0);\n    $80=((HEAP8[($79)])|0);\n    $81=($80&255);\n    $82=$81<<4;\n    $83=$77|$82;\n    $84=((HEAP32[(($36)>>2)])|0);\n    $85=((944+$84)|0);\n    $86=((HEAP8[($85)])|0);\n    $87=($86&255);\n    $88=$87<<6;\n    $89=$83|$88;\n    $90=((HEAP32[(($37)>>2)])|0);\n    $91=((944+$90)|0);\n    $92=((HEAP8[($91)])|0);\n    $93=($92&255);\n    $94=$93<<8;\n    $95=$89|$94;\n    $96=((HEAP32[(($38)>>2)])|0);\n    $97=((944+$96)|0);\n    $98=((HEAP8[($97)])|0);\n    $99=($98&255);\n    $100=$99<<10;\n    $101=$95|$100;\n    $102=((HEAP32[(($39)>>2)])|0);\n    $103=((944+$102)|0);\n    $104=((HEAP8[($103)])|0);\n    $105=($104&255);\n    $106=$105<<12;\n    $107=$101|$106;\n    $108=((HEAP32[(($40)>>2)])|0);\n    $109=((944+$108)|0);\n    $110=((HEAP8[($109)])|0);\n    $111=($110&255);\n    $112=$111<<14;\n    $113=$107|$112;\n    $114=((HEAP32[(($41)>>2)])|0);\n    $115=((944+$114)|0);\n    $116=((HEAP8[($115)])|0);\n    $117=($116&255);\n    $118=$117<<16;\n    $119=$113|$118;\n    $120=((HEAP32[(($42)>>2)])|0);\n    $121=((944+$120)|0);\n    $122=((HEAP8[($121)])|0);\n    $123=($122&255);\n    $124=$123<<18;\n    $125=$119|$124;\n    $126=((HEAP32[(($43)>>2)])|0);\n    $127=((944+$126)|0);\n    $128=((HEAP8[($127)])|0);\n    $129=($128&255);\n    $130=$129<<20;\n    $131=$125|$130;\n    $132=((HEAP32[(($44)>>2)])|0);\n    $133=((944+$132)|0);\n    $134=((HEAP8[($133)])|0);\n    $135=($134&255);\n    $136=$135<<22;\n    $137=$131|$136;\n    $138=((HEAP32[(($45)>>2)])|0);\n    $139=((944+$138)|0);\n    $140=((HEAP8[($139)])|0);\n    $141=($140&255);\n    $142=$141<<24;\n    $143=$137|$142;\n    $144=((HEAP32[(($46)>>2)])|0);\n    $145=((944+$144)|0);\n    $146=((HEAP8[($145)])|0);\n    $147=($146&255);\n    $148=$147<<26;\n    $149=$143|$148;\n    $150=((HEAP32[(($47)>>2)])|0);\n    $151=((944+$150)|0);\n    $152=((HEAP8[($151)])|0);\n    $153=($152&255);\n    $154=$153<<28;\n    $155=$149|$154;\n    $156=((HEAP32[(($48)>>2)])|0);\n    $157=((944+$156)|0);\n    $158=((HEAP8[($157)])|0);\n    $159=($158&255);\n    $160=$159<<30;\n    $161=$155|$160;\n    $162=(($pDst_033+4)|0);\n    HEAP32[(($pDst_033)>>2)]=$161;\n    $163=((($i1_034)+(1))|0);\n    $164=($163>>>0)<($4>>>0);\n    if ($164) {\n     $pDst_033=$162;$i1_034=$163;\n    } else {\n     $_0=1;\n     break;\n    }\n   }\n  } else {\n   $_0=0;\n  }\n } while(0);\n\n __ZN4crnd25static_huffman_data_modelD2Ev($dm);\n $_1=$_0;\n\n STACKTOP=sp;return (($_1)|0);\n}\n\n\nfunction __ZN4crnd12crn_unpacker22decode_alpha_endpointsEv($this){\n $this=($this)|0;\n var $dm=0,$1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$15=0,$20=0,$21=0,$24=0,$25=0,$i_011=0;\n var $b_010=0,$a_09=0,$pDst_08=0,$26=0,$27=0,$28=0,$29=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$_0=0,$_1=0,$18$0=0,$18$1=0,$41$0=0;\n var $41$1=0,label=0;\n var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+24)|0;\n $dm=((sp)|0);\n $1=(($this+88)|0);\n $2=((HEAP32[(($1)>>2)])|0);\n $3=(($2+55)|0);\n $4=((__ZNK4crnd15crn_packed_uintILj2EEcvjEv($3))|0);\n $5=(($this+92)|0);\n $6=(($this+4)|0);\n $7=((HEAP32[(($6)>>2)])|0);\n $8=(($2+49)|0);\n $9=((__ZNK4crnd15crn_packed_uintILj3EEcvjEv($8))|0);\n $10=(($7+$9)|0);\n $11=(($2+52)|0);\n $12=((__ZNK4crnd15crn_packed_uintILj3EEcvjEv($11))|0);\n $13=((__ZN4crnd12symbol_codec14start_decodingEPKhj($5,$10,$12))|0);\n if (!($13)) {\n  $_1=0;\n\n  STACKTOP=sp;return (($_1)|0);\n }\n __ZN4crnd25static_huffman_data_modelC2Ev($dm);\n $15=((__ZN4crnd12symbol_codec32decode_receive_static_data_modelERNS_25static_huffman_data_modelE($5,$dm))|0);\n do {\n  if ($15) {\n   $20=(($this+268)|0);\n   $21=((__ZN4crnd6vectorItE6resizeEj($20,$4))|0);\n   if (!($21)) {\n    $_0=0;\n    break;\n   }\n   $24=((__ZN4crnd6vectorItEixEj($20,0))|0);\n   $25=($4|0)==0;\n   if ($25) {\n    $_0=1;\n    break;\n   } else {\n    $pDst_08=$24;$a_09=0;$b_010=0;$i_011=0;\n   }\n   while(1) {\n\n\n\n\n    $26=((__ZN4crnd12symbol_codec6decodeERKNS_25static_huffman_data_modelE($5,$dm))|0);\n    $27=((__ZN4crnd12symbol_codec6decodeERKNS_25static_huffman_data_modelE($5,$dm))|0);\n    $28=((($26)+($a_09))|0);\n    $29=$28&255;\n    $30=((($27)+($b_010))|0);\n    $31=$30&255;\n    $32=$31<<8;\n    $33=$32|$29;\n    $34=(($33)&65535);\n    $35=(($pDst_08+2)|0);\n    HEAP16[(($pDst_08)>>1)]=$34;\n    $36=((($i_011)+(1))|0);\n    $37=($36>>>0)<($4>>>0);\n    if ($37) {\n     $pDst_08=$35;$a_09=$29;$b_010=$31;$i_011=$36;\n    } else {\n     $_0=1;\n     break;\n    }\n   }\n  } else {\n   $_0=0;\n  }\n } while(0);\n\n __ZN4crnd25static_huffman_data_modelD2Ev($dm);\n $_1=$_0;\n\n STACKTOP=sp;return (($_1)|0);\n}\n\n\nfunction __ZN4crnd12crn_unpacker22decode_alpha_selectorsEv($this){\n $this=($this)|0;\n var $dm=0,$delta0=0,$delta1=0,$cur=0,$1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$15=0,$i_042=0,$m_041=0;\n var $l_040=0,$19=0,$20=0,$21=0,$22=0,$_=0,$23=0,$_m_0=0,$24=0,$25=0,$27=0,$28=0,$29=0,$32=0,$33=0,$34=0,$35=0,$36=0,$37=0,$38=0;\n var $39=0,$40=0,$41=0,$42=0,$43=0,$44=0,$45=0,$46=0,$47=0,$48=0,$49=0,$i1_038=0,$pDst_037=0,$j_036=0,$51=0,$52=0,$53=0,$54=0,$55=0,$56=0;\n var $57=0,$58=0,$59=0,$60=0,$61=0,$62=0,$63=0,$64=0,$65=0,$66=0,$67=0,$69=0,$70=0,$71=0,$72=0,$73=0,$74=0,$75=0,$76=0,$77=0;\n var $78=0,$79=0,$80=0,$81=0,$82=0,$83=0,$84=0,$85=0,$86=0,$87=0,$88=0,$89=0,$90=0,$91=0,$92=0,$93=0,$94=0,$95=0,$96=0,$97=0;\n var $98=0,$99=0,$100=0,$101=0,$102=0,$103=0,$104=0,$105=0,$106=0,$107=0,$108=0,$109=0,$110=0,$111=0,$112=0,$113=0,$114=0,$115=0,$116=0,$117=0;\n var $118=0,$119=0,$120=0,$121=0,$122=0,$123=0,$124=0,$125=0,$126=0,$127=0,$128=0,$129=0,$130=0,$131=0,$132=0,$133=0,$134=0,$135=0,$136=0,$137=0;\n var $138=0,$139=0,$140=0,$141=0,$142=0,$143=0,$144=0,$145=0,$146=0,$147=0,$148=0,$149=0,$150=0,$151=0,$152=0,$153=0,$154=0,$155=0,$156=0,$157=0;\n var $158=0,$159=0,$160=0,$161=0,$162=0,$163=0,$164=0,$165=0,$166=0,$167=0,$168=0,$169=0,$170=0,$171=0,$172=0,$173=0,$174=0,$175=0,$176=0,$177=0;\n var $_0=0,$_1=0,$18$0=0,$18$1=0,$181$0=0,$181$1=0,label=0;\n var sp=0;sp=STACKTOP;STACKTOP=(STACKTOP+1896)|0;\n $dm=((sp)|0);\n $delta0=(((sp)+(24))|0);\n $delta1=(((sp)+(928))|0);\n $cur=(((sp)+(1832))|0);\n $1=(($this+88)|0);\n $2=((HEAP32[(($1)>>2)])|0);\n $3=(($2+63)|0);\n $4=((__ZNK4crnd15crn_packed_uintILj2EEcvjEv($3))|0);\n $5=(($this+92)|0);\n $6=(($this+4)|0);\n $7=((HEAP32[(($6)>>2)])|0);\n $8=(($2+57)|0);\n $9=((__ZNK4crnd15crn_packed_uintILj3EEcvjEv($8))|0);\n $10=(($7+$9)|0);\n $11=(($2+60)|0);\n $12=((__ZNK4crnd15crn_packed_uintILj3EEcvjEv($11))|0);\n $13=((__ZN4crnd12symbol_codec14start_decodingEPKhj($5,$10,$12))|0);\n if (!($13)) {\n  $_1=0;\n\n  STACKTOP=sp;return (($_1)|0);\n }\n __ZN4crnd25static_huffman_data_modelC2Ev($dm);\n $15=((__ZN4crnd12symbol_codec32decode_receive_static_data_modelERNS_25static_huffman_data_modelE($5,$dm))|0);\n do {\n  if ($15) {\n   $l_040=-7;$m_041=-7;$i_042=0;\n   while(1) {\n\n\n\n    $19=(($delta0+($i_042<<2))|0);\n    HEAP32[(($19)>>2)]=$l_040;\n    $20=(($delta1+($i_042<<2))|0);\n    HEAP32[(($20)>>2)]=$m_041;\n    $21=((($l_040)+(1))|0);\n    $22=($21|0)>7;\n    $_=($22?-7:$21);\n    $23=($22&1);\n    $_m_0=((($23)+($m_041))|0);\n    $24=((($i_042)+(1))|0);\n    $25=($24>>>0)<((225)>>>0);\n    if ($25) {\n     $l_040=$_;$m_041=$_m_0;$i_042=$24;\n    } else {\n     break;\n    }\n   }\n   __ZN4crnd5utils11zero_objectIA16_jEEvRT_($cur);\n   $27=(($this+284)|0);\n   $28=((($4)*(3))&-1);\n   $29=((__ZN4crnd6vectorItE6resizeEj($27,$28))|0);\n   if (!($29)) {\n    $_0=0;\n    break;\n   }\n   $32=((__ZN4crnd6vectorItEixEj($27,0))|0);\n   $33=($4|0)==0;\n   if ($33) {\n    $_0=1;\n    break;\n   }\n   $34=(($cur)|0);\n   $35=(($cur+4)|0);\n   $36=(($cur+8)|0);\n   $37=(($cur+12)|0);\n   $38=(($cur+16)|0);\n   $39=(($cur+20)|0);\n   $40=(($cur+24)|0);\n   $41=(($cur+28)|0);\n   $42=(($cur+32)|0);\n   $43=(($cur+36)|0);\n   $44=(($cur+40)|0);\n   $45=(($cur+44)|0);\n   $46=(($cur+48)|0);\n   $47=(($cur+52)|0);\n   $48=(($cur+56)|0);\n   $49=(($cur+60)|0);\n   $pDst_037=$32;$i1_038=0;\n   while(1) {\n\n\n    $j_036=0;\n    while(1) {\n\n     $51=((__ZN4crnd12symbol_codec6decodeERKNS_25static_huffman_data_modelE($5,$dm))|0);\n     $52=(($delta0+($51<<2))|0);\n     $53=((HEAP32[(($52)>>2)])|0);\n     $54=$j_036<<1;\n     $55=(($cur+($54<<2))|0);\n     $56=((HEAP32[(($55)>>2)])|0);\n     $57=((($56)+($53))|0);\n     $58=$57&7;\n     HEAP32[(($55)>>2)]=$58;\n     $59=(($delta1+($51<<2))|0);\n     $60=((HEAP32[(($59)>>2)])|0);\n     $61=$54|1;\n     $62=(($cur+($61<<2))|0);\n     $63=((HEAP32[(($62)>>2)])|0);\n     $64=((($63)+($60))|0);\n     $65=$64&7;\n     HEAP32[(($62)>>2)]=$65;\n     $66=((($j_036)+(1))|0);\n     $67=($66>>>0)<((8)>>>0);\n     if ($67) {\n      $j_036=$66;\n     } else {\n      break;\n     }\n    }\n    $69=((HEAP32[(($34)>>2)])|0);\n    $70=((936+$69)|0);\n    $71=((HEAP8[($70)])|0);\n    $72=($71&255);\n    $73=((HEAP32[(($35)>>2)])|0);\n    $74=((936+$73)|0);\n    $75=((HEAP8[($74)])|0);\n    $76=($75&255);\n    $77=$76<<3;\n    $78=$77|$72;\n    $79=((HEAP32[(($36)>>2)])|0);\n    $80=((936+$79)|0);\n    $81=((HEAP8[($80)])|0);\n    $82=($81&255);\n    $83=$82<<6;\n    $84=$78|$83;\n    $85=((HEAP32[(($37)>>2)])|0);\n    $86=((936+$85)|0);\n    $87=((HEAP8[($86)])|0);\n    $88=($87&255);\n    $89=$88<<9;\n    $90=$84|$89;\n    $91=((HEAP32[(($38)>>2)])|0);\n    $92=((936+$91)|0);\n    $93=((HEAP8[($92)])|0);\n    $94=($93&255);\n    $95=$94<<12;\n    $96=$90|$95;\n    $97=((HEAP32[(($39)>>2)])|0);\n    $98=((936+$97)|0);\n    $99=((HEAP8[($98)])|0);\n    $100=($99&255);\n    $101=$100<<15;\n    $102=$96|$101;\n    $103=(($pDst_037+2)|0);\n    HEAP16[(($pDst_037)>>1)]=$102;\n    $104=((HEAP32[(($39)>>2)])|0);\n    $105=((936+$104)|0);\n    $106=((HEAP8[($105)])|0);\n    $107=($106&255);\n    $108=($107&65535)>>>1;\n    $109=((HEAP32[(($40)>>2)])|0);\n    $110=((936+$109)|0);\n    $111=((HEAP8[($110)])|0);\n    $112=($111&255);\n    $113=$112<<2;\n    $114=$113|$108;\n    $115=((HEAP32[(($41)>>2)])|0);\n    $116=((936+$115)|0);\n    $117=((HEAP8[($116)])|0);\n    $118=($117&255);\n    $119=$118<<5;\n    $120=$114|$119;\n    $121=((HEAP32[(($42)>>2)])|0);\n    $122=((936+$121)|0);\n    $123=((HEAP8[($122)])|0);\n    $124=($123&255);\n    $125=$124<<8;\n    $126=$120|$125;\n    $127=((HEAP32[(($43)>>2)])|0);\n    $128=((936+$127)|0);\n    $129=((HEAP8[($128)])|0);\n    $130=($129&255);\n    $131=$130<<11;\n    $132=$126|$131;\n    $133=((HEAP32[(($44)>>2)])|0);\n    $134=((936+$133)|0);\n    $135=((HEAP8[($134)])|0);\n    $136=($135&255);\n    $137=$136<<14;\n    $138=$132|$137;\n    $139=(($pDst_037+4)|0);\n    HEAP16[(($103)>>1)]=$138;\n    $140=((HEAP32[(($44)>>2)])|0);\n    $141=((936+$140)|0);\n    $142=((HEAP8[($141)])|0);\n    $143=($142&255);\n    $144=($143&65535)>>>2;\n    $145=((HEAP32[(($45)>>2)])|0);\n    $146=((936+$145)|0);\n    $147=((HEAP8[($146)])|0);\n    $148=($147&255);\n    $149=$148<<1;\n    $150=$149|$144;\n    $151=((HEAP32[(($46)>>2)])|0);\n    $152=((936+$151)|0);\n    $153=((HEAP8[($152)])|0);\n    $154=($153&255);\n    $155=$154<<4;\n    $156=$150|$155;\n    $157=((HEAP32[(($47)>>2)])|0);\n    $158=((936+$157)|0);\n    $159=((HEAP8[($158)])|0);\n    $160=($159&255);\n    $161=$160<<7;\n    $162=$156|$161;\n    $163=((HEAP32[(($48)>>2)])|0);\n    $164=((936+$163)|0);\n    $165=((HEAP8[($164)])|0);\n    $166=($165&255);\n    $167=$166<<10;\n    $168=$162|$167;\n    $169=((HEAP32[(($49)>>2)])|0);\n    $170=((936+$169)|0);\n    $171=((HEAP8[($170)])|0);\n    $172=($171&255);\n    $173=$172<<13;\n    $174=$168|$173;\n    $175=(($pDst_037+6)|0);\n    HEAP16[(($139)>>1)]=$174;\n    $176=((($i1_038)+(1))|0);\n    $177=($176>>>0)<($4>>>0);\n    if ($177) {\n     $pDst_037=$175;$i1_038=$176;\n    } else {\n     $_0=1;\n     break;\n    }\n   }\n  } else {\n   $_0=0;\n  }\n } while(0);\n\n __ZN4crnd25static_huffman_data_modelD2Ev($dm);\n $_1=$_0;\n\n STACKTOP=sp;return (($_1)|0);\n}\n\n\nfunction __ZN4crnd5utils11zero_objectIA16_jEEvRT_($obj){\n $obj=($obj)|0;\n var $1=0,label=0;\n\n $1=$obj;\n _memset((((($1)|0))|0), ((((0)|0))|0), ((((64)|0))|0))|0;\n return;\n}\n\n\nfunction __ZN4crnd6vectorItE6resizeEj($this,$new_size){\n $this=($this)|0;\n $new_size=($new_size)|0;\n var $1=0,$2=0,$3=0,$5=0,$7=0,$8=0,$9=0,$11=0,$12=0,$13=0,$15=0,$16=0,$17=0,$18=0,$19=0,$_0=0,label=0;\n\n $1=(($this+4)|0);\n $2=((HEAP32[(($1)>>2)])|0);\n $3=($2|0)==($new_size|0);\n if ($3) {\n  $_0=1;\n\n  return (($_0)|0);\n }\n $5=($2>>>0)>($new_size>>>0);\n if (!($5)) {\n  $7=(($this+8)|0);\n  $8=((HEAP32[(($7)>>2)])|0);\n  $9=($8>>>0)<($new_size>>>0);\n  do {\n   if ($9) {\n    $11=((($2)+(1))|0);\n    $12=($11|0)==($new_size|0);\n    $13=((__ZN4crnd6vectorItE17increase_capacityEjb($this,$new_size,$12))|0);\n    if ($13) {\n     break;\n    } else {\n     $_0=0;\n    }\n\n    return (($_0)|0);\n   }\n  } while(0);\n  $15=(($this)|0);\n  $16=((HEAP32[(($15)>>2)])|0);\n  $17=((HEAP32[(($1)>>2)])|0);\n  $18=(($16+($17<<1))|0);\n  $19=((($new_size)-($17))|0);\n  __ZN4crnd11scalar_typeItE15construct_arrayEPtj($18,$19);\n }\n HEAP32[(($1)>>2)]=$new_size;\n $_0=1;\n\n return (($_0)|0);\n}\n\n\nfunction __ZN4crnd6vectorItE17increase_capacityEjb($this,$min_new_capacity,$grow_hint){\n $this=($this)|0;\n $min_new_capacity=($min_new_capacity)|0;\n $grow_hint=($grow_hint)|0;\n var $1=0,$2=0,$4=0,$_0=0,label=0;\n\n $1=$this;\n $2=((__ZN4crnd16elemental_vector17increase_capacityEjbjPFvPvS1_jE($1,$min_new_capacity,$grow_hint,2,0))|0);\n if ($2) {\n  $_0=1;\n\n  return (($_0)|0);\n }\n $4=(($this+12)|0);\n HEAP8[($4)]=1;\n $_0=0;\n\n return (($_0)|0);\n}\n\n\nfunction __ZN4crnd11scalar_typeItE15construct_arrayEPtj($p,$n){\n $p=($p)|0;\n $n=($n)|0;\n var $1=0,$2=0,label=0;\n\n $1=$p;\n $2=$n<<1;\n _memset((((($1)|0))|0), ((((0)|0))|0), (((($2)|0))|0))|0;\n return;\n}\n\n\nfunction __ZN4crnd6vectorIjE6resizeEj($this,$new_size){\n $this=($this)|0;\n $new_size=($new_size)|0;\n var $1=0,$2=0,$3=0,$5=0,$7=0,$8=0,$9=0,$11=0,$12=0,$13=0,$15=0,$16=0,$17=0,$18=0,$19=0,$_0=0,label=0;\n\n $1=(($this+4)|0);\n $2=((HEAP32[(($1)>>2)])|0);\n $3=($2|0)==($new_size|0);\n if ($3) {\n  $_0=1;\n\n  return (($_0)|0);\n }\n $5=($2>>>0)>($new_size>>>0);\n if (!($5)) {\n  $7=(($this+8)|0);\n  $8=((HEAP32[(($7)>>2)])|0);\n  $9=($8>>>0)<($new_size>>>0);\n  do {\n   if ($9) {\n    $11=((($2)+(1))|0);\n    $12=($11|0)==($new_size|0);\n    $13=((__ZN4crnd6vectorIjE17increase_capacityEjb($this,$new_size,$12))|0);\n    if ($13) {\n     break;\n    } else {\n     $_0=0;\n    }\n\n    return (($_0)|0);\n   }\n  } while(0);\n  $15=(($this)|0);\n  $16=((HEAP32[(($15)>>2)])|0);\n  $17=((HEAP32[(($1)>>2)])|0);\n  $18=(($16+($17<<2))|0);\n  $19=((($new_size)-($17))|0);\n  __ZN4crnd11scalar_typeIjE15construct_arrayEPjj($18,$19);\n }\n HEAP32[(($1)>>2)]=$new_size;\n $_0=1;\n\n return (($_0)|0);\n}\n\n\nfunction __ZN4crnd6vectorIjE17increase_capacityEjb($this,$min_new_capacity,$grow_hint){\n $this=($this)|0;\n $min_new_capacity=($min_new_capacity)|0;\n $grow_hint=($grow_hint)|0;\n var $1=0,$2=0,$4=0,$_0=0,label=0;\n\n $1=$this;\n $2=((__ZN4crnd16elemental_vector17increase_capacityEjbjPFvPvS1_jE($1,$min_new_capacity,$grow_hint,4,0))|0);\n if ($2) {\n  $_0=1;\n\n  return (($_0)|0);\n }\n $4=(($this+12)|0);\n HEAP8[($4)]=1;\n $_0=0;\n\n return (($_0)|0);\n}\n\n\nfunction __ZN4crnd11scalar_typeIjE15construct_arrayEPjj($p,$n){\n $p=($p)|0;\n $n=($n)|0;\n var $1=0,$2=0,label=0;\n\n $1=$p;\n $2=$n<<2;\n _memset((((($1)|0))|0), ((((0)|0))|0), (((($2)|0))|0))|0;\n return;\n}\n\n\nfunction __ZN4crnd4math11floor_log2iEj($v){\n $v=($v)|0;\n var $1=0,$l_04=0,$_03=0,$2=0,$3=0,$4=0,$l_0_lcssa=0,label=0;\n\n $1=($v>>>0)>((1)>>>0);\n if ($1) {\n  $_03=$v;$l_04=0;\n  while(1) {\n\n\n   $2=$_03>>>1;\n   $3=((($l_04)+(1))|0);\n   $4=($_03>>>0)>((3)>>>0);\n   if ($4) {\n    $_03=$2;$l_04=$3;\n   } else {\n    $l_0_lcssa=$3;\n    break;\n   }\n  }\n } else {\n  $l_0_lcssa=0;\n }\n\n return (($l_0_lcssa)|0);\n}\n\n\nfunction _malloc($bytes){\n $bytes=($bytes)|0;\n var $1=0,$3=0,$5=0,$6=0,$8=0,$9=0,$10=0,$11=0,$12=0,$13=0,$15=0,$16=0,$17=0,$18=0,$19=0,$20=0,$_sum111=0,$21=0,$22=0,$23=0;\n var $24=0,$25=0,$27=0,$28=0,$29=0,$31=0,$32=0,$33=0,$35=0,$36=0,$37=0,$40=0,$41=0,$42=0,$43=0,$_sum113114=0,$44=0,$45=0,$46=0,$47=0;\n var $48=0,$50=0,$51=0,$53=0,$55=0,$56=0,$57=0,$58=0,$59=0,$60=0,$61=0,$62=0,$63=0,$64=0,$65=0,$66=0,$67=0,$68=0,$69=0,$70=0;\n var $71=0,$72=0,$73=0,$74=0,$75=0,$76=0,$77=0,$78=0,$79=0,$80=0,$81=0,$82=0,$83=0,$84=0,$85=0,$_sum104=0,$86=0,$87=0,$88=0,$89=0;\n var $90=0,$92=0,$93=0,$94=0,$96=0,$97=0,$98=0,$100=0,$101=0,$102=0,$105=0,$106=0,$107=0,$108=0,$109=0,$110=0,$111=0,$112=0,$_sum106107=0,$113=0;\n var $114=0,$115=0,$116=0,$117=0,$118=0,$120=0,$121=0,$122=0,$123=0,$124=0,$125=0,$126=0,$127=0,$128=0,$130=0,$_sum109_pre=0,$_pre=0,$_sum110=0,$132=0,$133=0;\n var $134=0,$135=0,$136=0,$_pre_phi=0,$F4_0=0,$139=0,$140=0,$141=0,$143=0,$145=0,$146=0,$148=0,$149=0,$150=0,$151=0,$152=0,$153=0,$154=0,$155=0,$156=0;\n var $157=0,$158=0,$159=0,$160=0,$161=0,$162=0,$163=0,$164=0,$165=0,$166=0,$167=0,$168=0,$169=0,$170=0,$171=0,$172=0,$173=0,$174=0,$175=0,$176=0;\n var $rsize_0_i=0,$v_0_i=0,$t_0_i=0,$178=0,$179=0,$180=0,$182=0,$183=0,$184=0,$185=0,$186=0,$187=0,$188=0,$189=0,$190=0,$_rsize_0_i=0,$_v_0_i=0,$192=0,$193=0,$194=0;\n var $196=0,$197=0,$198=0,$200=0,$201=0,$202=0,$203=0,$204=0,$206=0,$207=0,$208=0,$209=0,$211=0,$212=0,$213=0,$215=0,$216=0,$217=0,$220=0,$221=0;\n var $222=0,$224=0,$225=0,$226=0,$RP_0_i=0,$R_0_i=0,$227=0,$228=0,$229=0,$231=0,$232=0,$233=0,$235=0,$236=0,$R_1_i=0,$240=0,$242=0,$243=0,$244=0,$245=0;\n var $246=0,$cond_i=0,$248=0,$249=0,$250=0,$251=0,$253=0,$254=0,$255=0,$257=0,$258=0,$259=0,$262=0,$265=0,$267=0,$268=0,$269=0,$271=0,$272=0,$273=0;\n var $274=0,$276=0,$277=0,$278=0,$280=0,$281=0,$284=0,$285=0,$286=0,$288=0,$289=0,$290=0,$292=0,$293=0,$297=0,$299=0,$300=0,$301=0,$_sum4_i=0,$302=0;\n var $303=0,$304=0,$305=0,$307=0,$308=0,$309=0,$_sum_i137=0,$310=0,$311=0,$_sum1_i=0,$312=0,$313=0,$314=0,$315=0,$317=0,$318=0,$319=0,$320=0,$321=0,$322=0;\n var $323=0,$324=0,$325=0,$327=0,$_sum2_pre_i=0,$_pre_i=0,$_sum3_i=0,$329=0,$330=0,$331=0,$332=0,$333=0,$_pre_phi_i=0,$F1_0_i=0,$336=0,$337=0,$338=0,$341=0,$342=0,$343=0;\n var $345=0,$347=0,$348=0,$349=0,$350=0,$352=0,$353=0,$354=0,$356=0,$358=0,$359=0,$360=0,$361=0,$362=0,$363=0,$364=0,$365=0,$366=0,$367=0,$368=0;\n var $369=0,$370=0,$371=0,$372=0,$373=0,$374=0,$375=0,$376=0,$377=0,$378=0,$379=0,$idx_0_i=0,$381=0,$382=0,$383=0,$385=0,$387=0,$388=0,$390=0,$391=0;\n var $rst_0_i=0,$sizebits_0_i=0,$t_0_i116=0,$rsize_0_i117=0,$v_0_i118=0,$393=0,$394=0,$395=0,$396=0,$397=0,$399=0,$rsize_1_i=0,$v_1_i=0,$401=0,$402=0,$403=0,$404=0,$405=0,$406=0,$407=0;\n var $or_cond_i=0,$rst_1_i=0,$408=0,$409=0,$t_1_i=0,$rsize_2_i=0,$v_2_i=0,$410=0,$411=0,$or_cond21_i=0,$413=0,$414=0,$415=0,$416=0,$417=0,$419=0,$420=0,$421=0,$422=0,$423=0;\n var $424=0,$425=0,$426=0,$427=0,$428=0,$429=0,$430=0,$431=0,$432=0,$433=0,$434=0,$435=0,$436=0,$437=0,$438=0,$439=0,$440=0,$441=0,$442=0,$443=0;\n var $t_2_ph_i=0,$444=0,$v_330_i=0,$rsize_329_i=0,$t_228_i=0,$445=0,$446=0,$447=0,$448=0,$449=0,$_rsize_3_i=0,$t_2_v_3_i=0,$450=0,$451=0,$452=0,$453=0,$454=0,$455=0,$v_3_lcssa_i=0,$rsize_3_lcssa_i=0;\n var $456=0,$458=0,$459=0,$460=0,$462=0,$463=0,$464=0,$466=0,$467=0,$468=0,$470=0,$471=0,$472=0,$473=0,$474=0,$476=0,$477=0,$478=0,$479=0,$481=0;\n var $482=0,$483=0,$485=0,$486=0,$487=0,$490=0,$491=0,$492=0,$494=0,$495=0,$496=0,$RP_0_i119=0,$R_0_i120=0,$497=0,$498=0,$499=0,$501=0,$502=0,$503=0,$505=0;\n var $506=0,$R_1_i122=0,$510=0,$512=0,$513=0,$514=0,$515=0,$516=0,$cond_i123=0,$518=0,$519=0,$520=0,$521=0,$523=0,$524=0,$525=0,$527=0,$528=0,$529=0,$532=0;\n var $535=0,$537=0,$538=0,$539=0,$541=0,$542=0,$543=0,$544=0,$546=0,$547=0,$548=0,$550=0,$551=0,$554=0,$555=0,$556=0,$558=0,$559=0,$560=0,$562=0;\n var $563=0,$567=0,$569=0,$570=0,$571=0,$_sum19_i=0,$572=0,$573=0,$574=0,$575=0,$577=0,$578=0,$579=0,$_sum_i125136=0,$580=0,$581=0,$_sum1_i126=0,$582=0,$583=0,$584=0;\n var $585=0,$587=0,$588=0,$589=0,$590=0,$591=0,$592=0,$593=0,$595=0,$_sum15_pre_i=0,$_pre_i127=0,$_sum18_i=0,$597=0,$598=0,$599=0,$600=0,$601=0,$_pre_phi_i128=0,$F5_0_i=0,$604=0;\n var $_sum16_i=0,$605=0,$606=0,$_sum17_i=0,$607=0,$608=0,$610=0,$611=0,$612=0,$614=0,$616=0,$617=0,$618=0,$619=0,$620=0,$621=0,$622=0,$623=0,$624=0,$625=0;\n var $626=0,$627=0,$628=0,$629=0,$630=0,$631=0,$632=0,$633=0,$634=0,$635=0,$636=0,$637=0,$I7_0_i=0,$639=0,$_sum2_i=0,$640=0,$641=0,$_sum3_i129=0,$642=0,$_sum4_i130=0;\n var $643=0,$644=0,$645=0,$646=0,$647=0,$648=0,$649=0,$651=0,$652=0,$_sum5_i=0,$653=0,$654=0,$_sum6_i=0,$655=0,$656=0,$_sum7_i=0,$657=0,$658=0,$660=0,$661=0;\n var $663=0,$664=0,$666=0,$667=0,$T_0_i=0,$K12_0_i=0,$669=0,$670=0,$671=0,$672=0,$674=0,$675=0,$676=0,$677=0,$678=0,$680=0,$681=0,$682=0,$_sum12_i=0,$684=0;\n var $685=0,$_sum13_i=0,$686=0,$687=0,$_sum14_i=0,$688=0,$689=0,$692=0,$693=0,$694=0,$695=0,$696=0,$698=0,$699=0,$701=0,$_sum9_i=0,$702=0,$703=0,$_sum10_i=0,$704=0;\n var $705=0,$_sum11_i=0,$706=0,$707=0,$709=0,$710=0,$711=0,$nb_0=0,$712=0,$713=0,$715=0,$716=0,$717=0,$719=0,$720=0,$721=0,$722=0,$_sum102=0,$723=0,$724=0;\n var $725=0,$726=0,$727=0,$728=0,$730=0,$731=0,$732=0,$_sum101=0,$733=0,$734=0,$735=0,$736=0,$738=0,$739=0,$741=0,$742=0,$744=0,$745=0,$746=0,$747=0;\n var $748=0,$749=0,$_sum=0,$750=0,$751=0,$752=0,$753=0,$754=0,$755=0,$757=0,$758=0,$760=0,$761=0,$762=0,$763=0,$765=0,$766=0,$767=0,$769=0,$770=0;\n var $771=0,$772=0,$773=0,$774=0,$775=0,$777=0,$778=0,$780=0,$781=0,$782=0,$783=0,$or_cond1_i=0,$785=0,$786=0,$787=0,$789=0,$790=0,$792=0,$sp_0_i_i=0,$794=0;\n var $795=0,$796=0,$798=0,$799=0,$800=0,$801=0,$803=0,$804=0,$805=0,$806=0,$807=0,$808=0,$810=0,$811=0,$812=0,$813=0,$814=0,$816=0,$817=0,$818=0;\n var $819=0,$820=0,$ssize_0_i=0,$822=0,$823=0,$824=0,$825=0,$or_cond_i131=0,$827=0,$828=0,$830=0,$831=0,$or_cond2_i=0,$833=0,$834=0,$ssize_0__i=0,$__i=0,$836=0,$837=0,$838=0;\n var $839=0,$841=0,$842=0,$843=0,$844=0,$845=0,$_3_i=0,$_4_i=0,$ssize_1_i=0,$br_0_i=0,$tsize_0_i=0,$tbase_0_i=0,$847=0,$848=0,$850=0,$851=0,$or_cond5_i=0,$852=0,$or_cond6_i=0,$854=0;\n var $855=0,$856=0,$857=0,$858=0,$859=0,$861=0,$862=0,$864=0,$866=0,$ssize_2_i=0,$868=0,$tsize_0303639_i=0,$869=0,$870=0,$tsize_1_i=0,$872=0,$874=0,$875=0,$notlhs_i=0,$notrhs_i=0;\n var $or_cond8_not_i=0,$876=0,$or_cond9_i=0,$877=0,$878=0,$879=0,$880=0,$881=0,$_tsize_1_i=0,$_tbase_1_i=0,$882=0,$tbase_245_i=0,$tsize_244_i=0,$883=0,$884=0,$885=0,$886=0,$888=0,$889=0,$891=0;\n var $892=0,$893=0,$or_cond10_i=0,$895=0,$i_02_i_i=0,$897=0,$898=0,$899=0,$_sum_i_i=0,$900=0,$_sum1_i_i=0,$901=0,$902=0,$903=0,$904=0,$905=0,$906=0,$907=0,$908=0,$910=0;\n var $911=0,$912=0,$913=0,$914=0,$915=0,$916=0,$_sum_i14_i=0,$917=0,$918=0,$_sum2_i_i=0,$919=0,$920=0,$921=0,$sp_067_i=0,$922=0,$923=0,$924=0,$925=0,$926=0,$927=0;\n var $929=0,$930=0,$931=0,$932=0,$933=0,$934=0,$935=0,$937=0,$938=0,$939=0,$or_cond47_i=0,$941=0,$942=0,$943=0,$944=0,$945=0,$946=0,$947=0,$949=0,$950=0;\n var $951=0,$952=0,$953=0,$954=0,$955=0,$_sum_i18_i=0,$956=0,$957=0,$_sum2_i19_i=0,$958=0,$959=0,$960=0,$961=0,$962=0,$964=0,$sp_160_i=0,$966=0,$967=0,$968=0,$970=0;\n var $971=0,$972=0,$973=0,$974=0,$975=0,$976=0,$978=0,$979=0,$980=0,$981=0,$982=0,$983=0,$984=0,$986=0,$987=0,$989=0,$990=0,$_sum93_i=0,$991=0,$992=0;\n var $993=0,$994=0,$996=0,$997=0,$999=0,$_sum94_i=0,$1000=0,$1001=0,$1002=0,$1003=0,$1004=0,$_sum_i21_i=0,$1005=0,$1006=0,$1007=0,$1008=0,$_sum1_i22_i=0,$1009=0,$1010=0,$1011=0;\n var $1012=0,$1014=0,$1015=0,$1016=0,$_sum46_i_i=0,$1017=0,$1018=0,$1020=0,$1021=0,$1023=0,$1024=0,$1025=0,$_sum44_i_i=0,$1026=0,$1027=0,$_sum45_i_i=0,$1028=0,$1029=0,$_sum2_i23_i=0,$_sum95_i=0;\n var $1031=0,$1032=0,$1033=0,$1034=0,$1035=0,$1037=0,$1038=0,$1039=0,$_sum3940_i_i=0,$_sum105_i=0,$1041=0,$1042=0,$1043=0,$_sum41_i_i=0,$_sum106_i=0,$1044=0,$1045=0,$1046=0,$1047=0,$1048=0;\n var $1049=0,$1050=0,$1052=0,$1053=0,$1054=0,$1056=0,$1057=0,$1058=0,$1059=0,$1061=0,$1062=0,$1063=0,$1064=0,$1066=0,$_pre56_i_i=0,$1068=0,$1069=0,$1070=0,$1072=0,$1073=0;\n var $1074=0,$_pre_phi57_i_i=0,$1075=0,$1077=0,$_sum34_i_i=0,$_sum96_i=0,$1078=0,$1079=0,$1080=0,$_sum5_i_i=0,$_sum97_i=0,$1081=0,$1082=0,$1083=0,$1084=0,$_sum3637_i_i=0,$_sum98_i=0,$1086=0,$1087=0,$1088=0;\n var $1089=0,$1090=0,$1091=0,$1093=0,$1094=0,$1095=0,$1097=0,$1098=0,$1099=0,$_sum67_i_i=0,$_sum103_i=0,$1102=0,$1103=0,$1104=0,$1105=0,$_sum104_i=0,$1107=0,$1108=0,$1109=0,$1110=0;\n var $RP_0_i_i=0,$R_0_i_i=0,$1111=0,$1112=0,$1113=0,$1115=0,$1116=0,$1117=0,$1119=0,$1120=0,$1121=0,$R_1_i_i=0,$1125=0,$_sum31_i_i=0,$_sum99_i=0,$1127=0,$1128=0,$1129=0,$1130=0,$1131=0;\n var $1132=0,$cond_i_i=0,$1134=0,$1135=0,$1136=0,$1137=0,$1139=0,$1140=0,$1141=0,$1143=0,$1144=0,$1145=0,$1148=0,$1151=0,$1153=0,$1154=0,$1155=0,$1157=0,$_sum3233_i_i=0,$_sum100_i=0;\n var $1158=0,$1159=0,$1160=0,$1161=0,$1163=0,$1164=0,$1165=0,$1167=0,$1168=0,$_sum101_i=0,$1171=0,$1172=0,$1173=0,$1174=0,$1176=0,$1177=0,$1178=0,$1180=0,$1181=0,$_sum9_i_i=0;\n var $_sum102_i=0,$1185=0,$1186=0,$1187=0,$qsize_0_i_i=0,$oldfirst_0_i_i=0,$1189=0,$1190=0,$1191=0,$1192=0,$_sum10_i_i=0,$1193=0,$1194=0,$_sum11_i_i=0,$1195=0,$1196=0,$1197=0,$1198=0,$1200=0,$1201=0;\n var $1202=0,$1203=0,$1204=0,$1205=0,$1206=0,$1208=0,$_sum27_pre_i_i=0,$_pre_i24_i=0,$_sum30_i_i=0,$1210=0,$1211=0,$1212=0,$1213=0,$1214=0,$_pre_phi_i25_i=0,$F4_0_i_i=0,$1217=0,$_sum28_i_i=0,$1218=0,$1219=0;\n var $_sum29_i_i=0,$1220=0,$1221=0,$1223=0,$1224=0,$1225=0,$1227=0,$1229=0,$1230=0,$1231=0,$1232=0,$1233=0,$1234=0,$1235=0,$1236=0,$1237=0,$1238=0,$1239=0,$1240=0,$1241=0;\n var $1242=0,$1243=0,$1244=0,$1245=0,$1246=0,$1247=0,$1248=0,$1249=0,$1250=0,$I7_0_i_i=0,$1252=0,$_sum12_i26_i=0,$1253=0,$1254=0,$_sum13_i_i=0,$1255=0,$_sum14_i_i=0,$1256=0,$1257=0,$1258=0;\n var $1259=0,$1260=0,$1261=0,$1262=0,$1264=0,$1265=0,$_sum15_i_i=0,$1266=0,$1267=0,$_sum16_i_i=0,$1268=0,$1269=0,$_sum17_i_i=0,$1270=0,$1271=0,$1273=0,$1274=0,$1276=0,$1277=0,$1279=0;\n var $1280=0,$T_0_i27_i=0,$K8_0_i_i=0,$1282=0,$1283=0,$1284=0,$1285=0,$1287=0,$1288=0,$1289=0,$1290=0,$1291=0,$1293=0,$1294=0,$1295=0,$_sum24_i_i=0,$1297=0,$1298=0,$_sum25_i_i=0,$1299=0;\n var $1300=0,$_sum26_i_i=0,$1301=0,$1302=0,$1305=0,$1306=0,$1307=0,$1308=0,$1309=0,$1311=0,$1312=0,$1314=0,$_sum21_i_i=0,$1315=0,$1316=0,$_sum22_i_i=0,$1317=0,$1318=0,$_sum23_i_i=0,$1319=0;\n var $1320=0,$_sum1819_i_i=0,$1321=0,$1322=0,$sp_0_i_i_i=0,$1324=0,$1325=0,$1326=0,$1328=0,$1329=0,$1330=0,$1331=0,$1333=0,$1334=0,$_sum_i15_i=0,$_sum1_i16_i=0,$1335=0,$1336=0,$1337=0,$1338=0;\n var $1340=0,$1341=0,$1343=0,$_sum2_i17_i=0,$1344=0,$1345=0,$1346=0,$1347=0,$1348=0,$1349=0,$1350=0,$1351=0,$1352=0,$1353=0,$1354=0,$1355=0,$1357=0,$1358=0,$1359=0,$1360=0;\n var $1361=0,$1362=0,$1363=0,$_sum_i_i_i=0,$1364=0,$1365=0,$_sum2_i_i_i=0,$1366=0,$1367=0,$1368=0,$1369=0,$1370=0,$1371=0,$1372=0,$1373=0,$1374=0,$1375=0,$1376=0,$1377=0,$1378=0;\n var $1379=0,$1380=0,$1382=0,$1383=0,$1384=0,$1385=0,$_sum3_i_i=0,$1386=0,$1387=0,$1388=0,$1389=0,$1390=0,$1391=0,$1392=0,$1393=0,$1394=0,$1396=0,$1397=0,$1398=0,$1399=0;\n var $1400=0,$1401=0,$1402=0,$1404=0,$_sum11_pre_i_i=0,$_pre_i_i=0,$_sum12_i_i=0,$1406=0,$1407=0,$1408=0,$1409=0,$1410=0,$_pre_phi_i_i=0,$F_0_i_i=0,$1413=0,$1414=0,$1415=0,$1417=0,$1418=0,$1419=0;\n var $1421=0,$1423=0,$1424=0,$1425=0,$1426=0,$1427=0,$1428=0,$1429=0,$1430=0,$1431=0,$1432=0,$1433=0,$1434=0,$1435=0,$1436=0,$1437=0,$1438=0,$1439=0,$1440=0,$1441=0;\n var $1442=0,$1443=0,$1444=0,$I1_0_i_i=0,$1446=0,$1447=0,$I1_0_c_i_i=0,$1448=0,$1449=0,$1450=0,$1451=0,$1452=0,$1453=0,$1455=0,$1456=0,$_c_i_i=0,$1457=0,$1458=0,$1460=0,$1461=0;\n var $1463=0,$1464=0,$1466=0,$1467=0,$T_0_i_i=0,$K2_0_i_i=0,$1469=0,$1470=0,$1471=0,$1472=0,$1474=0,$1475=0,$1476=0,$1477=0,$1478=0,$1480=0,$1481=0,$1482=0,$1484=0,$T_0_c8_i_i=0;\n var $1485=0,$1486=0,$1489=0,$1490=0,$1491=0,$1492=0,$1493=0,$1495=0,$1496=0,$1498=0,$1499=0,$_c7_i_i=0,$1500=0,$T_0_c_i_i=0,$1501=0,$1502=0,$1503=0,$1505=0,$1506=0,$1507=0;\n var $1508=0,$1509=0,$1510=0,$_sum_i134=0,$1511=0,$1512=0,$1513=0,$1514=0,$1515=0,$1516=0,$1517=0,$mem_0=0,label=0;\n\n $1=($bytes>>>0)<((245)>>>0);\n do {\n  if ($1) {\n   $3=($bytes>>>0)<((11)>>>0);\n   if ($3) {\n    $8=16;\n   } else {\n    $5=((($bytes)+(11))|0);\n    $6=$5&-8;\n    $8=$6;\n   }\n\n   $9=$8>>>3;\n   $10=((HEAP32[((976)>>2)])|0);\n   $11=$10>>>($9>>>0);\n   $12=$11&3;\n   $13=($12|0)==0;\n   if (!($13)) {\n    $15=$11&1;\n    $16=$15^1;\n    $17=((($16)+($9))|0);\n    $18=$17<<1;\n    $19=((1016+($18<<2))|0);\n    $20=$19;\n    $_sum111=((($18)+(2))|0);\n    $21=((1016+($_sum111<<2))|0);\n    $22=((HEAP32[(($21)>>2)])|0);\n    $23=(($22+8)|0);\n    $24=((HEAP32[(($23)>>2)])|0);\n    $25=($20|0)==($24|0);\n    do {\n     if ($25) {\n      $27=1<<$17;\n      $28=$27^-1;\n      $29=$10&$28;\n      HEAP32[((976)>>2)]=$29;\n     } else {\n      $31=$24;\n      $32=((HEAP32[((992)>>2)])|0);\n      $33=($31>>>0)<($32>>>0);\n      if ($33) {\n       _abort(); return ((0)|0);\n       return ((0)|0);\n      }\n      $35=(($24+12)|0);\n      $36=((HEAP32[(($35)>>2)])|0);\n      $37=($36|0)==($22|0);\n      if ($37) {\n       HEAP32[(($35)>>2)]=$20;\n       HEAP32[(($21)>>2)]=$24;\n       break;\n      } else {\n       _abort(); return ((0)|0);\n       return ((0)|0);\n      }\n     }\n    } while(0);\n    $40=$17<<3;\n    $41=$40|3;\n    $42=(($22+4)|0);\n    HEAP32[(($42)>>2)]=$41;\n    $43=$22;\n    $_sum113114=$40|4;\n    $44=(($43+$_sum113114)|0);\n    $45=$44;\n    $46=((HEAP32[(($45)>>2)])|0);\n    $47=$46|1;\n    HEAP32[(($45)>>2)]=$47;\n    $48=$23;\n    $mem_0=$48;\n\n    return (($mem_0)|0);\n   }\n   $50=((HEAP32[((984)>>2)])|0);\n   $51=($8>>>0)>($50>>>0);\n   if (!($51)) {\n    $nb_0=$8;\n    break;\n   }\n   $53=($11|0)==0;\n   if (!($53)) {\n    $55=$11<<$9;\n    $56=2<<$9;\n    $57=(((-$56))|0);\n    $58=$56|$57;\n    $59=$55&$58;\n    $60=(((-$59))|0);\n    $61=$59&$60;\n    $62=((($61)-(1))|0);\n    $63=$62>>>12;\n    $64=$63&16;\n    $65=$62>>>($64>>>0);\n    $66=$65>>>5;\n    $67=$66&8;\n    $68=$67|$64;\n    $69=$65>>>($67>>>0);\n    $70=$69>>>2;\n    $71=$70&4;\n    $72=$68|$71;\n    $73=$69>>>($71>>>0);\n    $74=$73>>>1;\n    $75=$74&2;\n    $76=$72|$75;\n    $77=$73>>>($75>>>0);\n    $78=$77>>>1;\n    $79=$78&1;\n    $80=$76|$79;\n    $81=$77>>>($79>>>0);\n    $82=((($80)+($81))|0);\n    $83=$82<<1;\n    $84=((1016+($83<<2))|0);\n    $85=$84;\n    $_sum104=((($83)+(2))|0);\n    $86=((1016+($_sum104<<2))|0);\n    $87=((HEAP32[(($86)>>2)])|0);\n    $88=(($87+8)|0);\n    $89=((HEAP32[(($88)>>2)])|0);\n    $90=($85|0)==($89|0);\n    do {\n     if ($90) {\n      $92=1<<$82;\n      $93=$92^-1;\n      $94=$10&$93;\n      HEAP32[((976)>>2)]=$94;\n     } else {\n      $96=$89;\n      $97=((HEAP32[((992)>>2)])|0);\n      $98=($96>>>0)<($97>>>0);\n      if ($98) {\n       _abort(); return ((0)|0);\n       return ((0)|0);\n      }\n      $100=(($89+12)|0);\n      $101=((HEAP32[(($100)>>2)])|0);\n      $102=($101|0)==($87|0);\n      if ($102) {\n       HEAP32[(($100)>>2)]=$85;\n       HEAP32[(($86)>>2)]=$89;\n       break;\n      } else {\n       _abort(); return ((0)|0);\n       return ((0)|0);\n      }\n     }\n    } while(0);\n    $105=$82<<3;\n    $106=((($105)-($8))|0);\n    $107=$8|3;\n    $108=(($87+4)|0);\n    HEAP32[(($108)>>2)]=$107;\n    $109=$87;\n    $110=(($109+$8)|0);\n    $111=$110;\n    $112=$106|1;\n    $_sum106107=$8|4;\n    $113=(($109+$_sum106107)|0);\n    $114=$113;\n    HEAP32[(($114)>>2)]=$112;\n    $115=(($109+$105)|0);\n    $116=$115;\n    HEAP32[(($116)>>2)]=$106;\n    $117=((HEAP32[((984)>>2)])|0);\n    $118=($117|0)==0;\n    if (!($118)) {\n     $120=((HEAP32[((996)>>2)])|0);\n     $121=$117>>>3;\n     $122=$121<<1;\n     $123=((1016+($122<<2))|0);\n     $124=$123;\n     $125=((HEAP32[((976)>>2)])|0);\n     $126=1<<$121;\n     $127=$125&$126;\n     $128=($127|0)==0;\n     do {\n      if ($128) {\n       $130=$125|$126;\n       HEAP32[((976)>>2)]=$130;\n       $_sum109_pre=((($122)+(2))|0);\n       $_pre=((1016+($_sum109_pre<<2))|0);\n       $F4_0=$124;$_pre_phi=$_pre;\n      } else {\n       $_sum110=((($122)+(2))|0);\n       $132=((1016+($_sum110<<2))|0);\n       $133=((HEAP32[(($132)>>2)])|0);\n       $134=$133;\n       $135=((HEAP32[((992)>>2)])|0);\n       $136=($134>>>0)<($135>>>0);\n       if (!($136)) {\n        $F4_0=$133;$_pre_phi=$132;\n        break;\n       }\n       _abort(); return ((0)|0);\n       return ((0)|0);\n      }\n     } while(0);\n\n\n     HEAP32[(($_pre_phi)>>2)]=$120;\n     $139=(($F4_0+12)|0);\n     HEAP32[(($139)>>2)]=$120;\n     $140=(($120+8)|0);\n     HEAP32[(($140)>>2)]=$F4_0;\n     $141=(($120+12)|0);\n     HEAP32[(($141)>>2)]=$124;\n    }\n    HEAP32[((984)>>2)]=$106;\n    HEAP32[((996)>>2)]=$111;\n    $143=$88;\n    $mem_0=$143;\n\n    return (($mem_0)|0);\n   }\n   $145=((HEAP32[((980)>>2)])|0);\n   $146=($145|0)==0;\n   if ($146) {\n    $nb_0=$8;\n    break;\n   }\n   $148=(((-$145))|0);\n   $149=$145&$148;\n   $150=((($149)-(1))|0);\n   $151=$150>>>12;\n   $152=$151&16;\n   $153=$150>>>($152>>>0);\n   $154=$153>>>5;\n   $155=$154&8;\n   $156=$155|$152;\n   $157=$153>>>($155>>>0);\n   $158=$157>>>2;\n   $159=$158&4;\n   $160=$156|$159;\n   $161=$157>>>($159>>>0);\n   $162=$161>>>1;\n   $163=$162&2;\n   $164=$160|$163;\n   $165=$161>>>($163>>>0);\n   $166=$165>>>1;\n   $167=$166&1;\n   $168=$164|$167;\n   $169=$165>>>($167>>>0);\n   $170=((($168)+($169))|0);\n   $171=((1280+($170<<2))|0);\n   $172=((HEAP32[(($171)>>2)])|0);\n   $173=(($172+4)|0);\n   $174=((HEAP32[(($173)>>2)])|0);\n   $175=$174&-8;\n   $176=((($175)-($8))|0);\n   $t_0_i=$172;$v_0_i=$172;$rsize_0_i=$176;\n   while(1) {\n\n\n\n    $178=(($t_0_i+16)|0);\n    $179=((HEAP32[(($178)>>2)])|0);\n    $180=($179|0)==0;\n    if ($180) {\n     $182=(($t_0_i+20)|0);\n     $183=((HEAP32[(($182)>>2)])|0);\n     $184=($183|0)==0;\n     if ($184) {\n      break;\n     } else {\n      $185=$183;\n     }\n    } else {\n     $185=$179;\n    }\n\n    $186=(($185+4)|0);\n    $187=((HEAP32[(($186)>>2)])|0);\n    $188=$187&-8;\n    $189=((($188)-($8))|0);\n    $190=($189>>>0)<($rsize_0_i>>>0);\n    $_rsize_0_i=($190?$189:$rsize_0_i);\n    $_v_0_i=($190?$185:$v_0_i);\n    $t_0_i=$185;$v_0_i=$_v_0_i;$rsize_0_i=$_rsize_0_i;\n   }\n   $192=$v_0_i;\n   $193=((HEAP32[((992)>>2)])|0);\n   $194=($192>>>0)<($193>>>0);\n   if ($194) {\n    _abort(); return ((0)|0);\n    return ((0)|0);\n   }\n   $196=(($192+$8)|0);\n   $197=$196;\n   $198=($192>>>0)<($196>>>0);\n   if (!($198)) {\n    _abort(); return ((0)|0);\n    return ((0)|0);\n   }\n   $200=(($v_0_i+24)|0);\n   $201=((HEAP32[(($200)>>2)])|0);\n   $202=(($v_0_i+12)|0);\n   $203=((HEAP32[(($202)>>2)])|0);\n   $204=($203|0)==($v_0_i|0);\n   do {\n    if ($204) {\n     $220=(($v_0_i+20)|0);\n     $221=((HEAP32[(($220)>>2)])|0);\n     $222=($221|0)==0;\n     if ($222) {\n      $224=(($v_0_i+16)|0);\n      $225=((HEAP32[(($224)>>2)])|0);\n      $226=($225|0)==0;\n      if ($226) {\n       $R_1_i=0;\n       break;\n      } else {\n       $R_0_i=$225;$RP_0_i=$224;\n      }\n     } else {\n      $R_0_i=$221;$RP_0_i=$220;\n     }\n     while(1) {\n\n\n      $227=(($R_0_i+20)|0);\n      $228=((HEAP32[(($227)>>2)])|0);\n      $229=($228|0)==0;\n      if (!($229)) {\n       $R_0_i=$228;$RP_0_i=$227;\n       continue;\n      }\n      $231=(($R_0_i+16)|0);\n      $232=((HEAP32[(($231)>>2)])|0);\n      $233=($232|0)==0;\n      if ($233) {\n       break;\n      } else {\n       $R_0_i=$232;$RP_0_i=$231;\n      }\n     }\n     $235=$RP_0_i;\n     $236=($235>>>0)<($193>>>0);\n     if ($236) {\n      _abort(); return ((0)|0);\n      return ((0)|0);\n     } else {\n      HEAP32[(($RP_0_i)>>2)]=0;\n      $R_1_i=$R_0_i;\n      break;\n     }\n    } else {\n     $206=(($v_0_i+8)|0);\n     $207=((HEAP32[(($206)>>2)])|0);\n     $208=$207;\n     $209=($208>>>0)<($193>>>0);\n     if ($209) {\n      _abort(); return ((0)|0);\n      return ((0)|0);\n     }\n     $211=(($207+12)|0);\n     $212=((HEAP32[(($211)>>2)])|0);\n     $213=($212|0)==($v_0_i|0);\n     if (!($213)) {\n      _abort(); return ((0)|0);\n      return ((0)|0);\n     }\n     $215=(($203+8)|0);\n     $216=((HEAP32[(($215)>>2)])|0);\n     $217=($216|0)==($v_0_i|0);\n     if ($217) {\n      HEAP32[(($211)>>2)]=$203;\n      HEAP32[(($215)>>2)]=$207;\n      $R_1_i=$203;\n      break;\n     } else {\n      _abort(); return ((0)|0);\n      return ((0)|0);\n     }\n    }\n   } while(0);\n\n   $240=($201|0)==0;\n   L78: do {\n    if (!($240)) {\n     $242=(($v_0_i+28)|0);\n     $243=((HEAP32[(($242)>>2)])|0);\n     $244=((1280+($243<<2))|0);\n     $245=((HEAP32[(($244)>>2)])|0);\n     $246=($v_0_i|0)==($245|0);\n     do {\n      if ($246) {\n       HEAP32[(($244)>>2)]=$R_1_i;\n       $cond_i=($R_1_i|0)==0;\n       if (!($cond_i)) {\n        break;\n       }\n       $248=1<<$243;\n       $249=$248^-1;\n       $250=((HEAP32[((980)>>2)])|0);\n       $251=$250&$249;\n       HEAP32[((980)>>2)]=$251;\n       break L78;\n      } else {\n       $253=$201;\n       $254=((HEAP32[((992)>>2)])|0);\n       $255=($253>>>0)<($254>>>0);\n       if ($255) {\n        _abort(); return ((0)|0);\n        return ((0)|0);\n       }\n       $257=(($201+16)|0);\n       $258=((HEAP32[(($257)>>2)])|0);\n       $259=($258|0)==($v_0_i|0);\n       if ($259) {\n        HEAP32[(($257)>>2)]=$R_1_i;\n       } else {\n        $262=(($201+20)|0);\n        HEAP32[(($262)>>2)]=$R_1_i;\n       }\n       $265=($R_1_i|0)==0;\n       if ($265) {\n        break L78;\n       }\n      }\n     } while(0);\n     $267=$R_1_i;\n     $268=((HEAP32[((992)>>2)])|0);\n     $269=($267>>>0)<($268>>>0);\n     if ($269) {\n      _abort(); return ((0)|0);\n      return ((0)|0);\n     }\n     $271=(($R_1_i+24)|0);\n     HEAP32[(($271)>>2)]=$201;\n     $272=(($v_0_i+16)|0);\n     $273=((HEAP32[(($272)>>2)])|0);\n     $274=($273|0)==0;\n     do {\n      if (!($274)) {\n       $276=$273;\n       $277=((HEAP32[((992)>>2)])|0);\n       $278=($276>>>0)<($277>>>0);\n       if ($278) {\n        _abort(); return ((0)|0);\n        return ((0)|0);\n       } else {\n        $280=(($R_1_i+16)|0);\n        HEAP32[(($280)>>2)]=$273;\n        $281=(($273+24)|0);\n        HEAP32[(($281)>>2)]=$R_1_i;\n        break;\n       }\n      }\n     } while(0);\n     $284=(($v_0_i+20)|0);\n     $285=((HEAP32[(($284)>>2)])|0);\n     $286=($285|0)==0;\n     if ($286) {\n      break;\n     }\n     $288=$285;\n     $289=((HEAP32[((992)>>2)])|0);\n     $290=($288>>>0)<($289>>>0);\n     if ($290) {\n      _abort(); return ((0)|0);\n      return ((0)|0);\n     } else {\n      $292=(($R_1_i+20)|0);\n      HEAP32[(($292)>>2)]=$285;\n      $293=(($285+24)|0);\n      HEAP32[(($293)>>2)]=$R_1_i;\n      break;\n     }\n    }\n   } while(0);\n   $297=($rsize_0_i>>>0)<((16)>>>0);\n   if ($297) {\n    $299=((($rsize_0_i)+($8))|0);\n    $300=$299|3;\n    $301=(($v_0_i+4)|0);\n    HEAP32[(($301)>>2)]=$300;\n    $_sum4_i=((($299)+(4))|0);\n    $302=(($192+$_sum4_i)|0);\n    $303=$302;\n    $304=((HEAP32[(($303)>>2)])|0);\n    $305=$304|1;\n    HEAP32[(($303)>>2)]=$305;\n   } else {\n    $307=$8|3;\n    $308=(($v_0_i+4)|0);\n    HEAP32[(($308)>>2)]=$307;\n    $309=$rsize_0_i|1;\n    $_sum_i137=$8|4;\n    $310=(($192+$_sum_i137)|0);\n    $311=$310;\n    HEAP32[(($311)>>2)]=$309;\n    $_sum1_i=((($rsize_0_i)+($8))|0);\n    $312=(($192+$_sum1_i)|0);\n    $313=$312;\n    HEAP32[(($313)>>2)]=$rsize_0_i;\n    $314=((HEAP32[((984)>>2)])|0);\n    $315=($314|0)==0;\n    if (!($315)) {\n     $317=((HEAP32[((996)>>2)])|0);\n     $318=$314>>>3;\n     $319=$318<<1;\n     $320=((1016+($319<<2))|0);\n     $321=$320;\n     $322=((HEAP32[((976)>>2)])|0);\n     $323=1<<$318;\n     $324=$322&$323;\n     $325=($324|0)==0;\n     do {\n      if ($325) {\n       $327=$322|$323;\n       HEAP32[((976)>>2)]=$327;\n       $_sum2_pre_i=((($319)+(2))|0);\n       $_pre_i=((1016+($_sum2_pre_i<<2))|0);\n       $F1_0_i=$321;$_pre_phi_i=$_pre_i;\n      } else {\n       $_sum3_i=((($319)+(2))|0);\n       $329=((1016+($_sum3_i<<2))|0);\n       $330=((HEAP32[(($329)>>2)])|0);\n       $331=$330;\n       $332=((HEAP32[((992)>>2)])|0);\n       $333=($331>>>0)<($332>>>0);\n       if (!($333)) {\n        $F1_0_i=$330;$_pre_phi_i=$329;\n        break;\n       }\n       _abort(); return ((0)|0);\n       return ((0)|0);\n      }\n     } while(0);\n\n\n     HEAP32[(($_pre_phi_i)>>2)]=$317;\n     $336=(($F1_0_i+12)|0);\n     HEAP32[(($336)>>2)]=$317;\n     $337=(($317+8)|0);\n     HEAP32[(($337)>>2)]=$F1_0_i;\n     $338=(($317+12)|0);\n     HEAP32[(($338)>>2)]=$321;\n    }\n    HEAP32[((984)>>2)]=$rsize_0_i;\n    HEAP32[((996)>>2)]=$197;\n   }\n   $341=(($v_0_i+8)|0);\n   $342=$341;\n   $343=($341|0)==0;\n   if ($343) {\n    $nb_0=$8;\n    break;\n   } else {\n    $mem_0=$342;\n   }\n\n   return (($mem_0)|0);\n  } else {\n   $345=($bytes>>>0)>((4294967231)>>>0);\n   if ($345) {\n    $nb_0=-1;\n    break;\n   }\n   $347=((($bytes)+(11))|0);\n   $348=$347&-8;\n   $349=((HEAP32[((980)>>2)])|0);\n   $350=($349|0)==0;\n   if ($350) {\n    $nb_0=$348;\n    break;\n   }\n   $352=(((-$348))|0);\n   $353=$347>>>8;\n   $354=($353|0)==0;\n   do {\n    if ($354) {\n     $idx_0_i=0;\n    } else {\n     $356=($348>>>0)>((16777215)>>>0);\n     if ($356) {\n      $idx_0_i=31;\n      break;\n     }\n     $358=((($353)+(1048320))|0);\n     $359=$358>>>16;\n     $360=$359&8;\n     $361=$353<<$360;\n     $362=((($361)+(520192))|0);\n     $363=$362>>>16;\n     $364=$363&4;\n     $365=$364|$360;\n     $366=$361<<$364;\n     $367=((($366)+(245760))|0);\n     $368=$367>>>16;\n     $369=$368&2;\n     $370=$365|$369;\n     $371=(((14)-($370))|0);\n     $372=$366<<$369;\n     $373=$372>>>15;\n     $374=((($371)+($373))|0);\n     $375=$374<<1;\n     $376=((($374)+(7))|0);\n     $377=$348>>>($376>>>0);\n     $378=$377&1;\n     $379=$378|$375;\n     $idx_0_i=$379;\n    }\n   } while(0);\n\n   $381=((1280+($idx_0_i<<2))|0);\n   $382=((HEAP32[(($381)>>2)])|0);\n   $383=($382|0)==0;\n   L126: do {\n    if ($383) {\n     $v_2_i=0;$rsize_2_i=$352;$t_1_i=0;\n    } else {\n     $385=($idx_0_i|0)==31;\n     if ($385) {\n      $390=0;\n     } else {\n      $387=$idx_0_i>>>1;\n      $388=(((25)-($387))|0);\n      $390=$388;\n     }\n\n     $391=$348<<$390;\n     $v_0_i118=0;$rsize_0_i117=$352;$t_0_i116=$382;$sizebits_0_i=$391;$rst_0_i=0;\n     while(1) {\n\n\n\n\n\n      $393=(($t_0_i116+4)|0);\n      $394=((HEAP32[(($393)>>2)])|0);\n      $395=$394&-8;\n      $396=((($395)-($348))|0);\n      $397=($396>>>0)<($rsize_0_i117>>>0);\n      if ($397) {\n       $399=($395|0)==($348|0);\n       if ($399) {\n        $v_2_i=$t_0_i116;$rsize_2_i=$396;$t_1_i=$t_0_i116;\n        break L126;\n       } else {\n        $v_1_i=$t_0_i116;$rsize_1_i=$396;\n       }\n      } else {\n       $v_1_i=$v_0_i118;$rsize_1_i=$rsize_0_i117;\n      }\n\n\n      $401=(($t_0_i116+20)|0);\n      $402=((HEAP32[(($401)>>2)])|0);\n      $403=$sizebits_0_i>>>31;\n      $404=(($t_0_i116+16+($403<<2))|0);\n      $405=((HEAP32[(($404)>>2)])|0);\n      $406=($402|0)==0;\n      $407=($402|0)==($405|0);\n      $or_cond_i=$406|$407;\n      $rst_1_i=($or_cond_i?$rst_0_i:$402);\n      $408=($405|0)==0;\n      $409=$sizebits_0_i<<1;\n      if ($408) {\n       $v_2_i=$v_1_i;$rsize_2_i=$rsize_1_i;$t_1_i=$rst_1_i;\n       break;\n      } else {\n       $v_0_i118=$v_1_i;$rsize_0_i117=$rsize_1_i;$t_0_i116=$405;$sizebits_0_i=$409;$rst_0_i=$rst_1_i;\n      }\n     }\n    }\n   } while(0);\n\n\n\n   $410=($t_1_i|0)==0;\n   $411=($v_2_i|0)==0;\n   $or_cond21_i=$410&$411;\n   if ($or_cond21_i) {\n    $413=2<<$idx_0_i;\n    $414=(((-$413))|0);\n    $415=$413|$414;\n    $416=$349&$415;\n    $417=($416|0)==0;\n    if ($417) {\n     $nb_0=$348;\n     break;\n    }\n    $419=(((-$416))|0);\n    $420=$416&$419;\n    $421=((($420)-(1))|0);\n    $422=$421>>>12;\n    $423=$422&16;\n    $424=$421>>>($423>>>0);\n    $425=$424>>>5;\n    $426=$425&8;\n    $427=$426|$423;\n    $428=$424>>>($426>>>0);\n    $429=$428>>>2;\n    $430=$429&4;\n    $431=$427|$430;\n    $432=$428>>>($430>>>0);\n    $433=$432>>>1;\n    $434=$433&2;\n    $435=$431|$434;\n    $436=$432>>>($434>>>0);\n    $437=$436>>>1;\n    $438=$437&1;\n    $439=$435|$438;\n    $440=$436>>>($438>>>0);\n    $441=((($439)+($440))|0);\n    $442=((1280+($441<<2))|0);\n    $443=((HEAP32[(($442)>>2)])|0);\n    $t_2_ph_i=$443;\n   } else {\n    $t_2_ph_i=$t_1_i;\n   }\n\n   $444=($t_2_ph_i|0)==0;\n   if ($444) {\n    $rsize_3_lcssa_i=$rsize_2_i;$v_3_lcssa_i=$v_2_i;\n   } else {\n    $t_228_i=$t_2_ph_i;$rsize_329_i=$rsize_2_i;$v_330_i=$v_2_i;\n    while(1) {\n\n\n\n     $445=(($t_228_i+4)|0);\n     $446=((HEAP32[(($445)>>2)])|0);\n     $447=$446&-8;\n     $448=((($447)-($348))|0);\n     $449=($448>>>0)<($rsize_329_i>>>0);\n     $_rsize_3_i=($449?$448:$rsize_329_i);\n     $t_2_v_3_i=($449?$t_228_i:$v_330_i);\n     $450=(($t_228_i+16)|0);\n     $451=((HEAP32[(($450)>>2)])|0);\n     $452=($451|0)==0;\n     if (!($452)) {\n      $t_228_i=$451;$rsize_329_i=$_rsize_3_i;$v_330_i=$t_2_v_3_i;\n      continue;\n     }\n     $453=(($t_228_i+20)|0);\n     $454=((HEAP32[(($453)>>2)])|0);\n     $455=($454|0)==0;\n     if ($455) {\n      $rsize_3_lcssa_i=$_rsize_3_i;$v_3_lcssa_i=$t_2_v_3_i;\n      break;\n     } else {\n      $t_228_i=$454;$rsize_329_i=$_rsize_3_i;$v_330_i=$t_2_v_3_i;\n     }\n    }\n   }\n\n\n   $456=($v_3_lcssa_i|0)==0;\n   if ($456) {\n    $nb_0=$348;\n    break;\n   }\n   $458=((HEAP32[((984)>>2)])|0);\n   $459=((($458)-($348))|0);\n   $460=($rsize_3_lcssa_i>>>0)<($459>>>0);\n   if (!($460)) {\n    $nb_0=$348;\n    break;\n   }\n   $462=$v_3_lcssa_i;\n   $463=((HEAP32[((992)>>2)])|0);\n   $464=($462>>>0)<($463>>>0);\n   if ($464) {\n    _abort(); return ((0)|0);\n    return ((0)|0);\n   }\n   $466=(($462+$348)|0);\n   $467=$466;\n   $468=($462>>>0)<($466>>>0);\n   if (!($468)) {\n    _abort(); return ((0)|0);\n    return ((0)|0);\n   }\n   $470=(($v_3_lcssa_i+24)|0);\n   $471=((HEAP32[(($470)>>2)])|0);\n   $472=(($v_3_lcssa_i+12)|0);\n   $473=((HEAP32[(($472)>>2)])|0);\n   $474=($473|0)==($v_3_lcssa_i|0);\n   do {\n    if ($474) {\n     $490=(($v_3_lcssa_i+20)|0);\n     $491=((HEAP32[(($490)>>2)])|0);\n     $492=($491|0)==0;\n     if ($492) {\n      $494=(($v_3_lcssa_i+16)|0);\n      $495=((HEAP32[(($494)>>2)])|0);\n      $496=($495|0)==0;\n      if ($496) {\n       $R_1_i122=0;\n       break;\n      } else {\n       $R_0_i120=$495;$RP_0_i119=$494;\n      }\n     } else {\n      $R_0_i120=$491;$RP_0_i119=$490;\n     }\n     while(1) {\n\n\n      $497=(($R_0_i120+20)|0);\n      $498=((HEAP32[(($497)>>2)])|0);\n      $499=($498|0)==0;\n      if (!($499)) {\n       $R_0_i120=$498;$RP_0_i119=$497;\n       continue;\n      }\n      $501=(($R_0_i120+16)|0);\n      $502=((HEAP32[(($501)>>2)])|0);\n      $503=($502|0)==0;\n      if ($503) {\n       break;\n      } else {\n       $R_0_i120=$502;$RP_0_i119=$501;\n      }\n     }\n     $505=$RP_0_i119;\n     $506=($505>>>0)<($463>>>0);\n     if ($506) {\n      _abort(); return ((0)|0);\n      return ((0)|0);\n     } else {\n      HEAP32[(($RP_0_i119)>>2)]=0;\n      $R_1_i122=$R_0_i120;\n      break;\n     }\n    } else {\n     $476=(($v_3_lcssa_i+8)|0);\n     $477=((HEAP32[(($476)>>2)])|0);\n     $478=$477;\n     $479=($478>>>0)<($463>>>0);\n     if ($479) {\n      _abort(); return ((0)|0);\n      return ((0)|0);\n     }\n     $481=(($477+12)|0);\n     $482=((HEAP32[(($481)>>2)])|0);\n     $483=($482|0)==($v_3_lcssa_i|0);\n     if (!($483)) {\n      _abort(); return ((0)|0);\n      return ((0)|0);\n     }\n     $485=(($473+8)|0);\n     $486=((HEAP32[(($485)>>2)])|0);\n     $487=($486|0)==($v_3_lcssa_i|0);\n     if ($487) {\n      HEAP32[(($481)>>2)]=$473;\n      HEAP32[(($485)>>2)]=$477;\n      $R_1_i122=$473;\n      break;\n     } else {\n      _abort(); return ((0)|0);\n      return ((0)|0);\n     }\n    }\n   } while(0);\n\n   $510=($471|0)==0;\n   L176: do {\n    if (!($510)) {\n     $512=(($v_3_lcssa_i+28)|0);\n     $513=((HEAP32[(($512)>>2)])|0);\n     $514=((1280+($513<<2))|0);\n     $515=((HEAP32[(($514)>>2)])|0);\n     $516=($v_3_lcssa_i|0)==($515|0);\n     do {\n      if ($516) {\n       HEAP32[(($514)>>2)]=$R_1_i122;\n       $cond_i123=($R_1_i122|0)==0;\n       if (!($cond_i123)) {\n        break;\n       }\n       $518=1<<$513;\n       $519=$518^-1;\n       $520=((HEAP32[((980)>>2)])|0);\n       $521=$520&$519;\n       HEAP32[((980)>>2)]=$521;\n       break L176;\n      } else {\n       $523=$471;\n       $524=((HEAP32[((992)>>2)])|0);\n       $525=($523>>>0)<($524>>>0);\n       if ($525) {\n        _abort(); return ((0)|0);\n        return ((0)|0);\n       }\n       $527=(($471+16)|0);\n       $528=((HEAP32[(($527)>>2)])|0);\n       $529=($528|0)==($v_3_lcssa_i|0);\n       if ($529) {\n        HEAP32[(($527)>>2)]=$R_1_i122;\n       } else {\n        $532=(($471+20)|0);\n        HEAP32[(($532)>>2)]=$R_1_i122;\n       }\n       $535=($R_1_i122|0)==0;\n       if ($535) {\n        break L176;\n       }\n      }\n     } while(0);\n     $537=$R_1_i122;\n     $538=((HEAP32[((992)>>2)])|0);\n     $539=($537>>>0)<($538>>>0);\n     if ($539) {\n      _abort(); return ((0)|0);\n      return ((0)|0);\n     }\n     $541=(($R_1_i122+24)|0);\n     HEAP32[(($541)>>2)]=$471;\n     $542=(($v_3_lcssa_i+16)|0);\n     $543=((HEAP32[(($542)>>2)])|0);\n     $544=($543|0)==0;\n     do {\n      if (!($544)) {\n       $546=$543;\n       $547=((HEAP32[((992)>>2)])|0);\n       $548=($546>>>0)<($547>>>0);\n       if ($548) {\n        _abort(); return ((0)|0);\n        return ((0)|0);\n       } else {\n        $550=(($R_1_i122+16)|0);\n        HEAP32[(($550)>>2)]=$543;\n        $551=(($543+24)|0);\n        HEAP32[(($551)>>2)]=$R_1_i122;\n        break;\n       }\n      }\n     } while(0);\n     $554=(($v_3_lcssa_i+20)|0);\n     $555=((HEAP32[(($554)>>2)])|0);\n     $556=($555|0)==0;\n     if ($556) {\n      break;\n     }\n     $558=$555;\n     $559=((HEAP32[((992)>>2)])|0);\n     $560=($558>>>0)<($559>>>0);\n     if ($560) {\n      _abort(); return ((0)|0);\n      return ((0)|0);\n     } else {\n      $562=(($R_1_i122+20)|0);\n      HEAP32[(($562)>>2)]=$555;\n      $563=(($555+24)|0);\n      HEAP32[(($563)>>2)]=$R_1_i122;\n      break;\n     }\n    }\n   } while(0);\n   $567=($rsize_3_lcssa_i>>>0)<((16)>>>0);\n   do {\n    if ($567) {\n     $569=((($rsize_3_lcssa_i)+($348))|0);\n     $570=$569|3;\n     $571=(($v_3_lcssa_i+4)|0);\n     HEAP32[(($571)>>2)]=$570;\n     $_sum19_i=((($569)+(4))|0);\n     $572=(($462+$_sum19_i)|0);\n     $573=$572;\n     $574=((HEAP32[(($573)>>2)])|0);\n     $575=$574|1;\n     HEAP32[(($573)>>2)]=$575;\n    } else {\n     $577=$348|3;\n     $578=(($v_3_lcssa_i+4)|0);\n     HEAP32[(($578)>>2)]=$577;\n     $579=$rsize_3_lcssa_i|1;\n     $_sum_i125136=$348|4;\n     $580=(($462+$_sum_i125136)|0);\n     $581=$580;\n     HEAP32[(($581)>>2)]=$579;\n     $_sum1_i126=((($rsize_3_lcssa_i)+($348))|0);\n     $582=(($462+$_sum1_i126)|0);\n     $583=$582;\n     HEAP32[(($583)>>2)]=$rsize_3_lcssa_i;\n     $584=$rsize_3_lcssa_i>>>3;\n     $585=($rsize_3_lcssa_i>>>0)<((256)>>>0);\n     if ($585) {\n      $587=$584<<1;\n      $588=((1016+($587<<2))|0);\n      $589=$588;\n      $590=((HEAP32[((976)>>2)])|0);\n      $591=1<<$584;\n      $592=$590&$591;\n      $593=($592|0)==0;\n      do {\n       if ($593) {\n        $595=$590|$591;\n        HEAP32[((976)>>2)]=$595;\n        $_sum15_pre_i=((($587)+(2))|0);\n        $_pre_i127=((1016+($_sum15_pre_i<<2))|0);\n        $F5_0_i=$589;$_pre_phi_i128=$_pre_i127;\n       } else {\n        $_sum18_i=((($587)+(2))|0);\n        $597=((1016+($_sum18_i<<2))|0);\n        $598=((HEAP32[(($597)>>2)])|0);\n        $599=$598;\n        $600=((HEAP32[((992)>>2)])|0);\n        $601=($599>>>0)<($600>>>0);\n        if (!($601)) {\n         $F5_0_i=$598;$_pre_phi_i128=$597;\n         break;\n        }\n        _abort(); return ((0)|0);\n        return ((0)|0);\n       }\n      } while(0);\n\n\n      HEAP32[(($_pre_phi_i128)>>2)]=$467;\n      $604=(($F5_0_i+12)|0);\n      HEAP32[(($604)>>2)]=$467;\n      $_sum16_i=((($348)+(8))|0);\n      $605=(($462+$_sum16_i)|0);\n      $606=$605;\n      HEAP32[(($606)>>2)]=$F5_0_i;\n      $_sum17_i=((($348)+(12))|0);\n      $607=(($462+$_sum17_i)|0);\n      $608=$607;\n      HEAP32[(($608)>>2)]=$589;\n      break;\n     }\n     $610=$466;\n     $611=$rsize_3_lcssa_i>>>8;\n     $612=($611|0)==0;\n     do {\n      if ($612) {\n       $I7_0_i=0;\n      } else {\n       $614=($rsize_3_lcssa_i>>>0)>((16777215)>>>0);\n       if ($614) {\n        $I7_0_i=31;\n        break;\n       }\n       $616=((($611)+(1048320))|0);\n       $617=$616>>>16;\n       $618=$617&8;\n       $619=$611<<$618;\n       $620=((($619)+(520192))|0);\n       $621=$620>>>16;\n       $622=$621&4;\n       $623=$622|$618;\n       $624=$619<<$622;\n       $625=((($624)+(245760))|0);\n       $626=$625>>>16;\n       $627=$626&2;\n       $628=$623|$627;\n       $629=(((14)-($628))|0);\n       $630=$624<<$627;\n       $631=$630>>>15;\n       $632=((($629)+($631))|0);\n       $633=$632<<1;\n       $634=((($632)+(7))|0);\n       $635=$rsize_3_lcssa_i>>>($634>>>0);\n       $636=$635&1;\n       $637=$636|$633;\n       $I7_0_i=$637;\n      }\n     } while(0);\n\n     $639=((1280+($I7_0_i<<2))|0);\n     $_sum2_i=((($348)+(28))|0);\n     $640=(($462+$_sum2_i)|0);\n     $641=$640;\n     HEAP32[(($641)>>2)]=$I7_0_i;\n     $_sum3_i129=((($348)+(16))|0);\n     $642=(($462+$_sum3_i129)|0);\n     $_sum4_i130=((($348)+(20))|0);\n     $643=(($462+$_sum4_i130)|0);\n     $644=$643;\n     HEAP32[(($644)>>2)]=0;\n     $645=$642;\n     HEAP32[(($645)>>2)]=0;\n     $646=((HEAP32[((980)>>2)])|0);\n     $647=1<<$I7_0_i;\n     $648=$646&$647;\n     $649=($648|0)==0;\n     if ($649) {\n      $651=$646|$647;\n      HEAP32[((980)>>2)]=$651;\n      HEAP32[(($639)>>2)]=$610;\n      $652=$639;\n      $_sum5_i=((($348)+(24))|0);\n      $653=(($462+$_sum5_i)|0);\n      $654=$653;\n      HEAP32[(($654)>>2)]=$652;\n      $_sum6_i=((($348)+(12))|0);\n      $655=(($462+$_sum6_i)|0);\n      $656=$655;\n      HEAP32[(($656)>>2)]=$610;\n      $_sum7_i=((($348)+(8))|0);\n      $657=(($462+$_sum7_i)|0);\n      $658=$657;\n      HEAP32[(($658)>>2)]=$610;\n      break;\n     }\n     $660=((HEAP32[(($639)>>2)])|0);\n     $661=($I7_0_i|0)==31;\n     if ($661) {\n      $666=0;\n     } else {\n      $663=$I7_0_i>>>1;\n      $664=(((25)-($663))|0);\n      $666=$664;\n     }\n\n     $667=$rsize_3_lcssa_i<<$666;\n     $K12_0_i=$667;$T_0_i=$660;\n     while(1) {\n\n\n      $669=(($T_0_i+4)|0);\n      $670=((HEAP32[(($669)>>2)])|0);\n      $671=$670&-8;\n      $672=($671|0)==($rsize_3_lcssa_i|0);\n      if ($672) {\n       break;\n      }\n      $674=$K12_0_i>>>31;\n      $675=(($T_0_i+16+($674<<2))|0);\n      $676=((HEAP32[(($675)>>2)])|0);\n      $677=($676|0)==0;\n      $678=$K12_0_i<<1;\n      if ($677) {\n       label = 151;\n       break;\n      } else {\n       $K12_0_i=$678;$T_0_i=$676;\n      }\n     }\n     if ((label|0) == 151) {\n      $680=$675;\n      $681=((HEAP32[((992)>>2)])|0);\n      $682=($680>>>0)<($681>>>0);\n      if ($682) {\n       _abort(); return ((0)|0);\n       return ((0)|0);\n      } else {\n       HEAP32[(($675)>>2)]=$610;\n       $_sum12_i=((($348)+(24))|0);\n       $684=(($462+$_sum12_i)|0);\n       $685=$684;\n       HEAP32[(($685)>>2)]=$T_0_i;\n       $_sum13_i=((($348)+(12))|0);\n       $686=(($462+$_sum13_i)|0);\n       $687=$686;\n       HEAP32[(($687)>>2)]=$610;\n       $_sum14_i=((($348)+(8))|0);\n       $688=(($462+$_sum14_i)|0);\n       $689=$688;\n       HEAP32[(($689)>>2)]=$610;\n       break;\n      }\n     }\n     $692=(($T_0_i+8)|0);\n     $693=((HEAP32[(($692)>>2)])|0);\n     $694=$T_0_i;\n     $695=((HEAP32[((992)>>2)])|0);\n     $696=($694>>>0)<($695>>>0);\n     if ($696) {\n      _abort(); return ((0)|0);\n      return ((0)|0);\n     }\n     $698=$693;\n     $699=($698>>>0)<($695>>>0);\n     if ($699) {\n      _abort(); return ((0)|0);\n      return ((0)|0);\n     } else {\n      $701=(($693+12)|0);\n      HEAP32[(($701)>>2)]=$610;\n      HEAP32[(($692)>>2)]=$610;\n      $_sum9_i=((($348)+(8))|0);\n      $702=(($462+$_sum9_i)|0);\n      $703=$702;\n      HEAP32[(($703)>>2)]=$693;\n      $_sum10_i=((($348)+(12))|0);\n      $704=(($462+$_sum10_i)|0);\n      $705=$704;\n      HEAP32[(($705)>>2)]=$T_0_i;\n      $_sum11_i=((($348)+(24))|0);\n      $706=(($462+$_sum11_i)|0);\n      $707=$706;\n      HEAP32[(($707)>>2)]=0;\n      break;\n     }\n    }\n   } while(0);\n   $709=(($v_3_lcssa_i+8)|0);\n   $710=$709;\n   $711=($709|0)==0;\n   if ($711) {\n    $nb_0=$348;\n    break;\n   } else {\n    $mem_0=$710;\n   }\n\n   return (($mem_0)|0);\n  }\n } while(0);\n\n $712=((HEAP32[((984)>>2)])|0);\n $713=($nb_0>>>0)>($712>>>0);\n if (!($713)) {\n  $715=((($712)-($nb_0))|0);\n  $716=((HEAP32[((996)>>2)])|0);\n  $717=($715>>>0)>((15)>>>0);\n  if ($717) {\n   $719=$716;\n   $720=(($719+$nb_0)|0);\n   $721=$720;\n   HEAP32[((996)>>2)]=$721;\n   HEAP32[((984)>>2)]=$715;\n   $722=$715|1;\n   $_sum102=((($nb_0)+(4))|0);\n   $723=(($719+$_sum102)|0);\n   $724=$723;\n   HEAP32[(($724)>>2)]=$722;\n   $725=(($719+$712)|0);\n   $726=$725;\n   HEAP32[(($726)>>2)]=$715;\n   $727=$nb_0|3;\n   $728=(($716+4)|0);\n   HEAP32[(($728)>>2)]=$727;\n  } else {\n   HEAP32[((984)>>2)]=0;\n   HEAP32[((996)>>2)]=0;\n   $730=$712|3;\n   $731=(($716+4)|0);\n   HEAP32[(($731)>>2)]=$730;\n   $732=$716;\n   $_sum101=((($712)+(4))|0);\n   $733=(($732+$_sum101)|0);\n   $734=$733;\n   $735=((HEAP32[(($734)>>2)])|0);\n   $736=$735|1;\n   HEAP32[(($734)>>2)]=$736;\n  }\n  $738=(($716+8)|0);\n  $739=$738;\n  $mem_0=$739;\n\n  return (($mem_0)|0);\n }\n $741=((HEAP32[((988)>>2)])|0);\n $742=($nb_0>>>0)<($741>>>0);\n if ($742) {\n  $744=((($741)-($nb_0))|0);\n  HEAP32[((988)>>2)]=$744;\n  $745=((HEAP32[((1000)>>2)])|0);\n  $746=$745;\n  $747=(($746+$nb_0)|0);\n  $748=$747;\n  HEAP32[((1000)>>2)]=$748;\n  $749=$744|1;\n  $_sum=((($nb_0)+(4))|0);\n  $750=(($746+$_sum)|0);\n  $751=$750;\n  HEAP32[(($751)>>2)]=$749;\n  $752=$nb_0|3;\n  $753=(($745+4)|0);\n  HEAP32[(($753)>>2)]=$752;\n  $754=(($745+8)|0);\n  $755=$754;\n  $mem_0=$755;\n\n  return (($mem_0)|0);\n }\n $757=((HEAP32[((952)>>2)])|0);\n $758=($757|0)==0;\n do {\n  if ($758) {\n   $760=((_sysconf(((30)|0)))|0);\n   $761=((($760)-(1))|0);\n   $762=$761&$760;\n   $763=($762|0)==0;\n   if ($763) {\n    HEAP32[((960)>>2)]=$760;\n    HEAP32[((956)>>2)]=$760;\n    HEAP32[((964)>>2)]=-1;\n    HEAP32[((968)>>2)]=-1;\n    HEAP32[((972)>>2)]=0;\n    HEAP32[((1420)>>2)]=0;\n    $765=((_time(((0)|0)))|0);\n    $766=$765&-16;\n    $767=$766^1431655768;\n    HEAP32[((952)>>2)]=$767;\n    break;\n   } else {\n    _abort(); return ((0)|0);\n    return ((0)|0);\n   }\n  }\n } while(0);\n $769=((($nb_0)+(48))|0);\n $770=((HEAP32[((960)>>2)])|0);\n $771=((($nb_0)+(47))|0);\n $772=((($770)+($771))|0);\n $773=(((-$770))|0);\n $774=$772&$773;\n $775=($774>>>0)>($nb_0>>>0);\n if (!($775)) {\n  $mem_0=0;\n\n  return (($mem_0)|0);\n }\n $777=((HEAP32[((1416)>>2)])|0);\n $778=($777|0)==0;\n do {\n  if (!($778)) {\n   $780=((HEAP32[((1408)>>2)])|0);\n   $781=((($780)+($774))|0);\n   $782=($781>>>0)<=($780>>>0);\n   $783=($781>>>0)>($777>>>0);\n   $or_cond1_i=$782|$783;\n   if ($or_cond1_i) {\n    $mem_0=0;\n   } else {\n    break;\n   }\n\n   return (($mem_0)|0);\n  }\n } while(0);\n $785=((HEAP32[((1420)>>2)])|0);\n $786=$785&4;\n $787=($786|0)==0;\n L268: do {\n  if ($787) {\n   $789=((HEAP32[((1000)>>2)])|0);\n   $790=($789|0)==0;\n   L270: do {\n    if ($790) {\n     label = 181;\n    } else {\n     $792=$789;\n     $sp_0_i_i=1424;\n     while(1) {\n\n      $794=(($sp_0_i_i)|0);\n      $795=((HEAP32[(($794)>>2)])|0);\n      $796=($795>>>0)>($792>>>0);\n      if (!($796)) {\n       $798=(($sp_0_i_i+4)|0);\n       $799=((HEAP32[(($798)>>2)])|0);\n       $800=(($795+$799)|0);\n       $801=($800>>>0)>($792>>>0);\n       if ($801) {\n        break;\n       }\n      }\n      $803=(($sp_0_i_i+8)|0);\n      $804=((HEAP32[(($803)>>2)])|0);\n      $805=($804|0)==0;\n      if ($805) {\n       label = 181;\n       break L270;\n      } else {\n       $sp_0_i_i=$804;\n      }\n     }\n     $806=($sp_0_i_i|0)==0;\n     if ($806) {\n      label = 181;\n      break;\n     }\n     $836=((HEAP32[((988)>>2)])|0);\n     $837=((($772)-($836))|0);\n     $838=$837&$773;\n     $839=($838>>>0)<((2147483647)>>>0);\n     if (!($839)) {\n      $tsize_0303639_i=0;\n      break;\n     }\n     $841=((_sbrk((($838)|0)))|0);\n     $842=((HEAP32[(($794)>>2)])|0);\n     $843=((HEAP32[(($798)>>2)])|0);\n     $844=(($842+$843)|0);\n     $845=($841|0)==($844|0);\n     $_3_i=($845?$838:0);\n     $_4_i=($845?$841:-1);\n     $tbase_0_i=$_4_i;$tsize_0_i=$_3_i;$br_0_i=$841;$ssize_1_i=$838;\n     label = 190;\n    }\n   } while(0);\n   do {\n    if ((label|0) == 181) {\n     $807=((_sbrk(((0)|0)))|0);\n     $808=($807|0)==-1;\n     if ($808) {\n      $tsize_0303639_i=0;\n      break;\n     }\n     $810=$807;\n     $811=((HEAP32[((956)>>2)])|0);\n     $812=((($811)-(1))|0);\n     $813=$812&$810;\n     $814=($813|0)==0;\n     if ($814) {\n      $ssize_0_i=$774;\n     } else {\n      $816=((($812)+($810))|0);\n      $817=(((-$811))|0);\n      $818=$816&$817;\n      $819=((($774)-($810))|0);\n      $820=((($819)+($818))|0);\n      $ssize_0_i=$820;\n     }\n\n     $822=((HEAP32[((1408)>>2)])|0);\n     $823=((($822)+($ssize_0_i))|0);\n     $824=($ssize_0_i>>>0)>($nb_0>>>0);\n     $825=($ssize_0_i>>>0)<((2147483647)>>>0);\n     $or_cond_i131=$824&$825;\n     if (!($or_cond_i131)) {\n      $tsize_0303639_i=0;\n      break;\n     }\n     $827=((HEAP32[((1416)>>2)])|0);\n     $828=($827|0)==0;\n     if (!($828)) {\n      $830=($823>>>0)<=($822>>>0);\n      $831=($823>>>0)>($827>>>0);\n      $or_cond2_i=$830|$831;\n      if ($or_cond2_i) {\n       $tsize_0303639_i=0;\n       break;\n      }\n     }\n     $833=((_sbrk((($ssize_0_i)|0)))|0);\n     $834=($833|0)==($807|0);\n     $ssize_0__i=($834?$ssize_0_i:0);\n     $__i=($834?$807:-1);\n     $tbase_0_i=$__i;$tsize_0_i=$ssize_0__i;$br_0_i=$833;$ssize_1_i=$ssize_0_i;\n     label = 190;\n    }\n   } while(0);\n   L290: do {\n    if ((label|0) == 190) {\n\n\n\n\n     $847=(((-$ssize_1_i))|0);\n     $848=($tbase_0_i|0)==-1;\n     if (!($848)) {\n      $tsize_244_i=$tsize_0_i;$tbase_245_i=$tbase_0_i;\n      label = 201;\n      break L268;\n     }\n     $850=($br_0_i|0)!=-1;\n     $851=($ssize_1_i>>>0)<((2147483647)>>>0);\n     $or_cond5_i=$850&$851;\n     $852=($ssize_1_i>>>0)<($769>>>0);\n     $or_cond6_i=$or_cond5_i&$852;\n     do {\n      if ($or_cond6_i) {\n       $854=((HEAP32[((960)>>2)])|0);\n       $855=((($771)-($ssize_1_i))|0);\n       $856=((($855)+($854))|0);\n       $857=(((-$854))|0);\n       $858=$856&$857;\n       $859=($858>>>0)<((2147483647)>>>0);\n       if (!($859)) {\n        $ssize_2_i=$ssize_1_i;\n        break;\n       }\n       $861=((_sbrk((($858)|0)))|0);\n       $862=($861|0)==-1;\n       if ($862) {\n        $866=((_sbrk((($847)|0)))|0);\n        $tsize_0303639_i=$tsize_0_i;\n        break L290;\n       } else {\n        $864=((($858)+($ssize_1_i))|0);\n        $ssize_2_i=$864;\n        break;\n       }\n      } else {\n       $ssize_2_i=$ssize_1_i;\n      }\n     } while(0);\n\n     $868=($br_0_i|0)==-1;\n     if ($868) {\n      $tsize_0303639_i=$tsize_0_i;\n     } else {\n      $tsize_244_i=$ssize_2_i;$tbase_245_i=$br_0_i;\n      label = 201;\n      break L268;\n     }\n    }\n   } while(0);\n\n   $869=((HEAP32[((1420)>>2)])|0);\n   $870=$869|4;\n   HEAP32[((1420)>>2)]=$870;\n   $tsize_1_i=$tsize_0303639_i;\n   label = 198;\n  } else {\n   $tsize_1_i=0;\n   label = 198;\n  }\n } while(0);\n do {\n  if ((label|0) == 198) {\n\n   $872=($774>>>0)<((2147483647)>>>0);\n   if (!($872)) {\n    break;\n   }\n   $874=((_sbrk((($774)|0)))|0);\n   $875=((_sbrk(((0)|0)))|0);\n   $notlhs_i=($874|0)!=-1;\n   $notrhs_i=($875|0)!=-1;\n   $or_cond8_not_i=$notrhs_i&$notlhs_i;\n   $876=($874>>>0)<($875>>>0);\n   $or_cond9_i=$or_cond8_not_i&$876;\n   if (!($or_cond9_i)) {\n    break;\n   }\n   $877=$875;\n   $878=$874;\n   $879=((($877)-($878))|0);\n   $880=((($nb_0)+(40))|0);\n   $881=($879>>>0)>($880>>>0);\n   $_tsize_1_i=($881?$879:$tsize_1_i);\n   $_tbase_1_i=($881?$874:-1);\n   $882=($_tbase_1_i|0)==-1;\n   if (!($882)) {\n    $tsize_244_i=$_tsize_1_i;$tbase_245_i=$_tbase_1_i;\n    label = 201;\n   }\n  }\n } while(0);\n do {\n  if ((label|0) == 201) {\n\n\n   $883=((HEAP32[((1408)>>2)])|0);\n   $884=((($883)+($tsize_244_i))|0);\n   HEAP32[((1408)>>2)]=$884;\n   $885=((HEAP32[((1412)>>2)])|0);\n   $886=($884>>>0)>($885>>>0);\n   if ($886) {\n    HEAP32[((1412)>>2)]=$884;\n   }\n   $888=((HEAP32[((1000)>>2)])|0);\n   $889=($888|0)==0;\n   L310: do {\n    if ($889) {\n     $891=((HEAP32[((992)>>2)])|0);\n     $892=($891|0)==0;\n     $893=($tbase_245_i>>>0)<($891>>>0);\n     $or_cond10_i=$892|$893;\n     if ($or_cond10_i) {\n      HEAP32[((992)>>2)]=$tbase_245_i;\n     }\n     HEAP32[((1424)>>2)]=$tbase_245_i;\n     HEAP32[((1428)>>2)]=$tsize_244_i;\n     HEAP32[((1436)>>2)]=0;\n     $895=((HEAP32[((952)>>2)])|0);\n     HEAP32[((1012)>>2)]=$895;\n     HEAP32[((1008)>>2)]=-1;\n     $i_02_i_i=0;\n     while(1) {\n\n      $897=$i_02_i_i<<1;\n      $898=((1016+($897<<2))|0);\n      $899=$898;\n      $_sum_i_i=((($897)+(3))|0);\n      $900=((1016+($_sum_i_i<<2))|0);\n      HEAP32[(($900)>>2)]=$899;\n      $_sum1_i_i=((($897)+(2))|0);\n      $901=((1016+($_sum1_i_i<<2))|0);\n      HEAP32[(($901)>>2)]=$899;\n      $902=((($i_02_i_i)+(1))|0);\n      $903=($902>>>0)<((32)>>>0);\n      if ($903) {\n       $i_02_i_i=$902;\n      } else {\n       break;\n      }\n     }\n     $904=((($tsize_244_i)-(40))|0);\n     $905=(($tbase_245_i+8)|0);\n     $906=$905;\n     $907=$906&7;\n     $908=($907|0)==0;\n     if ($908) {\n      $912=0;\n     } else {\n      $910=(((-$906))|0);\n      $911=$910&7;\n      $912=$911;\n     }\n\n     $913=(($tbase_245_i+$912)|0);\n     $914=$913;\n     $915=((($904)-($912))|0);\n     HEAP32[((1000)>>2)]=$914;\n     HEAP32[((988)>>2)]=$915;\n     $916=$915|1;\n     $_sum_i14_i=((($912)+(4))|0);\n     $917=(($tbase_245_i+$_sum_i14_i)|0);\n     $918=$917;\n     HEAP32[(($918)>>2)]=$916;\n     $_sum2_i_i=((($tsize_244_i)-(36))|0);\n     $919=(($tbase_245_i+$_sum2_i_i)|0);\n     $920=$919;\n     HEAP32[(($920)>>2)]=40;\n     $921=((HEAP32[((968)>>2)])|0);\n     HEAP32[((1004)>>2)]=$921;\n    } else {\n     $sp_067_i=1424;\n     while(1) {\n\n      $922=(($sp_067_i)|0);\n      $923=((HEAP32[(($922)>>2)])|0);\n      $924=(($sp_067_i+4)|0);\n      $925=((HEAP32[(($924)>>2)])|0);\n      $926=(($923+$925)|0);\n      $927=($tbase_245_i|0)==($926|0);\n      if ($927) {\n       label = 213;\n       break;\n      }\n      $929=(($sp_067_i+8)|0);\n      $930=((HEAP32[(($929)>>2)])|0);\n      $931=($930|0)==0;\n      if ($931) {\n       break;\n      } else {\n       $sp_067_i=$930;\n      }\n     }\n     do {\n      if ((label|0) == 213) {\n       $932=(($sp_067_i+12)|0);\n       $933=((HEAP32[(($932)>>2)])|0);\n       $934=$933&8;\n       $935=($934|0)==0;\n       if (!($935)) {\n        break;\n       }\n       $937=$888;\n       $938=($937>>>0)>=($923>>>0);\n       $939=($937>>>0)<($tbase_245_i>>>0);\n       $or_cond47_i=$938&$939;\n       if (!($or_cond47_i)) {\n        break;\n       }\n       $941=((($925)+($tsize_244_i))|0);\n       HEAP32[(($924)>>2)]=$941;\n       $942=((HEAP32[((988)>>2)])|0);\n       $943=((($942)+($tsize_244_i))|0);\n       $944=(($888+8)|0);\n       $945=$944;\n       $946=$945&7;\n       $947=($946|0)==0;\n       if ($947) {\n        $951=0;\n       } else {\n        $949=(((-$945))|0);\n        $950=$949&7;\n        $951=$950;\n       }\n\n       $952=(($937+$951)|0);\n       $953=$952;\n       $954=((($943)-($951))|0);\n       HEAP32[((1000)>>2)]=$953;\n       HEAP32[((988)>>2)]=$954;\n       $955=$954|1;\n       $_sum_i18_i=((($951)+(4))|0);\n       $956=(($937+$_sum_i18_i)|0);\n       $957=$956;\n       HEAP32[(($957)>>2)]=$955;\n       $_sum2_i19_i=((($943)+(4))|0);\n       $958=(($937+$_sum2_i19_i)|0);\n       $959=$958;\n       HEAP32[(($959)>>2)]=40;\n       $960=((HEAP32[((968)>>2)])|0);\n       HEAP32[((1004)>>2)]=$960;\n       break L310;\n      }\n     } while(0);\n     $961=((HEAP32[((992)>>2)])|0);\n     $962=($tbase_245_i>>>0)<($961>>>0);\n     if ($962) {\n      HEAP32[((992)>>2)]=$tbase_245_i;\n     }\n     $964=(($tbase_245_i+$tsize_244_i)|0);\n     $sp_160_i=1424;\n     while(1) {\n\n      $966=(($sp_160_i)|0);\n      $967=((HEAP32[(($966)>>2)])|0);\n      $968=($967|0)==($964|0);\n      if ($968) {\n       label = 223;\n       break;\n      }\n      $970=(($sp_160_i+8)|0);\n      $971=((HEAP32[(($970)>>2)])|0);\n      $972=($971|0)==0;\n      if ($972) {\n       break;\n      } else {\n       $sp_160_i=$971;\n      }\n     }\n     do {\n      if ((label|0) == 223) {\n       $973=(($sp_160_i+12)|0);\n       $974=((HEAP32[(($973)>>2)])|0);\n       $975=$974&8;\n       $976=($975|0)==0;\n       if (!($976)) {\n        break;\n       }\n       HEAP32[(($966)>>2)]=$tbase_245_i;\n       $978=(($sp_160_i+4)|0);\n       $979=((HEAP32[(($978)>>2)])|0);\n       $980=((($979)+($tsize_244_i))|0);\n       HEAP32[(($978)>>2)]=$980;\n       $981=(($tbase_245_i+8)|0);\n       $982=$981;\n       $983=$982&7;\n       $984=($983|0)==0;\n       if ($984) {\n        $989=0;\n       } else {\n        $986=(((-$982))|0);\n        $987=$986&7;\n        $989=$987;\n       }\n\n       $990=(($tbase_245_i+$989)|0);\n       $_sum93_i=((($tsize_244_i)+(8))|0);\n       $991=(($tbase_245_i+$_sum93_i)|0);\n       $992=$991;\n       $993=$992&7;\n       $994=($993|0)==0;\n       if ($994) {\n        $999=0;\n       } else {\n        $996=(((-$992))|0);\n        $997=$996&7;\n        $999=$997;\n       }\n\n       $_sum94_i=((($999)+($tsize_244_i))|0);\n       $1000=(($tbase_245_i+$_sum94_i)|0);\n       $1001=$1000;\n       $1002=$1000;\n       $1003=$990;\n       $1004=((($1002)-($1003))|0);\n       $_sum_i21_i=((($989)+($nb_0))|0);\n       $1005=(($tbase_245_i+$_sum_i21_i)|0);\n       $1006=$1005;\n       $1007=((($1004)-($nb_0))|0);\n       $1008=$nb_0|3;\n       $_sum1_i22_i=((($989)+(4))|0);\n       $1009=(($tbase_245_i+$_sum1_i22_i)|0);\n       $1010=$1009;\n       HEAP32[(($1010)>>2)]=$1008;\n       $1011=((HEAP32[((1000)>>2)])|0);\n       $1012=($1001|0)==($1011|0);\n       do {\n        if ($1012) {\n         $1014=((HEAP32[((988)>>2)])|0);\n         $1015=((($1014)+($1007))|0);\n         HEAP32[((988)>>2)]=$1015;\n         HEAP32[((1000)>>2)]=$1006;\n         $1016=$1015|1;\n         $_sum46_i_i=((($_sum_i21_i)+(4))|0);\n         $1017=(($tbase_245_i+$_sum46_i_i)|0);\n         $1018=$1017;\n         HEAP32[(($1018)>>2)]=$1016;\n        } else {\n         $1020=((HEAP32[((996)>>2)])|0);\n         $1021=($1001|0)==($1020|0);\n         if ($1021) {\n          $1023=((HEAP32[((984)>>2)])|0);\n          $1024=((($1023)+($1007))|0);\n          HEAP32[((984)>>2)]=$1024;\n          HEAP32[((996)>>2)]=$1006;\n          $1025=$1024|1;\n          $_sum44_i_i=((($_sum_i21_i)+(4))|0);\n          $1026=(($tbase_245_i+$_sum44_i_i)|0);\n          $1027=$1026;\n          HEAP32[(($1027)>>2)]=$1025;\n          $_sum45_i_i=((($1024)+($_sum_i21_i))|0);\n          $1028=(($tbase_245_i+$_sum45_i_i)|0);\n          $1029=$1028;\n          HEAP32[(($1029)>>2)]=$1024;\n          break;\n         }\n         $_sum2_i23_i=((($tsize_244_i)+(4))|0);\n         $_sum95_i=((($_sum2_i23_i)+($999))|0);\n         $1031=(($tbase_245_i+$_sum95_i)|0);\n         $1032=$1031;\n         $1033=((HEAP32[(($1032)>>2)])|0);\n         $1034=$1033&3;\n         $1035=($1034|0)==1;\n         if ($1035) {\n          $1037=$1033&-8;\n          $1038=$1033>>>3;\n          $1039=($1033>>>0)<((256)>>>0);\n          L355: do {\n           if ($1039) {\n            $_sum3940_i_i=$999|8;\n            $_sum105_i=((($_sum3940_i_i)+($tsize_244_i))|0);\n            $1041=(($tbase_245_i+$_sum105_i)|0);\n            $1042=$1041;\n            $1043=((HEAP32[(($1042)>>2)])|0);\n            $_sum41_i_i=((($tsize_244_i)+(12))|0);\n            $_sum106_i=((($_sum41_i_i)+($999))|0);\n            $1044=(($tbase_245_i+$_sum106_i)|0);\n            $1045=$1044;\n            $1046=((HEAP32[(($1045)>>2)])|0);\n            $1047=$1038<<1;\n            $1048=((1016+($1047<<2))|0);\n            $1049=$1048;\n            $1050=($1043|0)==($1049|0);\n            do {\n             if (!($1050)) {\n              $1052=$1043;\n              $1053=((HEAP32[((992)>>2)])|0);\n              $1054=($1052>>>0)<($1053>>>0);\n              if ($1054) {\n               _abort(); return ((0)|0);\n               return ((0)|0);\n              }\n              $1056=(($1043+12)|0);\n              $1057=((HEAP32[(($1056)>>2)])|0);\n              $1058=($1057|0)==($1001|0);\n              if ($1058) {\n               break;\n              }\n              _abort(); return ((0)|0);\n              return ((0)|0);\n             }\n            } while(0);\n            $1059=($1046|0)==($1043|0);\n            if ($1059) {\n             $1061=1<<$1038;\n             $1062=$1061^-1;\n             $1063=((HEAP32[((976)>>2)])|0);\n             $1064=$1063&$1062;\n             HEAP32[((976)>>2)]=$1064;\n             break;\n            }\n            $1066=($1046|0)==($1049|0);\n            do {\n             if ($1066) {\n              $_pre56_i_i=(($1046+8)|0);\n              $_pre_phi57_i_i=$_pre56_i_i;\n             } else {\n              $1068=$1046;\n              $1069=((HEAP32[((992)>>2)])|0);\n              $1070=($1068>>>0)<($1069>>>0);\n              if ($1070) {\n               _abort(); return ((0)|0);\n               return ((0)|0);\n              }\n              $1072=(($1046+8)|0);\n              $1073=((HEAP32[(($1072)>>2)])|0);\n              $1074=($1073|0)==($1001|0);\n              if ($1074) {\n               $_pre_phi57_i_i=$1072;\n               break;\n              }\n              _abort(); return ((0)|0);\n              return ((0)|0);\n             }\n            } while(0);\n\n            $1075=(($1043+12)|0);\n            HEAP32[(($1075)>>2)]=$1046;\n            HEAP32[(($_pre_phi57_i_i)>>2)]=$1043;\n           } else {\n            $1077=$1000;\n            $_sum34_i_i=$999|24;\n            $_sum96_i=((($_sum34_i_i)+($tsize_244_i))|0);\n            $1078=(($tbase_245_i+$_sum96_i)|0);\n            $1079=$1078;\n            $1080=((HEAP32[(($1079)>>2)])|0);\n            $_sum5_i_i=((($tsize_244_i)+(12))|0);\n            $_sum97_i=((($_sum5_i_i)+($999))|0);\n            $1081=(($tbase_245_i+$_sum97_i)|0);\n            $1082=$1081;\n            $1083=((HEAP32[(($1082)>>2)])|0);\n            $1084=($1083|0)==($1077|0);\n            do {\n             if ($1084) {\n              $_sum67_i_i=$999|16;\n              $_sum103_i=((($_sum2_i23_i)+($_sum67_i_i))|0);\n              $1102=(($tbase_245_i+$_sum103_i)|0);\n              $1103=$1102;\n              $1104=((HEAP32[(($1103)>>2)])|0);\n              $1105=($1104|0)==0;\n              if ($1105) {\n               $_sum104_i=((($_sum67_i_i)+($tsize_244_i))|0);\n               $1107=(($tbase_245_i+$_sum104_i)|0);\n               $1108=$1107;\n               $1109=((HEAP32[(($1108)>>2)])|0);\n               $1110=($1109|0)==0;\n               if ($1110) {\n                $R_1_i_i=0;\n                break;\n               } else {\n                $R_0_i_i=$1109;$RP_0_i_i=$1108;\n               }\n              } else {\n               $R_0_i_i=$1104;$RP_0_i_i=$1103;\n              }\n              while(1) {\n\n\n               $1111=(($R_0_i_i+20)|0);\n               $1112=((HEAP32[(($1111)>>2)])|0);\n               $1113=($1112|0)==0;\n               if (!($1113)) {\n                $R_0_i_i=$1112;$RP_0_i_i=$1111;\n                continue;\n               }\n               $1115=(($R_0_i_i+16)|0);\n               $1116=((HEAP32[(($1115)>>2)])|0);\n               $1117=($1116|0)==0;\n               if ($1117) {\n                break;\n               } else {\n                $R_0_i_i=$1116;$RP_0_i_i=$1115;\n               }\n              }\n              $1119=$RP_0_i_i;\n              $1120=((HEAP32[((992)>>2)])|0);\n              $1121=($1119>>>0)<($1120>>>0);\n              if ($1121) {\n               _abort(); return ((0)|0);\n               return ((0)|0);\n              } else {\n               HEAP32[(($RP_0_i_i)>>2)]=0;\n               $R_1_i_i=$R_0_i_i;\n               break;\n              }\n             } else {\n              $_sum3637_i_i=$999|8;\n              $_sum98_i=((($_sum3637_i_i)+($tsize_244_i))|0);\n              $1086=(($tbase_245_i+$_sum98_i)|0);\n              $1087=$1086;\n              $1088=((HEAP32[(($1087)>>2)])|0);\n              $1089=$1088;\n              $1090=((HEAP32[((992)>>2)])|0);\n              $1091=($1089>>>0)<($1090>>>0);\n              if ($1091) {\n               _abort(); return ((0)|0);\n               return ((0)|0);\n              }\n              $1093=(($1088+12)|0);\n              $1094=((HEAP32[(($1093)>>2)])|0);\n              $1095=($1094|0)==($1077|0);\n              if (!($1095)) {\n               _abort(); return ((0)|0);\n               return ((0)|0);\n              }\n              $1097=(($1083+8)|0);\n              $1098=((HEAP32[(($1097)>>2)])|0);\n              $1099=($1098|0)==($1077|0);\n              if ($1099) {\n               HEAP32[(($1093)>>2)]=$1083;\n               HEAP32[(($1097)>>2)]=$1088;\n               $R_1_i_i=$1083;\n               break;\n              } else {\n               _abort(); return ((0)|0);\n               return ((0)|0);\n              }\n             }\n            } while(0);\n\n            $1125=($1080|0)==0;\n            if ($1125) {\n             break;\n            }\n            $_sum31_i_i=((($tsize_244_i)+(28))|0);\n            $_sum99_i=((($_sum31_i_i)+($999))|0);\n            $1127=(($tbase_245_i+$_sum99_i)|0);\n            $1128=$1127;\n            $1129=((HEAP32[(($1128)>>2)])|0);\n            $1130=((1280+($1129<<2))|0);\n            $1131=((HEAP32[(($1130)>>2)])|0);\n            $1132=($1077|0)==($1131|0);\n            do {\n             if ($1132) {\n              HEAP32[(($1130)>>2)]=$R_1_i_i;\n              $cond_i_i=($R_1_i_i|0)==0;\n              if (!($cond_i_i)) {\n               break;\n              }\n              $1134=1<<$1129;\n              $1135=$1134^-1;\n              $1136=((HEAP32[((980)>>2)])|0);\n              $1137=$1136&$1135;\n              HEAP32[((980)>>2)]=$1137;\n              break L355;\n             } else {\n              $1139=$1080;\n              $1140=((HEAP32[((992)>>2)])|0);\n              $1141=($1139>>>0)<($1140>>>0);\n              if ($1141) {\n               _abort(); return ((0)|0);\n               return ((0)|0);\n              }\n              $1143=(($1080+16)|0);\n              $1144=((HEAP32[(($1143)>>2)])|0);\n              $1145=($1144|0)==($1077|0);\n              if ($1145) {\n               HEAP32[(($1143)>>2)]=$R_1_i_i;\n              } else {\n               $1148=(($1080+20)|0);\n               HEAP32[(($1148)>>2)]=$R_1_i_i;\n              }\n              $1151=($R_1_i_i|0)==0;\n              if ($1151) {\n               break L355;\n              }\n             }\n            } while(0);\n            $1153=$R_1_i_i;\n            $1154=((HEAP32[((992)>>2)])|0);\n            $1155=($1153>>>0)<($1154>>>0);\n            if ($1155) {\n             _abort(); return ((0)|0);\n             return ((0)|0);\n            }\n            $1157=(($R_1_i_i+24)|0);\n            HEAP32[(($1157)>>2)]=$1080;\n            $_sum3233_i_i=$999|16;\n            $_sum100_i=((($_sum3233_i_i)+($tsize_244_i))|0);\n            $1158=(($tbase_245_i+$_sum100_i)|0);\n            $1159=$1158;\n            $1160=((HEAP32[(($1159)>>2)])|0);\n            $1161=($1160|0)==0;\n            do {\n             if (!($1161)) {\n              $1163=$1160;\n              $1164=((HEAP32[((992)>>2)])|0);\n              $1165=($1163>>>0)<($1164>>>0);\n              if ($1165) {\n               _abort(); return ((0)|0);\n               return ((0)|0);\n              } else {\n               $1167=(($R_1_i_i+16)|0);\n               HEAP32[(($1167)>>2)]=$1160;\n               $1168=(($1160+24)|0);\n               HEAP32[(($1168)>>2)]=$R_1_i_i;\n               break;\n              }\n             }\n            } while(0);\n            $_sum101_i=((($_sum2_i23_i)+($_sum3233_i_i))|0);\n            $1171=(($tbase_245_i+$_sum101_i)|0);\n            $1172=$1171;\n            $1173=((HEAP32[(($1172)>>2)])|0);\n            $1174=($1173|0)==0;\n            if ($1174) {\n             break;\n            }\n            $1176=$1173;\n            $1177=((HEAP32[((992)>>2)])|0);\n            $1178=($1176>>>0)<($1177>>>0);\n            if ($1178) {\n             _abort(); return ((0)|0);\n             return ((0)|0);\n            } else {\n             $1180=(($R_1_i_i+20)|0);\n             HEAP32[(($1180)>>2)]=$1173;\n             $1181=(($1173+24)|0);\n             HEAP32[(($1181)>>2)]=$R_1_i_i;\n             break;\n            }\n           }\n          } while(0);\n          $_sum9_i_i=$1037|$999;\n          $_sum102_i=((($_sum9_i_i)+($tsize_244_i))|0);\n          $1185=(($tbase_245_i+$_sum102_i)|0);\n          $1186=$1185;\n          $1187=((($1037)+($1007))|0);\n          $oldfirst_0_i_i=$1186;$qsize_0_i_i=$1187;\n         } else {\n          $oldfirst_0_i_i=$1001;$qsize_0_i_i=$1007;\n         }\n\n\n         $1189=(($oldfirst_0_i_i+4)|0);\n         $1190=((HEAP32[(($1189)>>2)])|0);\n         $1191=$1190&-2;\n         HEAP32[(($1189)>>2)]=$1191;\n         $1192=$qsize_0_i_i|1;\n         $_sum10_i_i=((($_sum_i21_i)+(4))|0);\n         $1193=(($tbase_245_i+$_sum10_i_i)|0);\n         $1194=$1193;\n         HEAP32[(($1194)>>2)]=$1192;\n         $_sum11_i_i=((($qsize_0_i_i)+($_sum_i21_i))|0);\n         $1195=(($tbase_245_i+$_sum11_i_i)|0);\n         $1196=$1195;\n         HEAP32[(($1196)>>2)]=$qsize_0_i_i;\n         $1197=$qsize_0_i_i>>>3;\n         $1198=($qsize_0_i_i>>>0)<((256)>>>0);\n         if ($1198) {\n          $1200=$1197<<1;\n          $1201=((1016+($1200<<2))|0);\n          $1202=$1201;\n          $1203=((HEAP32[((976)>>2)])|0);\n          $1204=1<<$1197;\n          $1205=$1203&$1204;\n          $1206=($1205|0)==0;\n          do {\n           if ($1206) {\n            $1208=$1203|$1204;\n            HEAP32[((976)>>2)]=$1208;\n            $_sum27_pre_i_i=((($1200)+(2))|0);\n            $_pre_i24_i=((1016+($_sum27_pre_i_i<<2))|0);\n            $F4_0_i_i=$1202;$_pre_phi_i25_i=$_pre_i24_i;\n           } else {\n            $_sum30_i_i=((($1200)+(2))|0);\n            $1210=((1016+($_sum30_i_i<<2))|0);\n            $1211=((HEAP32[(($1210)>>2)])|0);\n            $1212=$1211;\n            $1213=((HEAP32[((992)>>2)])|0);\n            $1214=($1212>>>0)<($1213>>>0);\n            if (!($1214)) {\n             $F4_0_i_i=$1211;$_pre_phi_i25_i=$1210;\n             break;\n            }\n            _abort(); return ((0)|0);\n            return ((0)|0);\n           }\n          } while(0);\n\n\n          HEAP32[(($_pre_phi_i25_i)>>2)]=$1006;\n          $1217=(($F4_0_i_i+12)|0);\n          HEAP32[(($1217)>>2)]=$1006;\n          $_sum28_i_i=((($_sum_i21_i)+(8))|0);\n          $1218=(($tbase_245_i+$_sum28_i_i)|0);\n          $1219=$1218;\n          HEAP32[(($1219)>>2)]=$F4_0_i_i;\n          $_sum29_i_i=((($_sum_i21_i)+(12))|0);\n          $1220=(($tbase_245_i+$_sum29_i_i)|0);\n          $1221=$1220;\n          HEAP32[(($1221)>>2)]=$1202;\n          break;\n         }\n         $1223=$1005;\n         $1224=$qsize_0_i_i>>>8;\n         $1225=($1224|0)==0;\n         do {\n          if ($1225) {\n           $I7_0_i_i=0;\n          } else {\n           $1227=($qsize_0_i_i>>>0)>((16777215)>>>0);\n           if ($1227) {\n            $I7_0_i_i=31;\n            break;\n           }\n           $1229=((($1224)+(1048320))|0);\n           $1230=$1229>>>16;\n           $1231=$1230&8;\n           $1232=$1224<<$1231;\n           $1233=((($1232)+(520192))|0);\n           $1234=$1233>>>16;\n           $1235=$1234&4;\n           $1236=$1235|$1231;\n           $1237=$1232<<$1235;\n           $1238=((($1237)+(245760))|0);\n           $1239=$1238>>>16;\n           $1240=$1239&2;\n           $1241=$1236|$1240;\n           $1242=(((14)-($1241))|0);\n           $1243=$1237<<$1240;\n           $1244=$1243>>>15;\n           $1245=((($1242)+($1244))|0);\n           $1246=$1245<<1;\n           $1247=((($1245)+(7))|0);\n           $1248=$qsize_0_i_i>>>($1247>>>0);\n           $1249=$1248&1;\n           $1250=$1249|$1246;\n           $I7_0_i_i=$1250;\n          }\n         } while(0);\n\n         $1252=((1280+($I7_0_i_i<<2))|0);\n         $_sum12_i26_i=((($_sum_i21_i)+(28))|0);\n         $1253=(($tbase_245_i+$_sum12_i26_i)|0);\n         $1254=$1253;\n         HEAP32[(($1254)>>2)]=$I7_0_i_i;\n         $_sum13_i_i=((($_sum_i21_i)+(16))|0);\n         $1255=(($tbase_245_i+$_sum13_i_i)|0);\n         $_sum14_i_i=((($_sum_i21_i)+(20))|0);\n         $1256=(($tbase_245_i+$_sum14_i_i)|0);\n         $1257=$1256;\n         HEAP32[(($1257)>>2)]=0;\n         $1258=$1255;\n         HEAP32[(($1258)>>2)]=0;\n         $1259=((HEAP32[((980)>>2)])|0);\n         $1260=1<<$I7_0_i_i;\n         $1261=$1259&$1260;\n         $1262=($1261|0)==0;\n         if ($1262) {\n          $1264=$1259|$1260;\n          HEAP32[((980)>>2)]=$1264;\n          HEAP32[(($1252)>>2)]=$1223;\n          $1265=$1252;\n          $_sum15_i_i=((($_sum_i21_i)+(24))|0);\n          $1266=(($tbase_245_i+$_sum15_i_i)|0);\n          $1267=$1266;\n          HEAP32[(($1267)>>2)]=$1265;\n          $_sum16_i_i=((($_sum_i21_i)+(12))|0);\n          $1268=(($tbase_245_i+$_sum16_i_i)|0);\n          $1269=$1268;\n          HEAP32[(($1269)>>2)]=$1223;\n          $_sum17_i_i=((($_sum_i21_i)+(8))|0);\n          $1270=(($tbase_245_i+$_sum17_i_i)|0);\n          $1271=$1270;\n          HEAP32[(($1271)>>2)]=$1223;\n          break;\n         }\n         $1273=((HEAP32[(($1252)>>2)])|0);\n         $1274=($I7_0_i_i|0)==31;\n         if ($1274) {\n          $1279=0;\n         } else {\n          $1276=$I7_0_i_i>>>1;\n          $1277=(((25)-($1276))|0);\n          $1279=$1277;\n         }\n\n         $1280=$qsize_0_i_i<<$1279;\n         $K8_0_i_i=$1280;$T_0_i27_i=$1273;\n         while(1) {\n\n\n          $1282=(($T_0_i27_i+4)|0);\n          $1283=((HEAP32[(($1282)>>2)])|0);\n          $1284=$1283&-8;\n          $1285=($1284|0)==($qsize_0_i_i|0);\n          if ($1285) {\n           break;\n          }\n          $1287=$K8_0_i_i>>>31;\n          $1288=(($T_0_i27_i+16+($1287<<2))|0);\n          $1289=((HEAP32[(($1288)>>2)])|0);\n          $1290=($1289|0)==0;\n          $1291=$K8_0_i_i<<1;\n          if ($1290) {\n           label = 296;\n           break;\n          } else {\n           $K8_0_i_i=$1291;$T_0_i27_i=$1289;\n          }\n         }\n         if ((label|0) == 296) {\n          $1293=$1288;\n          $1294=((HEAP32[((992)>>2)])|0);\n          $1295=($1293>>>0)<($1294>>>0);\n          if ($1295) {\n           _abort(); return ((0)|0);\n           return ((0)|0);\n          } else {\n           HEAP32[(($1288)>>2)]=$1223;\n           $_sum24_i_i=((($_sum_i21_i)+(24))|0);\n           $1297=(($tbase_245_i+$_sum24_i_i)|0);\n           $1298=$1297;\n           HEAP32[(($1298)>>2)]=$T_0_i27_i;\n           $_sum25_i_i=((($_sum_i21_i)+(12))|0);\n           $1299=(($tbase_245_i+$_sum25_i_i)|0);\n           $1300=$1299;\n           HEAP32[(($1300)>>2)]=$1223;\n           $_sum26_i_i=((($_sum_i21_i)+(8))|0);\n           $1301=(($tbase_245_i+$_sum26_i_i)|0);\n           $1302=$1301;\n           HEAP32[(($1302)>>2)]=$1223;\n           break;\n          }\n         }\n         $1305=(($T_0_i27_i+8)|0);\n         $1306=((HEAP32[(($1305)>>2)])|0);\n         $1307=$T_0_i27_i;\n         $1308=((HEAP32[((992)>>2)])|0);\n         $1309=($1307>>>0)<($1308>>>0);\n         if ($1309) {\n          _abort(); return ((0)|0);\n          return ((0)|0);\n         }\n         $1311=$1306;\n         $1312=($1311>>>0)<($1308>>>0);\n         if ($1312) {\n          _abort(); return ((0)|0);\n          return ((0)|0);\n         } else {\n          $1314=(($1306+12)|0);\n          HEAP32[(($1314)>>2)]=$1223;\n          HEAP32[(($1305)>>2)]=$1223;\n          $_sum21_i_i=((($_sum_i21_i)+(8))|0);\n          $1315=(($tbase_245_i+$_sum21_i_i)|0);\n          $1316=$1315;\n          HEAP32[(($1316)>>2)]=$1306;\n          $_sum22_i_i=((($_sum_i21_i)+(12))|0);\n          $1317=(($tbase_245_i+$_sum22_i_i)|0);\n          $1318=$1317;\n          HEAP32[(($1318)>>2)]=$T_0_i27_i;\n          $_sum23_i_i=((($_sum_i21_i)+(24))|0);\n          $1319=(($tbase_245_i+$_sum23_i_i)|0);\n          $1320=$1319;\n          HEAP32[(($1320)>>2)]=0;\n          break;\n         }\n        }\n       } while(0);\n       $_sum1819_i_i=$989|8;\n       $1321=(($tbase_245_i+$_sum1819_i_i)|0);\n       $mem_0=$1321;\n\n       return (($mem_0)|0);\n      }\n     } while(0);\n     $1322=$888;\n     $sp_0_i_i_i=1424;\n     while(1) {\n\n      $1324=(($sp_0_i_i_i)|0);\n      $1325=((HEAP32[(($1324)>>2)])|0);\n      $1326=($1325>>>0)>($1322>>>0);\n      if (!($1326)) {\n       $1328=(($sp_0_i_i_i+4)|0);\n       $1329=((HEAP32[(($1328)>>2)])|0);\n       $1330=(($1325+$1329)|0);\n       $1331=($1330>>>0)>($1322>>>0);\n       if ($1331) {\n        break;\n       }\n      }\n      $1333=(($sp_0_i_i_i+8)|0);\n      $1334=((HEAP32[(($1333)>>2)])|0);\n      $sp_0_i_i_i=$1334;\n     }\n     $_sum_i15_i=((($1329)-(47))|0);\n     $_sum1_i16_i=((($1329)-(39))|0);\n     $1335=(($1325+$_sum1_i16_i)|0);\n     $1336=$1335;\n     $1337=$1336&7;\n     $1338=($1337|0)==0;\n     if ($1338) {\n      $1343=0;\n     } else {\n      $1340=(((-$1336))|0);\n      $1341=$1340&7;\n      $1343=$1341;\n     }\n\n     $_sum2_i17_i=((($_sum_i15_i)+($1343))|0);\n     $1344=(($1325+$_sum2_i17_i)|0);\n     $1345=(($888+16)|0);\n     $1346=$1345;\n     $1347=($1344>>>0)<($1346>>>0);\n     $1348=($1347?$1322:$1344);\n     $1349=(($1348+8)|0);\n     $1350=$1349;\n     $1351=((($tsize_244_i)-(40))|0);\n     $1352=(($tbase_245_i+8)|0);\n     $1353=$1352;\n     $1354=$1353&7;\n     $1355=($1354|0)==0;\n     if ($1355) {\n      $1359=0;\n     } else {\n      $1357=(((-$1353))|0);\n      $1358=$1357&7;\n      $1359=$1358;\n     }\n\n     $1360=(($tbase_245_i+$1359)|0);\n     $1361=$1360;\n     $1362=((($1351)-($1359))|0);\n     HEAP32[((1000)>>2)]=$1361;\n     HEAP32[((988)>>2)]=$1362;\n     $1363=$1362|1;\n     $_sum_i_i_i=((($1359)+(4))|0);\n     $1364=(($tbase_245_i+$_sum_i_i_i)|0);\n     $1365=$1364;\n     HEAP32[(($1365)>>2)]=$1363;\n     $_sum2_i_i_i=((($tsize_244_i)-(36))|0);\n     $1366=(($tbase_245_i+$_sum2_i_i_i)|0);\n     $1367=$1366;\n     HEAP32[(($1367)>>2)]=40;\n     $1368=((HEAP32[((968)>>2)])|0);\n     HEAP32[((1004)>>2)]=$1368;\n     $1369=(($1348+4)|0);\n     $1370=$1369;\n     HEAP32[(($1370)>>2)]=27;\n     HEAP32[(($1349)>>2)]=((HEAP32[((1424)>>2)])|0);HEAP32[((($1349)+(4))>>2)]=((HEAP32[((1428)>>2)])|0);HEAP32[((($1349)+(8))>>2)]=((HEAP32[((1432)>>2)])|0);HEAP32[((($1349)+(12))>>2)]=((HEAP32[((1436)>>2)])|0);\n     HEAP32[((1424)>>2)]=$tbase_245_i;\n     HEAP32[((1428)>>2)]=$tsize_244_i;\n     HEAP32[((1436)>>2)]=0;\n     HEAP32[((1432)>>2)]=$1350;\n     $1371=(($1348+28)|0);\n     $1372=$1371;\n     HEAP32[(($1372)>>2)]=7;\n     $1373=(($1348+32)|0);\n     $1374=($1373>>>0)<($1330>>>0);\n     if ($1374) {\n      $1375=$1372;\n      while(1) {\n\n       $1376=(($1375+4)|0);\n       HEAP32[(($1376)>>2)]=7;\n       $1377=(($1375+8)|0);\n       $1378=$1377;\n       $1379=($1378>>>0)<($1330>>>0);\n       if ($1379) {\n        $1375=$1376;\n       } else {\n        break;\n       }\n      }\n     }\n     $1380=($1348|0)==($1322|0);\n     if ($1380) {\n      break;\n     }\n     $1382=$1348;\n     $1383=$888;\n     $1384=((($1382)-($1383))|0);\n     $1385=(($1322+$1384)|0);\n     $_sum3_i_i=((($1384)+(4))|0);\n     $1386=(($1322+$_sum3_i_i)|0);\n     $1387=$1386;\n     $1388=((HEAP32[(($1387)>>2)])|0);\n     $1389=$1388&-2;\n     HEAP32[(($1387)>>2)]=$1389;\n     $1390=$1384|1;\n     $1391=(($888+4)|0);\n     HEAP32[(($1391)>>2)]=$1390;\n     $1392=$1385;\n     HEAP32[(($1392)>>2)]=$1384;\n     $1393=$1384>>>3;\n     $1394=($1384>>>0)<((256)>>>0);\n     if ($1394) {\n      $1396=$1393<<1;\n      $1397=((1016+($1396<<2))|0);\n      $1398=$1397;\n      $1399=((HEAP32[((976)>>2)])|0);\n      $1400=1<<$1393;\n      $1401=$1399&$1400;\n      $1402=($1401|0)==0;\n      do {\n       if ($1402) {\n        $1404=$1399|$1400;\n        HEAP32[((976)>>2)]=$1404;\n        $_sum11_pre_i_i=((($1396)+(2))|0);\n        $_pre_i_i=((1016+($_sum11_pre_i_i<<2))|0);\n        $F_0_i_i=$1398;$_pre_phi_i_i=$_pre_i_i;\n       } else {\n        $_sum12_i_i=((($1396)+(2))|0);\n        $1406=((1016+($_sum12_i_i<<2))|0);\n        $1407=((HEAP32[(($1406)>>2)])|0);\n        $1408=$1407;\n        $1409=((HEAP32[((992)>>2)])|0);\n        $1410=($1408>>>0)<($1409>>>0);\n        if (!($1410)) {\n         $F_0_i_i=$1407;$_pre_phi_i_i=$1406;\n         break;\n        }\n        _abort(); return ((0)|0);\n        return ((0)|0);\n       }\n      } while(0);\n\n\n      HEAP32[(($_pre_phi_i_i)>>2)]=$888;\n      $1413=(($F_0_i_i+12)|0);\n      HEAP32[(($1413)>>2)]=$888;\n      $1414=(($888+8)|0);\n      HEAP32[(($1414)>>2)]=$F_0_i_i;\n      $1415=(($888+12)|0);\n      HEAP32[(($1415)>>2)]=$1398;\n      break;\n     }\n     $1417=$888;\n     $1418=$1384>>>8;\n     $1419=($1418|0)==0;\n     do {\n      if ($1419) {\n       $I1_0_i_i=0;\n      } else {\n       $1421=($1384>>>0)>((16777215)>>>0);\n       if ($1421) {\n        $I1_0_i_i=31;\n        break;\n       }\n       $1423=((($1418)+(1048320))|0);\n       $1424=$1423>>>16;\n       $1425=$1424&8;\n       $1426=$1418<<$1425;\n       $1427=((($1426)+(520192))|0);\n       $1428=$1427>>>16;\n       $1429=$1428&4;\n       $1430=$1429|$1425;\n       $1431=$1426<<$1429;\n       $1432=((($1431)+(245760))|0);\n       $1433=$1432>>>16;\n       $1434=$1433&2;\n       $1435=$1430|$1434;\n       $1436=(((14)-($1435))|0);\n       $1437=$1431<<$1434;\n       $1438=$1437>>>15;\n       $1439=((($1436)+($1438))|0);\n       $1440=$1439<<1;\n       $1441=((($1439)+(7))|0);\n       $1442=$1384>>>($1441>>>0);\n       $1443=$1442&1;\n       $1444=$1443|$1440;\n       $I1_0_i_i=$1444;\n      }\n     } while(0);\n\n     $1446=((1280+($I1_0_i_i<<2))|0);\n     $1447=(($888+28)|0);\n     $I1_0_c_i_i=$I1_0_i_i;\n     HEAP32[(($1447)>>2)]=$I1_0_c_i_i;\n     $1448=(($888+20)|0);\n     HEAP32[(($1448)>>2)]=0;\n     $1449=(($888+16)|0);\n     HEAP32[(($1449)>>2)]=0;\n     $1450=((HEAP32[((980)>>2)])|0);\n     $1451=1<<$I1_0_i_i;\n     $1452=$1450&$1451;\n     $1453=($1452|0)==0;\n     if ($1453) {\n      $1455=$1450|$1451;\n      HEAP32[((980)>>2)]=$1455;\n      HEAP32[(($1446)>>2)]=$1417;\n      $1456=(($888+24)|0);\n      $_c_i_i=$1446;\n      HEAP32[(($1456)>>2)]=$_c_i_i;\n      $1457=(($888+12)|0);\n      HEAP32[(($1457)>>2)]=$888;\n      $1458=(($888+8)|0);\n      HEAP32[(($1458)>>2)]=$888;\n      break;\n     }\n     $1460=((HEAP32[(($1446)>>2)])|0);\n     $1461=($I1_0_i_i|0)==31;\n     if ($1461) {\n      $1466=0;\n     } else {\n      $1463=$I1_0_i_i>>>1;\n      $1464=(((25)-($1463))|0);\n      $1466=$1464;\n     }\n\n     $1467=$1384<<$1466;\n     $K2_0_i_i=$1467;$T_0_i_i=$1460;\n     while(1) {\n\n\n      $1469=(($T_0_i_i+4)|0);\n      $1470=((HEAP32[(($1469)>>2)])|0);\n      $1471=$1470&-8;\n      $1472=($1471|0)==($1384|0);\n      if ($1472) {\n       break;\n      }\n      $1474=$K2_0_i_i>>>31;\n      $1475=(($T_0_i_i+16+($1474<<2))|0);\n      $1476=((HEAP32[(($1475)>>2)])|0);\n      $1477=($1476|0)==0;\n      $1478=$K2_0_i_i<<1;\n      if ($1477) {\n       label = 331;\n       break;\n      } else {\n       $K2_0_i_i=$1478;$T_0_i_i=$1476;\n      }\n     }\n     if ((label|0) == 331) {\n      $1480=$1475;\n      $1481=((HEAP32[((992)>>2)])|0);\n      $1482=($1480>>>0)<($1481>>>0);\n      if ($1482) {\n       _abort(); return ((0)|0);\n       return ((0)|0);\n      } else {\n       HEAP32[(($1475)>>2)]=$1417;\n       $1484=(($888+24)|0);\n       $T_0_c8_i_i=$T_0_i_i;\n       HEAP32[(($1484)>>2)]=$T_0_c8_i_i;\n       $1485=(($888+12)|0);\n       HEAP32[(($1485)>>2)]=$888;\n       $1486=(($888+8)|0);\n       HEAP32[(($1486)>>2)]=$888;\n       break;\n      }\n     }\n     $1489=(($T_0_i_i+8)|0);\n     $1490=((HEAP32[(($1489)>>2)])|0);\n     $1491=$T_0_i_i;\n     $1492=((HEAP32[((992)>>2)])|0);\n     $1493=($1491>>>0)<($1492>>>0);\n     if ($1493) {\n      _abort(); return ((0)|0);\n      return ((0)|0);\n     }\n     $1495=$1490;\n     $1496=($1495>>>0)<($1492>>>0);\n     if ($1496) {\n      _abort(); return ((0)|0);\n      return ((0)|0);\n     } else {\n      $1498=(($1490+12)|0);\n      HEAP32[(($1498)>>2)]=$1417;\n      HEAP32[(($1489)>>2)]=$1417;\n      $1499=(($888+8)|0);\n      $_c7_i_i=$1490;\n      HEAP32[(($1499)>>2)]=$_c7_i_i;\n      $1500=(($888+12)|0);\n      $T_0_c_i_i=$T_0_i_i;\n      HEAP32[(($1500)>>2)]=$T_0_c_i_i;\n      $1501=(($888+24)|0);\n      HEAP32[(($1501)>>2)]=0;\n      break;\n     }\n    }\n   } while(0);\n   $1502=((HEAP32[((988)>>2)])|0);\n   $1503=($1502>>>0)>($nb_0>>>0);\n   if (!($1503)) {\n    break;\n   }\n   $1505=((($1502)-($nb_0))|0);\n   HEAP32[((988)>>2)]=$1505;\n   $1506=((HEAP32[((1000)>>2)])|0);\n   $1507=$1506;\n   $1508=(($1507+$nb_0)|0);\n   $1509=$1508;\n   HEAP32[((1000)>>2)]=$1509;\n   $1510=$1505|1;\n   $_sum_i134=((($nb_0)+(4))|0);\n   $1511=(($1507+$_sum_i134)|0);\n   $1512=$1511;\n   HEAP32[(($1512)>>2)]=$1510;\n   $1513=$nb_0|3;\n   $1514=(($1506+4)|0);\n   HEAP32[(($1514)>>2)]=$1513;\n   $1515=(($1506+8)|0);\n   $1516=$1515;\n   $mem_0=$1516;\n\n   return (($mem_0)|0);\n  }\n } while(0);\n $1517=((___errno_location())|0);\n HEAP32[(($1517)>>2)]=12;\n $mem_0=0;\n\n return (($mem_0)|0);\n}\n\n\nfunction _free($mem){\n $mem=($mem)|0;\n var $1=0,$3=0,$4=0,$5=0,$6=0,$8=0,$9=0,$10=0,$11=0,$12=0,$14=0,$_sum=0,$15=0,$16=0,$17=0,$18=0,$20=0,$21=0,$22=0,$_sum232=0;\n var $24=0,$25=0,$26=0,$27=0,$29=0,$30=0,$32=0,$33=0,$_sum276=0,$35=0,$36=0,$37=0,$_sum277=0,$38=0,$39=0,$40=0,$41=0,$42=0,$43=0,$44=0;\n var $46=0,$47=0,$49=0,$50=0,$51=0,$52=0,$54=0,$55=0,$56=0,$57=0,$59=0,$_pre307=0,$61=0,$62=0,$64=0,$65=0,$66=0,$_pre_phi308=0,$67=0,$69=0;\n var $_sum266=0,$70=0,$71=0,$72=0,$_sum267=0,$73=0,$74=0,$75=0,$76=0,$_sum273=0,$78=0,$79=0,$80=0,$81=0,$82=0,$84=0,$85=0,$86=0,$88=0,$89=0;\n var $90=0,$_sum269=0,$93=0,$94=0,$95=0,$96=0,$_sum268=0,$98=0,$99=0,$100=0,$101=0,$RP_0=0,$R_0=0,$102=0,$103=0,$104=0,$106=0,$107=0,$108=0,$110=0;\n var $111=0,$R_1=0,$115=0,$_sum270=0,$117=0,$118=0,$119=0,$120=0,$121=0,$122=0,$cond=0,$124=0,$125=0,$126=0,$127=0,$129=0,$130=0,$131=0,$133=0,$134=0;\n var $135=0,$138=0,$141=0,$143=0,$144=0,$145=0,$147=0,$_sum271=0,$148=0,$149=0,$150=0,$151=0,$153=0,$154=0,$155=0,$157=0,$158=0,$_sum272=0,$161=0,$162=0;\n var $163=0,$164=0,$166=0,$167=0,$168=0,$170=0,$171=0,$_sum233=0,$175=0,$176=0,$177=0,$178=0,$179=0,$181=0,$182=0,$183=0,$_sum264=0,$184=0,$185=0,$186=0;\n var $psize_0=0,$p_0=0,$188=0,$189=0,$_sum263=0,$191=0,$192=0,$193=0,$194=0,$phitmp=0,$196=0,$197=0,$199=0,$200=0,$202=0,$203=0,$204=0,$205=0,$206=0,$207=0;\n var $210=0,$211=0,$213=0,$214=0,$215=0,$216=0,$217=0,$218=0,$220=0,$221=0,$222=0,$223=0,$225=0,$226=0,$227=0,$_sum257258=0,$228=0,$229=0,$230=0,$231=0;\n var $232=0,$233=0,$234=0,$236=0,$237=0,$238=0,$240=0,$241=0,$242=0,$243=0,$245=0,$246=0,$247=0,$248=0,$250=0,$_pre305=0,$252=0,$253=0,$254=0,$256=0;\n var $257=0,$258=0,$_pre_phi306=0,$259=0,$261=0,$_sum235=0,$262=0,$263=0,$264=0,$_sum236237=0,$265=0,$266=0,$267=0,$268=0,$270=0,$271=0,$272=0,$273=0,$274=0,$275=0;\n var $277=0,$278=0,$279=0,$281=0,$282=0,$283=0,$_sum239=0,$286=0,$287=0,$288=0,$289=0,$_sum238=0,$291=0,$292=0,$293=0,$294=0,$RP9_0=0,$R7_0=0,$295=0,$296=0;\n var $297=0,$299=0,$300=0,$301=0,$303=0,$304=0,$305=0,$R7_1=0,$309=0,$_sum250=0,$311=0,$312=0,$313=0,$314=0,$315=0,$316=0,$cond298=0,$318=0,$319=0,$320=0;\n var $321=0,$323=0,$324=0,$325=0,$327=0,$328=0,$329=0,$332=0,$335=0,$337=0,$338=0,$339=0,$341=0,$_sum251=0,$342=0,$343=0,$344=0,$345=0,$347=0,$348=0;\n var $349=0,$351=0,$352=0,$_sum252=0,$355=0,$356=0,$357=0,$358=0,$360=0,$361=0,$362=0,$364=0,$365=0,$368=0,$369=0,$370=0,$371=0,$372=0,$373=0,$376=0;\n var $377=0,$378=0,$379=0,$380=0,$psize_1=0,$382=0,$383=0,$385=0,$386=0,$387=0,$388=0,$389=0,$390=0,$391=0,$393=0,$_sum248_pre=0,$_pre=0,$_sum249=0,$395=0,$396=0;\n var $397=0,$398=0,$399=0,$_pre_phi=0,$F16_0=0,$402=0,$403=0,$404=0,$406=0,$407=0,$408=0,$410=0,$412=0,$413=0,$414=0,$415=0,$416=0,$417=0,$418=0,$419=0;\n var $420=0,$421=0,$422=0,$423=0,$424=0,$425=0,$426=0,$427=0,$428=0,$429=0,$430=0,$431=0,$432=0,$433=0,$I18_0=0,$435=0,$436=0,$I18_0_c=0,$437=0,$438=0;\n var $439=0,$440=0,$441=0,$442=0,$444=0,$445=0,$_c=0,$446=0,$447=0,$449=0,$450=0,$452=0,$453=0,$455=0,$456=0,$T_0=0,$K19_0=0,$458=0,$459=0,$460=0;\n var $461=0,$463=0,$464=0,$465=0,$466=0,$467=0,$469=0,$470=0,$471=0,$473=0,$T_0_c245=0,$474=0,$475=0,$478=0,$479=0,$480=0,$481=0,$482=0,$484=0,$485=0;\n var $487=0,$488=0,$_c244=0,$489=0,$T_0_c=0,$490=0,$492=0,$493=0,$494=0,$sp_0_in_i=0,$sp_0_i=0,$495=0,$496=0,label=0;\n\n $1=($mem|0)==0;\n if ($1) {\n  return;\n }\n $3=((($mem)-(8))|0);\n $4=$3;\n $5=((HEAP32[((992)>>2)])|0);\n $6=($3>>>0)<($5>>>0);\n if ($6) {\n  _abort();\n\n }\n $8=((($mem)-(4))|0);\n $9=$8;\n $10=((HEAP32[(($9)>>2)])|0);\n $11=$10&3;\n $12=($11|0)==1;\n if ($12) {\n  _abort();\n\n }\n $14=$10&-8;\n $_sum=((($14)-(8))|0);\n $15=(($mem+$_sum)|0);\n $16=$15;\n $17=$10&1;\n $18=($17|0)==0;\n L10: do {\n  if ($18) {\n   $20=$3;\n   $21=((HEAP32[(($20)>>2)])|0);\n   $22=($11|0)==0;\n   if ($22) {\n    return;\n   }\n   $_sum232=(((-8)-($21))|0);\n   $24=(($mem+$_sum232)|0);\n   $25=$24;\n   $26=((($21)+($14))|0);\n   $27=($24>>>0)<($5>>>0);\n   if ($27) {\n    _abort();\n\n   }\n   $29=((HEAP32[((996)>>2)])|0);\n   $30=($25|0)==($29|0);\n   if ($30) {\n    $_sum233=((($14)-(4))|0);\n    $175=(($mem+$_sum233)|0);\n    $176=$175;\n    $177=((HEAP32[(($176)>>2)])|0);\n    $178=$177&3;\n    $179=($178|0)==3;\n    if (!($179)) {\n     $p_0=$25;$psize_0=$26;\n     break;\n    }\n    HEAP32[((984)>>2)]=$26;\n    $181=((HEAP32[(($176)>>2)])|0);\n    $182=$181&-2;\n    HEAP32[(($176)>>2)]=$182;\n    $183=$26|1;\n    $_sum264=((($_sum232)+(4))|0);\n    $184=(($mem+$_sum264)|0);\n    $185=$184;\n    HEAP32[(($185)>>2)]=$183;\n    $186=$15;\n    HEAP32[(($186)>>2)]=$26;\n    return;\n   }\n   $32=$21>>>3;\n   $33=($21>>>0)<((256)>>>0);\n   if ($33) {\n    $_sum276=((($_sum232)+(8))|0);\n    $35=(($mem+$_sum276)|0);\n    $36=$35;\n    $37=((HEAP32[(($36)>>2)])|0);\n    $_sum277=((($_sum232)+(12))|0);\n    $38=(($mem+$_sum277)|0);\n    $39=$38;\n    $40=((HEAP32[(($39)>>2)])|0);\n    $41=$32<<1;\n    $42=((1016+($41<<2))|0);\n    $43=$42;\n    $44=($37|0)==($43|0);\n    do {\n     if (!($44)) {\n      $46=$37;\n      $47=($46>>>0)<($5>>>0);\n      if ($47) {\n       _abort();\n\n      }\n      $49=(($37+12)|0);\n      $50=((HEAP32[(($49)>>2)])|0);\n      $51=($50|0)==($25|0);\n      if ($51) {\n       break;\n      }\n      _abort();\n\n     }\n    } while(0);\n    $52=($40|0)==($37|0);\n    if ($52) {\n     $54=1<<$32;\n     $55=$54^-1;\n     $56=((HEAP32[((976)>>2)])|0);\n     $57=$56&$55;\n     HEAP32[((976)>>2)]=$57;\n     $p_0=$25;$psize_0=$26;\n     break;\n    }\n    $59=($40|0)==($43|0);\n    do {\n     if ($59) {\n      $_pre307=(($40+8)|0);\n      $_pre_phi308=$_pre307;\n     } else {\n      $61=$40;\n      $62=($61>>>0)<($5>>>0);\n      if ($62) {\n       _abort();\n\n      }\n      $64=(($40+8)|0);\n      $65=((HEAP32[(($64)>>2)])|0);\n      $66=($65|0)==($25|0);\n      if ($66) {\n       $_pre_phi308=$64;\n       break;\n      }\n      _abort();\n\n     }\n    } while(0);\n\n    $67=(($37+12)|0);\n    HEAP32[(($67)>>2)]=$40;\n    HEAP32[(($_pre_phi308)>>2)]=$37;\n    $p_0=$25;$psize_0=$26;\n    break;\n   }\n   $69=$24;\n   $_sum266=((($_sum232)+(24))|0);\n   $70=(($mem+$_sum266)|0);\n   $71=$70;\n   $72=((HEAP32[(($71)>>2)])|0);\n   $_sum267=((($_sum232)+(12))|0);\n   $73=(($mem+$_sum267)|0);\n   $74=$73;\n   $75=((HEAP32[(($74)>>2)])|0);\n   $76=($75|0)==($69|0);\n   do {\n    if ($76) {\n     $_sum269=((($_sum232)+(20))|0);\n     $93=(($mem+$_sum269)|0);\n     $94=$93;\n     $95=((HEAP32[(($94)>>2)])|0);\n     $96=($95|0)==0;\n     if ($96) {\n      $_sum268=((($_sum232)+(16))|0);\n      $98=(($mem+$_sum268)|0);\n      $99=$98;\n      $100=((HEAP32[(($99)>>2)])|0);\n      $101=($100|0)==0;\n      if ($101) {\n       $R_1=0;\n       break;\n      } else {\n       $R_0=$100;$RP_0=$99;\n      }\n     } else {\n      $R_0=$95;$RP_0=$94;\n     }\n     while(1) {\n\n\n      $102=(($R_0+20)|0);\n      $103=((HEAP32[(($102)>>2)])|0);\n      $104=($103|0)==0;\n      if (!($104)) {\n       $R_0=$103;$RP_0=$102;\n       continue;\n      }\n      $106=(($R_0+16)|0);\n      $107=((HEAP32[(($106)>>2)])|0);\n      $108=($107|0)==0;\n      if ($108) {\n       break;\n      } else {\n       $R_0=$107;$RP_0=$106;\n      }\n     }\n     $110=$RP_0;\n     $111=($110>>>0)<($5>>>0);\n     if ($111) {\n      _abort();\n\n     } else {\n      HEAP32[(($RP_0)>>2)]=0;\n      $R_1=$R_0;\n      break;\n     }\n    } else {\n     $_sum273=((($_sum232)+(8))|0);\n     $78=(($mem+$_sum273)|0);\n     $79=$78;\n     $80=((HEAP32[(($79)>>2)])|0);\n     $81=$80;\n     $82=($81>>>0)<($5>>>0);\n     if ($82) {\n      _abort();\n\n     }\n     $84=(($80+12)|0);\n     $85=((HEAP32[(($84)>>2)])|0);\n     $86=($85|0)==($69|0);\n     if (!($86)) {\n      _abort();\n\n     }\n     $88=(($75+8)|0);\n     $89=((HEAP32[(($88)>>2)])|0);\n     $90=($89|0)==($69|0);\n     if ($90) {\n      HEAP32[(($84)>>2)]=$75;\n      HEAP32[(($88)>>2)]=$80;\n      $R_1=$75;\n      break;\n     } else {\n      _abort();\n\n     }\n    }\n   } while(0);\n\n   $115=($72|0)==0;\n   if ($115) {\n    $p_0=$25;$psize_0=$26;\n    break;\n   }\n   $_sum270=((($_sum232)+(28))|0);\n   $117=(($mem+$_sum270)|0);\n   $118=$117;\n   $119=((HEAP32[(($118)>>2)])|0);\n   $120=((1280+($119<<2))|0);\n   $121=((HEAP32[(($120)>>2)])|0);\n   $122=($69|0)==($121|0);\n   do {\n    if ($122) {\n     HEAP32[(($120)>>2)]=$R_1;\n     $cond=($R_1|0)==0;\n     if (!($cond)) {\n      break;\n     }\n     $124=1<<$119;\n     $125=$124^-1;\n     $126=((HEAP32[((980)>>2)])|0);\n     $127=$126&$125;\n     HEAP32[((980)>>2)]=$127;\n     $p_0=$25;$psize_0=$26;\n     break L10;\n    } else {\n     $129=$72;\n     $130=((HEAP32[((992)>>2)])|0);\n     $131=($129>>>0)<($130>>>0);\n     if ($131) {\n      _abort();\n\n     }\n     $133=(($72+16)|0);\n     $134=((HEAP32[(($133)>>2)])|0);\n     $135=($134|0)==($69|0);\n     if ($135) {\n      HEAP32[(($133)>>2)]=$R_1;\n     } else {\n      $138=(($72+20)|0);\n      HEAP32[(($138)>>2)]=$R_1;\n     }\n     $141=($R_1|0)==0;\n     if ($141) {\n      $p_0=$25;$psize_0=$26;\n      break L10;\n     }\n    }\n   } while(0);\n   $143=$R_1;\n   $144=((HEAP32[((992)>>2)])|0);\n   $145=($143>>>0)<($144>>>0);\n   if ($145) {\n    _abort();\n\n   }\n   $147=(($R_1+24)|0);\n   HEAP32[(($147)>>2)]=$72;\n   $_sum271=((($_sum232)+(16))|0);\n   $148=(($mem+$_sum271)|0);\n   $149=$148;\n   $150=((HEAP32[(($149)>>2)])|0);\n   $151=($150|0)==0;\n   do {\n    if (!($151)) {\n     $153=$150;\n     $154=((HEAP32[((992)>>2)])|0);\n     $155=($153>>>0)<($154>>>0);\n     if ($155) {\n      _abort();\n\n     } else {\n      $157=(($R_1+16)|0);\n      HEAP32[(($157)>>2)]=$150;\n      $158=(($150+24)|0);\n      HEAP32[(($158)>>2)]=$R_1;\n      break;\n     }\n    }\n   } while(0);\n   $_sum272=((($_sum232)+(20))|0);\n   $161=(($mem+$_sum272)|0);\n   $162=$161;\n   $163=((HEAP32[(($162)>>2)])|0);\n   $164=($163|0)==0;\n   if ($164) {\n    $p_0=$25;$psize_0=$26;\n    break;\n   }\n   $166=$163;\n   $167=((HEAP32[((992)>>2)])|0);\n   $168=($166>>>0)<($167>>>0);\n   if ($168) {\n    _abort();\n\n   } else {\n    $170=(($R_1+20)|0);\n    HEAP32[(($170)>>2)]=$163;\n    $171=(($163+24)|0);\n    HEAP32[(($171)>>2)]=$R_1;\n    $p_0=$25;$psize_0=$26;\n    break;\n   }\n  } else {\n   $p_0=$4;$psize_0=$14;\n  }\n } while(0);\n\n\n $188=$p_0;\n $189=($188>>>0)<($15>>>0);\n if (!($189)) {\n  _abort();\n\n }\n $_sum263=((($14)-(4))|0);\n $191=(($mem+$_sum263)|0);\n $192=$191;\n $193=((HEAP32[(($192)>>2)])|0);\n $194=$193&1;\n $phitmp=($194|0)==0;\n if ($phitmp) {\n  _abort();\n\n }\n $196=$193&2;\n $197=($196|0)==0;\n do {\n  if ($197) {\n   $199=((HEAP32[((1000)>>2)])|0);\n   $200=($16|0)==($199|0);\n   if ($200) {\n    $202=((HEAP32[((988)>>2)])|0);\n    $203=((($202)+($psize_0))|0);\n    HEAP32[((988)>>2)]=$203;\n    HEAP32[((1000)>>2)]=$p_0;\n    $204=$203|1;\n    $205=(($p_0+4)|0);\n    HEAP32[(($205)>>2)]=$204;\n    $206=((HEAP32[((996)>>2)])|0);\n    $207=($p_0|0)==($206|0);\n    if (!($207)) {\n     return;\n    }\n    HEAP32[((996)>>2)]=0;\n    HEAP32[((984)>>2)]=0;\n    return;\n   }\n   $210=((HEAP32[((996)>>2)])|0);\n   $211=($16|0)==($210|0);\n   if ($211) {\n    $213=((HEAP32[((984)>>2)])|0);\n    $214=((($213)+($psize_0))|0);\n    HEAP32[((984)>>2)]=$214;\n    HEAP32[((996)>>2)]=$p_0;\n    $215=$214|1;\n    $216=(($p_0+4)|0);\n    HEAP32[(($216)>>2)]=$215;\n    $217=(($188+$214)|0);\n    $218=$217;\n    HEAP32[(($218)>>2)]=$214;\n    return;\n   }\n   $220=$193&-8;\n   $221=((($220)+($psize_0))|0);\n   $222=$193>>>3;\n   $223=($193>>>0)<((256)>>>0);\n   L113: do {\n    if ($223) {\n     $225=(($mem+$14)|0);\n     $226=$225;\n     $227=((HEAP32[(($226)>>2)])|0);\n     $_sum257258=$14|4;\n     $228=(($mem+$_sum257258)|0);\n     $229=$228;\n     $230=((HEAP32[(($229)>>2)])|0);\n     $231=$222<<1;\n     $232=((1016+($231<<2))|0);\n     $233=$232;\n     $234=($227|0)==($233|0);\n     do {\n      if (!($234)) {\n       $236=$227;\n       $237=((HEAP32[((992)>>2)])|0);\n       $238=($236>>>0)<($237>>>0);\n       if ($238) {\n        _abort();\n\n       }\n       $240=(($227+12)|0);\n       $241=((HEAP32[(($240)>>2)])|0);\n       $242=($241|0)==($16|0);\n       if ($242) {\n        break;\n       }\n       _abort();\n\n      }\n     } while(0);\n     $243=($230|0)==($227|0);\n     if ($243) {\n      $245=1<<$222;\n      $246=$245^-1;\n      $247=((HEAP32[((976)>>2)])|0);\n      $248=$247&$246;\n      HEAP32[((976)>>2)]=$248;\n      break;\n     }\n     $250=($230|0)==($233|0);\n     do {\n      if ($250) {\n       $_pre305=(($230+8)|0);\n       $_pre_phi306=$_pre305;\n      } else {\n       $252=$230;\n       $253=((HEAP32[((992)>>2)])|0);\n       $254=($252>>>0)<($253>>>0);\n       if ($254) {\n        _abort();\n\n       }\n       $256=(($230+8)|0);\n       $257=((HEAP32[(($256)>>2)])|0);\n       $258=($257|0)==($16|0);\n       if ($258) {\n        $_pre_phi306=$256;\n        break;\n       }\n       _abort();\n\n      }\n     } while(0);\n\n     $259=(($227+12)|0);\n     HEAP32[(($259)>>2)]=$230;\n     HEAP32[(($_pre_phi306)>>2)]=$227;\n    } else {\n     $261=$15;\n     $_sum235=((($14)+(16))|0);\n     $262=(($mem+$_sum235)|0);\n     $263=$262;\n     $264=((HEAP32[(($263)>>2)])|0);\n     $_sum236237=$14|4;\n     $265=(($mem+$_sum236237)|0);\n     $266=$265;\n     $267=((HEAP32[(($266)>>2)])|0);\n     $268=($267|0)==($261|0);\n     do {\n      if ($268) {\n       $_sum239=((($14)+(12))|0);\n       $286=(($mem+$_sum239)|0);\n       $287=$286;\n       $288=((HEAP32[(($287)>>2)])|0);\n       $289=($288|0)==0;\n       if ($289) {\n        $_sum238=((($14)+(8))|0);\n        $291=(($mem+$_sum238)|0);\n        $292=$291;\n        $293=((HEAP32[(($292)>>2)])|0);\n        $294=($293|0)==0;\n        if ($294) {\n         $R7_1=0;\n         break;\n        } else {\n         $R7_0=$293;$RP9_0=$292;\n        }\n       } else {\n        $R7_0=$288;$RP9_0=$287;\n       }\n       while(1) {\n\n\n        $295=(($R7_0+20)|0);\n        $296=((HEAP32[(($295)>>2)])|0);\n        $297=($296|0)==0;\n        if (!($297)) {\n         $R7_0=$296;$RP9_0=$295;\n         continue;\n        }\n        $299=(($R7_0+16)|0);\n        $300=((HEAP32[(($299)>>2)])|0);\n        $301=($300|0)==0;\n        if ($301) {\n         break;\n        } else {\n         $R7_0=$300;$RP9_0=$299;\n        }\n       }\n       $303=$RP9_0;\n       $304=((HEAP32[((992)>>2)])|0);\n       $305=($303>>>0)<($304>>>0);\n       if ($305) {\n        _abort();\n\n       } else {\n        HEAP32[(($RP9_0)>>2)]=0;\n        $R7_1=$R7_0;\n        break;\n       }\n      } else {\n       $270=(($mem+$14)|0);\n       $271=$270;\n       $272=((HEAP32[(($271)>>2)])|0);\n       $273=$272;\n       $274=((HEAP32[((992)>>2)])|0);\n       $275=($273>>>0)<($274>>>0);\n       if ($275) {\n        _abort();\n\n       }\n       $277=(($272+12)|0);\n       $278=((HEAP32[(($277)>>2)])|0);\n       $279=($278|0)==($261|0);\n       if (!($279)) {\n        _abort();\n\n       }\n       $281=(($267+8)|0);\n       $282=((HEAP32[(($281)>>2)])|0);\n       $283=($282|0)==($261|0);\n       if ($283) {\n        HEAP32[(($277)>>2)]=$267;\n        HEAP32[(($281)>>2)]=$272;\n        $R7_1=$267;\n        break;\n       } else {\n        _abort();\n\n       }\n      }\n     } while(0);\n\n     $309=($264|0)==0;\n     if ($309) {\n      break;\n     }\n     $_sum250=((($14)+(20))|0);\n     $311=(($mem+$_sum250)|0);\n     $312=$311;\n     $313=((HEAP32[(($312)>>2)])|0);\n     $314=((1280+($313<<2))|0);\n     $315=((HEAP32[(($314)>>2)])|0);\n     $316=($261|0)==($315|0);\n     do {\n      if ($316) {\n       HEAP32[(($314)>>2)]=$R7_1;\n       $cond298=($R7_1|0)==0;\n       if (!($cond298)) {\n        break;\n       }\n       $318=1<<$313;\n       $319=$318^-1;\n       $320=((HEAP32[((980)>>2)])|0);\n       $321=$320&$319;\n       HEAP32[((980)>>2)]=$321;\n       break L113;\n      } else {\n       $323=$264;\n       $324=((HEAP32[((992)>>2)])|0);\n       $325=($323>>>0)<($324>>>0);\n       if ($325) {\n        _abort();\n\n       }\n       $327=(($264+16)|0);\n       $328=((HEAP32[(($327)>>2)])|0);\n       $329=($328|0)==($261|0);\n       if ($329) {\n        HEAP32[(($327)>>2)]=$R7_1;\n       } else {\n        $332=(($264+20)|0);\n        HEAP32[(($332)>>2)]=$R7_1;\n       }\n       $335=($R7_1|0)==0;\n       if ($335) {\n        break L113;\n       }\n      }\n     } while(0);\n     $337=$R7_1;\n     $338=((HEAP32[((992)>>2)])|0);\n     $339=($337>>>0)<($338>>>0);\n     if ($339) {\n      _abort();\n\n     }\n     $341=(($R7_1+24)|0);\n     HEAP32[(($341)>>2)]=$264;\n     $_sum251=((($14)+(8))|0);\n     $342=(($mem+$_sum251)|0);\n     $343=$342;\n     $344=((HEAP32[(($343)>>2)])|0);\n     $345=($344|0)==0;\n     do {\n      if (!($345)) {\n       $347=$344;\n       $348=((HEAP32[((992)>>2)])|0);\n       $349=($347>>>0)<($348>>>0);\n       if ($349) {\n        _abort();\n\n       } else {\n        $351=(($R7_1+16)|0);\n        HEAP32[(($351)>>2)]=$344;\n        $352=(($344+24)|0);\n        HEAP32[(($352)>>2)]=$R7_1;\n        break;\n       }\n      }\n     } while(0);\n     $_sum252=((($14)+(12))|0);\n     $355=(($mem+$_sum252)|0);\n     $356=$355;\n     $357=((HEAP32[(($356)>>2)])|0);\n     $358=($357|0)==0;\n     if ($358) {\n      break;\n     }\n     $360=$357;\n     $361=((HEAP32[((992)>>2)])|0);\n     $362=($360>>>0)<($361>>>0);\n     if ($362) {\n      _abort();\n\n     } else {\n      $364=(($R7_1+20)|0);\n      HEAP32[(($364)>>2)]=$357;\n      $365=(($357+24)|0);\n      HEAP32[(($365)>>2)]=$R7_1;\n      break;\n     }\n    }\n   } while(0);\n   $368=$221|1;\n   $369=(($p_0+4)|0);\n   HEAP32[(($369)>>2)]=$368;\n   $370=(($188+$221)|0);\n   $371=$370;\n   HEAP32[(($371)>>2)]=$221;\n   $372=((HEAP32[((996)>>2)])|0);\n   $373=($p_0|0)==($372|0);\n   if (!($373)) {\n    $psize_1=$221;\n    break;\n   }\n   HEAP32[((984)>>2)]=$221;\n   return;\n  } else {\n   $376=$193&-2;\n   HEAP32[(($192)>>2)]=$376;\n   $377=$psize_0|1;\n   $378=(($p_0+4)|0);\n   HEAP32[(($378)>>2)]=$377;\n   $379=(($188+$psize_0)|0);\n   $380=$379;\n   HEAP32[(($380)>>2)]=$psize_0;\n   $psize_1=$psize_0;\n  }\n } while(0);\n\n $382=$psize_1>>>3;\n $383=($psize_1>>>0)<((256)>>>0);\n if ($383) {\n  $385=$382<<1;\n  $386=((1016+($385<<2))|0);\n  $387=$386;\n  $388=((HEAP32[((976)>>2)])|0);\n  $389=1<<$382;\n  $390=$388&$389;\n  $391=($390|0)==0;\n  do {\n   if ($391) {\n    $393=$388|$389;\n    HEAP32[((976)>>2)]=$393;\n    $_sum248_pre=((($385)+(2))|0);\n    $_pre=((1016+($_sum248_pre<<2))|0);\n    $F16_0=$387;$_pre_phi=$_pre;\n   } else {\n    $_sum249=((($385)+(2))|0);\n    $395=((1016+($_sum249<<2))|0);\n    $396=((HEAP32[(($395)>>2)])|0);\n    $397=$396;\n    $398=((HEAP32[((992)>>2)])|0);\n    $399=($397>>>0)<($398>>>0);\n    if (!($399)) {\n     $F16_0=$396;$_pre_phi=$395;\n     break;\n    }\n    _abort();\n\n   }\n  } while(0);\n\n\n  HEAP32[(($_pre_phi)>>2)]=$p_0;\n  $402=(($F16_0+12)|0);\n  HEAP32[(($402)>>2)]=$p_0;\n  $403=(($p_0+8)|0);\n  HEAP32[(($403)>>2)]=$F16_0;\n  $404=(($p_0+12)|0);\n  HEAP32[(($404)>>2)]=$387;\n  return;\n }\n $406=$p_0;\n $407=$psize_1>>>8;\n $408=($407|0)==0;\n do {\n  if ($408) {\n   $I18_0=0;\n  } else {\n   $410=($psize_1>>>0)>((16777215)>>>0);\n   if ($410) {\n    $I18_0=31;\n    break;\n   }\n   $412=((($407)+(1048320))|0);\n   $413=$412>>>16;\n   $414=$413&8;\n   $415=$407<<$414;\n   $416=((($415)+(520192))|0);\n   $417=$416>>>16;\n   $418=$417&4;\n   $419=$418|$414;\n   $420=$415<<$418;\n   $421=((($420)+(245760))|0);\n   $422=$421>>>16;\n   $423=$422&2;\n   $424=$419|$423;\n   $425=(((14)-($424))|0);\n   $426=$420<<$423;\n   $427=$426>>>15;\n   $428=((($425)+($427))|0);\n   $429=$428<<1;\n   $430=((($428)+(7))|0);\n   $431=$psize_1>>>($430>>>0);\n   $432=$431&1;\n   $433=$432|$429;\n   $I18_0=$433;\n  }\n } while(0);\n\n $435=((1280+($I18_0<<2))|0);\n $436=(($p_0+28)|0);\n $I18_0_c=$I18_0;\n HEAP32[(($436)>>2)]=$I18_0_c;\n $437=(($p_0+20)|0);\n HEAP32[(($437)>>2)]=0;\n $438=(($p_0+16)|0);\n HEAP32[(($438)>>2)]=0;\n $439=((HEAP32[((980)>>2)])|0);\n $440=1<<$I18_0;\n $441=$439&$440;\n $442=($441|0)==0;\n do {\n  if ($442) {\n   $444=$439|$440;\n   HEAP32[((980)>>2)]=$444;\n   HEAP32[(($435)>>2)]=$406;\n   $445=(($p_0+24)|0);\n   $_c=$435;\n   HEAP32[(($445)>>2)]=$_c;\n   $446=(($p_0+12)|0);\n   HEAP32[(($446)>>2)]=$p_0;\n   $447=(($p_0+8)|0);\n   HEAP32[(($447)>>2)]=$p_0;\n  } else {\n   $449=((HEAP32[(($435)>>2)])|0);\n   $450=($I18_0|0)==31;\n   if ($450) {\n    $455=0;\n   } else {\n    $452=$I18_0>>>1;\n    $453=(((25)-($452))|0);\n    $455=$453;\n   }\n\n   $456=$psize_1<<$455;\n   $K19_0=$456;$T_0=$449;\n   while(1) {\n\n\n    $458=(($T_0+4)|0);\n    $459=((HEAP32[(($458)>>2)])|0);\n    $460=$459&-8;\n    $461=($460|0)==($psize_1|0);\n    if ($461) {\n     break;\n    }\n    $463=$K19_0>>>31;\n    $464=(($T_0+16+($463<<2))|0);\n    $465=((HEAP32[(($464)>>2)])|0);\n    $466=($465|0)==0;\n    $467=$K19_0<<1;\n    if ($466) {\n     label = 129;\n     break;\n    } else {\n     $K19_0=$467;$T_0=$465;\n    }\n   }\n   if ((label|0) == 129) {\n    $469=$464;\n    $470=((HEAP32[((992)>>2)])|0);\n    $471=($469>>>0)<($470>>>0);\n    if ($471) {\n     _abort();\n\n    } else {\n     HEAP32[(($464)>>2)]=$406;\n     $473=(($p_0+24)|0);\n     $T_0_c245=$T_0;\n     HEAP32[(($473)>>2)]=$T_0_c245;\n     $474=(($p_0+12)|0);\n     HEAP32[(($474)>>2)]=$p_0;\n     $475=(($p_0+8)|0);\n     HEAP32[(($475)>>2)]=$p_0;\n     break;\n    }\n   }\n   $478=(($T_0+8)|0);\n   $479=((HEAP32[(($478)>>2)])|0);\n   $480=$T_0;\n   $481=((HEAP32[((992)>>2)])|0);\n   $482=($480>>>0)<($481>>>0);\n   if ($482) {\n    _abort();\n\n   }\n   $484=$479;\n   $485=($484>>>0)<($481>>>0);\n   if ($485) {\n    _abort();\n\n   } else {\n    $487=(($479+12)|0);\n    HEAP32[(($487)>>2)]=$406;\n    HEAP32[(($478)>>2)]=$406;\n    $488=(($p_0+8)|0);\n    $_c244=$479;\n    HEAP32[(($488)>>2)]=$_c244;\n    $489=(($p_0+12)|0);\n    $T_0_c=$T_0;\n    HEAP32[(($489)>>2)]=$T_0_c;\n    $490=(($p_0+24)|0);\n    HEAP32[(($490)>>2)]=0;\n    break;\n   }\n  }\n } while(0);\n $492=((HEAP32[((1008)>>2)])|0);\n $493=((($492)-(1))|0);\n HEAP32[((1008)>>2)]=$493;\n $494=($493|0)==0;\n if ($494) {\n  $sp_0_in_i=1432;\n } else {\n  return;\n }\n while(1) {\n\n  $sp_0_i=((HEAP32[(($sp_0_in_i)>>2)])|0);\n  $495=($sp_0_i|0)==0;\n  $496=(($sp_0_i+8)|0);\n  if ($495) {\n   break;\n  } else {\n   $sp_0_in_i=$496;\n  }\n }\n HEAP32[((1008)>>2)]=-1;\n return;\n}\n\n\nfunction _realloc($oldmem,$bytes){\n $oldmem=($oldmem)|0;\n $bytes=($bytes)|0;\n var $1=0,$3=0,$5=0,$7=0,$9=0,$11=0,$12=0,$14=0,$15=0,$16=0,$17=0,$18=0,$20=0,$21=0,$23=0,$24=0,$26=0,$27=0,$28=0,$29=0;\n var $30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$mem_0=0,label=0;\n\n $1=($oldmem|0)==0;\n if ($1) {\n  $3=((_malloc($bytes))|0);\n  $mem_0=$3;\n\n  return (($mem_0)|0);\n }\n $5=($bytes>>>0)>((4294967231)>>>0);\n if ($5) {\n  $7=((___errno_location())|0);\n  HEAP32[(($7)>>2)]=12;\n  $mem_0=0;\n\n  return (($mem_0)|0);\n }\n $9=($bytes>>>0)<((11)>>>0);\n if ($9) {\n  $14=16;\n } else {\n  $11=((($bytes)+(11))|0);\n  $12=$11&-8;\n  $14=$12;\n }\n\n $15=((($oldmem)-(8))|0);\n $16=$15;\n $17=((_try_realloc_chunk($16,$14))|0);\n $18=($17|0)==0;\n if (!($18)) {\n  $20=(($17+8)|0);\n  $21=$20;\n  $mem_0=$21;\n\n  return (($mem_0)|0);\n }\n $23=((_malloc($bytes))|0);\n $24=($23|0)==0;\n if ($24) {\n  $mem_0=0;\n\n  return (($mem_0)|0);\n }\n $26=((($oldmem)-(4))|0);\n $27=$26;\n $28=((HEAP32[(($27)>>2)])|0);\n $29=$28&-8;\n $30=$28&3;\n $31=($30|0)==0;\n $32=($31?8:4);\n $33=((($29)-($32))|0);\n $34=($33>>>0)<($bytes>>>0);\n $35=($34?$33:$bytes);\n (_memcpy((($23)|0), (($oldmem)|0), $35)|0);\n _free($oldmem);\n $mem_0=$23;\n\n return (($mem_0)|0);\n}\n\n\nfunction _try_realloc_chunk($p,$nb){\n $p=($p)|0;\n $nb=($nb)|0;\n var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$8=0,$10=0,$11=0,$12=0,$or_cond=0,$_sum3334=0,$14=0,$15=0,$16=0,$17=0,$phitmp=0,$19=0,$21=0;\n var $23=0,$24=0,$26=0,$27=0,$28=0,$29=0,$32=0,$34=0,$35=0,$37=0,$38=0,$39=0,$40=0,$41=0,$_sum29=0,$42=0,$43=0,$44=0,$45=0,$46=0;\n var $48=0,$49=0,$51=0,$52=0,$53=0,$55=0,$56=0,$57=0,$58=0,$59=0,$60=0,$_sum28=0,$61=0,$62=0,$63=0,$65=0,$66=0,$68=0,$69=0,$70=0;\n var $72=0,$73=0,$75=0,$76=0,$77=0,$78=0,$79=0,$80=0,$_sum25=0,$81=0,$82=0,$83=0,$84=0,$_sum26=0,$85=0,$86=0,$87=0,$88=0,$90=0,$91=0;\n var $92=0,$_sum23=0,$93=0,$94=0,$95=0,$96=0,$storemerge27=0,$storemerge=0,$99=0,$100=0,$102=0,$103=0,$104=0,$106=0,$107=0,$108=0,$_sum17=0,$110=0,$111=0,$112=0;\n var $_sum18=0,$113=0,$114=0,$115=0,$116=0,$117=0,$118=0,$119=0,$121=0,$122=0,$124=0,$125=0,$126=0,$127=0,$129=0,$130=0,$131=0,$132=0,$134=0,$_pre=0;\n var $136=0,$137=0,$139=0,$140=0,$141=0,$_pre_phi=0,$142=0,$144=0,$_sum=0,$145=0,$146=0,$147=0,$_sum2=0,$148=0,$149=0,$150=0,$151=0,$_sum14=0,$153=0,$154=0;\n var $155=0,$156=0,$157=0,$159=0,$160=0,$161=0,$163=0,$164=0,$165=0,$_sum4=0,$168=0,$169=0,$170=0,$171=0,$_sum3=0,$173=0,$174=0,$175=0,$176=0,$RP_0=0;\n var $R_0=0,$177=0,$178=0,$179=0,$181=0,$182=0,$183=0,$185=0,$186=0,$R_1=0,$190=0,$_sum11=0,$192=0,$193=0,$194=0,$195=0,$196=0,$197=0,$cond=0,$199=0;\n var $200=0,$201=0,$202=0,$204=0,$205=0,$206=0,$208=0,$209=0,$210=0,$213=0,$216=0,$218=0,$219=0,$220=0,$222=0,$_sum12=0,$223=0,$224=0,$225=0,$226=0;\n var $228=0,$229=0,$230=0,$232=0,$233=0,$_sum13=0,$236=0,$237=0,$238=0,$239=0,$241=0,$242=0,$243=0,$245=0,$246=0,$250=0,$252=0,$253=0,$254=0,$255=0;\n var $_sum910=0,$256=0,$257=0,$258=0,$259=0,$261=0,$262=0,$263=0,$264=0,$265=0,$266=0,$_sum5=0,$267=0,$268=0,$269=0,$_sum78=0,$270=0,$271=0,$272=0,$273=0;\n var $newp_0=0,label=0;\n\n $1=(($p+4)|0);\n $2=((HEAP32[(($1)>>2)])|0);\n $3=$2&-8;\n $4=$p;\n $5=(($4+$3)|0);\n $6=$5;\n $7=((HEAP32[((992)>>2)])|0);\n $8=($4>>>0)<($7>>>0);\n if ($8) {\n  _abort(); return ((0)|0);\n  return ((0)|0);\n }\n $10=$2&3;\n $11=($10|0)!=1;\n $12=($4>>>0)<($5>>>0);\n $or_cond=$11&$12;\n if (!($or_cond)) {\n  _abort(); return ((0)|0);\n  return ((0)|0);\n }\n $_sum3334=$3|4;\n $14=(($4+$_sum3334)|0);\n $15=$14;\n $16=((HEAP32[(($15)>>2)])|0);\n $17=$16&1;\n $phitmp=($17|0)==0;\n if ($phitmp) {\n  _abort(); return ((0)|0);\n  return ((0)|0);\n }\n $19=($10|0)==0;\n if ($19) {\n  $21=($nb>>>0)<((256)>>>0);\n  if ($21) {\n   $newp_0=0;\n\n   return (($newp_0)|0);\n  }\n  $23=((($nb)+(4))|0);\n  $24=($3>>>0)<($23>>>0);\n  do {\n   if (!($24)) {\n    $26=((($3)-($nb))|0);\n    $27=((HEAP32[((960)>>2)])|0);\n    $28=$27<<1;\n    $29=($26>>>0)>($28>>>0);\n    if ($29) {\n     break;\n    } else {\n     $newp_0=$p;\n    }\n\n    return (($newp_0)|0);\n   }\n  } while(0);\n  $newp_0=0;\n\n  return (($newp_0)|0);\n }\n $32=($3>>>0)<($nb>>>0);\n if (!($32)) {\n  $34=((($3)-($nb))|0);\n  $35=($34>>>0)>((15)>>>0);\n  if (!($35)) {\n   $newp_0=$p;\n\n   return (($newp_0)|0);\n  }\n  $37=(($4+$nb)|0);\n  $38=$37;\n  $39=$2&1;\n  $40=$39|$nb;\n  $41=$40|2;\n  HEAP32[(($1)>>2)]=$41;\n  $_sum29=((($nb)+(4))|0);\n  $42=(($4+$_sum29)|0);\n  $43=$42;\n  $44=$34|3;\n  HEAP32[(($43)>>2)]=$44;\n  $45=((HEAP32[(($15)>>2)])|0);\n  $46=$45|1;\n  HEAP32[(($15)>>2)]=$46;\n  _dispose_chunk($38,$34);\n  $newp_0=$p;\n\n  return (($newp_0)|0);\n }\n $48=((HEAP32[((1000)>>2)])|0);\n $49=($6|0)==($48|0);\n if ($49) {\n  $51=((HEAP32[((988)>>2)])|0);\n  $52=((($51)+($3))|0);\n  $53=($52>>>0)>($nb>>>0);\n  if (!($53)) {\n   $newp_0=0;\n\n   return (($newp_0)|0);\n  }\n  $55=((($52)-($nb))|0);\n  $56=(($4+$nb)|0);\n  $57=$56;\n  $58=$2&1;\n  $59=$58|$nb;\n  $60=$59|2;\n  HEAP32[(($1)>>2)]=$60;\n  $_sum28=((($nb)+(4))|0);\n  $61=(($4+$_sum28)|0);\n  $62=$61;\n  $63=$55|1;\n  HEAP32[(($62)>>2)]=$63;\n  HEAP32[((1000)>>2)]=$57;\n  HEAP32[((988)>>2)]=$55;\n  $newp_0=$p;\n\n  return (($newp_0)|0);\n }\n $65=((HEAP32[((996)>>2)])|0);\n $66=($6|0)==($65|0);\n if ($66) {\n  $68=((HEAP32[((984)>>2)])|0);\n  $69=((($68)+($3))|0);\n  $70=($69>>>0)<($nb>>>0);\n  if ($70) {\n   $newp_0=0;\n\n   return (($newp_0)|0);\n  }\n  $72=((($69)-($nb))|0);\n  $73=($72>>>0)>((15)>>>0);\n  if ($73) {\n   $75=(($4+$nb)|0);\n   $76=$75;\n   $77=(($4+$69)|0);\n   $78=$2&1;\n   $79=$78|$nb;\n   $80=$79|2;\n   HEAP32[(($1)>>2)]=$80;\n   $_sum25=((($nb)+(4))|0);\n   $81=(($4+$_sum25)|0);\n   $82=$81;\n   $83=$72|1;\n   HEAP32[(($82)>>2)]=$83;\n   $84=$77;\n   HEAP32[(($84)>>2)]=$72;\n   $_sum26=((($69)+(4))|0);\n   $85=(($4+$_sum26)|0);\n   $86=$85;\n   $87=((HEAP32[(($86)>>2)])|0);\n   $88=$87&-2;\n   HEAP32[(($86)>>2)]=$88;\n   $storemerge=$76;$storemerge27=$72;\n  } else {\n   $90=$2&1;\n   $91=$90|$69;\n   $92=$91|2;\n   HEAP32[(($1)>>2)]=$92;\n   $_sum23=((($69)+(4))|0);\n   $93=(($4+$_sum23)|0);\n   $94=$93;\n   $95=((HEAP32[(($94)>>2)])|0);\n   $96=$95|1;\n   HEAP32[(($94)>>2)]=$96;\n   $storemerge=0;$storemerge27=0;\n  }\n\n\n  HEAP32[((984)>>2)]=$storemerge27;\n  HEAP32[((996)>>2)]=$storemerge;\n  $newp_0=$p;\n\n  return (($newp_0)|0);\n }\n $99=$16&2;\n $100=($99|0)==0;\n if (!($100)) {\n  $newp_0=0;\n\n  return (($newp_0)|0);\n }\n $102=$16&-8;\n $103=((($102)+($3))|0);\n $104=($103>>>0)<($nb>>>0);\n if ($104) {\n  $newp_0=0;\n\n  return (($newp_0)|0);\n }\n $106=((($103)-($nb))|0);\n $107=$16>>>3;\n $108=($16>>>0)<((256)>>>0);\n L52: do {\n  if ($108) {\n   $_sum17=((($3)+(8))|0);\n   $110=(($4+$_sum17)|0);\n   $111=$110;\n   $112=((HEAP32[(($111)>>2)])|0);\n   $_sum18=((($3)+(12))|0);\n   $113=(($4+$_sum18)|0);\n   $114=$113;\n   $115=((HEAP32[(($114)>>2)])|0);\n   $116=$107<<1;\n   $117=((1016+($116<<2))|0);\n   $118=$117;\n   $119=($112|0)==($118|0);\n   do {\n    if (!($119)) {\n     $121=$112;\n     $122=($121>>>0)<($7>>>0);\n     if ($122) {\n      _abort(); return ((0)|0);\n      return ((0)|0);\n     }\n     $124=(($112+12)|0);\n     $125=((HEAP32[(($124)>>2)])|0);\n     $126=($125|0)==($6|0);\n     if ($126) {\n      break;\n     }\n     _abort(); return ((0)|0);\n     return ((0)|0);\n    }\n   } while(0);\n   $127=($115|0)==($112|0);\n   if ($127) {\n    $129=1<<$107;\n    $130=$129^-1;\n    $131=((HEAP32[((976)>>2)])|0);\n    $132=$131&$130;\n    HEAP32[((976)>>2)]=$132;\n    break;\n   }\n   $134=($115|0)==($118|0);\n   do {\n    if ($134) {\n     $_pre=(($115+8)|0);\n     $_pre_phi=$_pre;\n    } else {\n     $136=$115;\n     $137=($136>>>0)<($7>>>0);\n     if ($137) {\n      _abort(); return ((0)|0);\n      return ((0)|0);\n     }\n     $139=(($115+8)|0);\n     $140=((HEAP32[(($139)>>2)])|0);\n     $141=($140|0)==($6|0);\n     if ($141) {\n      $_pre_phi=$139;\n      break;\n     }\n     _abort(); return ((0)|0);\n     return ((0)|0);\n    }\n   } while(0);\n\n   $142=(($112+12)|0);\n   HEAP32[(($142)>>2)]=$115;\n   HEAP32[(($_pre_phi)>>2)]=$112;\n  } else {\n   $144=$5;\n   $_sum=((($3)+(24))|0);\n   $145=(($4+$_sum)|0);\n   $146=$145;\n   $147=((HEAP32[(($146)>>2)])|0);\n   $_sum2=((($3)+(12))|0);\n   $148=(($4+$_sum2)|0);\n   $149=$148;\n   $150=((HEAP32[(($149)>>2)])|0);\n   $151=($150|0)==($144|0);\n   do {\n    if ($151) {\n     $_sum4=((($3)+(20))|0);\n     $168=(($4+$_sum4)|0);\n     $169=$168;\n     $170=((HEAP32[(($169)>>2)])|0);\n     $171=($170|0)==0;\n     if ($171) {\n      $_sum3=((($3)+(16))|0);\n      $173=(($4+$_sum3)|0);\n      $174=$173;\n      $175=((HEAP32[(($174)>>2)])|0);\n      $176=($175|0)==0;\n      if ($176) {\n       $R_1=0;\n       break;\n      } else {\n       $R_0=$175;$RP_0=$174;\n      }\n     } else {\n      $R_0=$170;$RP_0=$169;\n     }\n     while(1) {\n\n\n      $177=(($R_0+20)|0);\n      $178=((HEAP32[(($177)>>2)])|0);\n      $179=($178|0)==0;\n      if (!($179)) {\n       $R_0=$178;$RP_0=$177;\n       continue;\n      }\n      $181=(($R_0+16)|0);\n      $182=((HEAP32[(($181)>>2)])|0);\n      $183=($182|0)==0;\n      if ($183) {\n       break;\n      } else {\n       $R_0=$182;$RP_0=$181;\n      }\n     }\n     $185=$RP_0;\n     $186=($185>>>0)<($7>>>0);\n     if ($186) {\n      _abort(); return ((0)|0);\n      return ((0)|0);\n     } else {\n      HEAP32[(($RP_0)>>2)]=0;\n      $R_1=$R_0;\n      break;\n     }\n    } else {\n     $_sum14=((($3)+(8))|0);\n     $153=(($4+$_sum14)|0);\n     $154=$153;\n     $155=((HEAP32[(($154)>>2)])|0);\n     $156=$155;\n     $157=($156>>>0)<($7>>>0);\n     if ($157) {\n      _abort(); return ((0)|0);\n      return ((0)|0);\n     }\n     $159=(($155+12)|0);\n     $160=((HEAP32[(($159)>>2)])|0);\n     $161=($160|0)==($144|0);\n     if (!($161)) {\n      _abort(); return ((0)|0);\n      return ((0)|0);\n     }\n     $163=(($150+8)|0);\n     $164=((HEAP32[(($163)>>2)])|0);\n     $165=($164|0)==($144|0);\n     if ($165) {\n      HEAP32[(($159)>>2)]=$150;\n      HEAP32[(($163)>>2)]=$155;\n      $R_1=$150;\n      break;\n     } else {\n      _abort(); return ((0)|0);\n      return ((0)|0);\n     }\n    }\n   } while(0);\n\n   $190=($147|0)==0;\n   if ($190) {\n    break;\n   }\n   $_sum11=((($3)+(28))|0);\n   $192=(($4+$_sum11)|0);\n   $193=$192;\n   $194=((HEAP32[(($193)>>2)])|0);\n   $195=((1280+($194<<2))|0);\n   $196=((HEAP32[(($195)>>2)])|0);\n   $197=($144|0)==($196|0);\n   do {\n    if ($197) {\n     HEAP32[(($195)>>2)]=$R_1;\n     $cond=($R_1|0)==0;\n     if (!($cond)) {\n      break;\n     }\n     $199=1<<$194;\n     $200=$199^-1;\n     $201=((HEAP32[((980)>>2)])|0);\n     $202=$201&$200;\n     HEAP32[((980)>>2)]=$202;\n     break L52;\n    } else {\n     $204=$147;\n     $205=((HEAP32[((992)>>2)])|0);\n     $206=($204>>>0)<($205>>>0);\n     if ($206) {\n      _abort(); return ((0)|0);\n      return ((0)|0);\n     }\n     $208=(($147+16)|0);\n     $209=((HEAP32[(($208)>>2)])|0);\n     $210=($209|0)==($144|0);\n     if ($210) {\n      HEAP32[(($208)>>2)]=$R_1;\n     } else {\n      $213=(($147+20)|0);\n      HEAP32[(($213)>>2)]=$R_1;\n     }\n     $216=($R_1|0)==0;\n     if ($216) {\n      break L52;\n     }\n    }\n   } while(0);\n   $218=$R_1;\n   $219=((HEAP32[((992)>>2)])|0);\n   $220=($218>>>0)<($219>>>0);\n   if ($220) {\n    _abort(); return ((0)|0);\n    return ((0)|0);\n   }\n   $222=(($R_1+24)|0);\n   HEAP32[(($222)>>2)]=$147;\n   $_sum12=((($3)+(16))|0);\n   $223=(($4+$_sum12)|0);\n   $224=$223;\n   $225=((HEAP32[(($224)>>2)])|0);\n   $226=($225|0)==0;\n   do {\n    if (!($226)) {\n     $228=$225;\n     $229=((HEAP32[((992)>>2)])|0);\n     $230=($228>>>0)<($229>>>0);\n     if ($230) {\n      _abort(); return ((0)|0);\n      return ((0)|0);\n     } else {\n      $232=(($R_1+16)|0);\n      HEAP32[(($232)>>2)]=$225;\n      $233=(($225+24)|0);\n      HEAP32[(($233)>>2)]=$R_1;\n      break;\n     }\n    }\n   } while(0);\n   $_sum13=((($3)+(20))|0);\n   $236=(($4+$_sum13)|0);\n   $237=$236;\n   $238=((HEAP32[(($237)>>2)])|0);\n   $239=($238|0)==0;\n   if ($239) {\n    break;\n   }\n   $241=$238;\n   $242=((HEAP32[((992)>>2)])|0);\n   $243=($241>>>0)<($242>>>0);\n   if ($243) {\n    _abort(); return ((0)|0);\n    return ((0)|0);\n   } else {\n    $245=(($R_1+20)|0);\n    HEAP32[(($245)>>2)]=$238;\n    $246=(($238+24)|0);\n    HEAP32[(($246)>>2)]=$R_1;\n    break;\n   }\n  }\n } while(0);\n $250=($106>>>0)<((16)>>>0);\n if ($250) {\n  $252=((HEAP32[(($1)>>2)])|0);\n  $253=$252&1;\n  $254=$103|$253;\n  $255=$254|2;\n  HEAP32[(($1)>>2)]=$255;\n  $_sum910=$103|4;\n  $256=(($4+$_sum910)|0);\n  $257=$256;\n  $258=((HEAP32[(($257)>>2)])|0);\n  $259=$258|1;\n  HEAP32[(($257)>>2)]=$259;\n  $newp_0=$p;\n\n  return (($newp_0)|0);\n } else {\n  $261=(($4+$nb)|0);\n  $262=$261;\n  $263=((HEAP32[(($1)>>2)])|0);\n  $264=$263&1;\n  $265=$264|$nb;\n  $266=$265|2;\n  HEAP32[(($1)>>2)]=$266;\n  $_sum5=((($nb)+(4))|0);\n  $267=(($4+$_sum5)|0);\n  $268=$267;\n  $269=$106|3;\n  HEAP32[(($268)>>2)]=$269;\n  $_sum78=$103|4;\n  $270=(($4+$_sum78)|0);\n  $271=$270;\n  $272=((HEAP32[(($271)>>2)])|0);\n  $273=$272|1;\n  HEAP32[(($271)>>2)]=$273;\n  _dispose_chunk($262,$106);\n  $newp_0=$p;\n\n  return (($newp_0)|0);\n }\n  return 0;\n}\n\n\nfunction _malloc_usable_size($mem){\n $mem=($mem)|0;\n var $1=0,$3=0,$4=0,$5=0,$6=0,$7=0,$9=0,$10=0,$11=0,$12=0,$_0=0,label=0;\n\n $1=($mem|0)==0;\n do {\n  if ($1) {\n   $_0=0;\n  } else {\n   $3=((($mem)-(4))|0);\n   $4=$3;\n   $5=((HEAP32[(($4)>>2)])|0);\n   $6=$5&3;\n   $7=($6|0)==1;\n   if ($7) {\n    $_0=0;\n    break;\n   }\n   $9=$5&-8;\n   $10=($6|0)==0;\n   $11=($10?8:4);\n   $12=((($9)-($11))|0);\n   $_0=$12;\n  }\n } while(0);\n\n return (($_0)|0);\n}\n\n\nfunction _dispose_chunk($p,$psize){\n $p=($p)|0;\n $psize=($psize)|0;\n var $1=0,$2=0,$3=0,$4=0,$5=0,$6=0,$7=0,$9=0,$10=0,$11=0,$12=0,$14=0,$15=0,$16=0,$17=0,$18=0,$19=0,$21=0,$22=0,$24=0;\n var $25=0,$_sum35=0,$27=0,$28=0,$29=0,$_sum36=0,$30=0,$31=0,$32=0,$33=0,$34=0,$35=0,$36=0,$38=0,$39=0,$41=0,$42=0,$43=0,$44=0,$46=0;\n var $47=0,$48=0,$49=0,$51=0,$_pre65=0,$53=0,$54=0,$56=0,$57=0,$58=0,$_pre_phi66=0,$59=0,$61=0,$_sum26=0,$62=0,$63=0,$64=0,$_sum27=0,$65=0,$66=0;\n var $67=0,$68=0,$_sum33=0,$70=0,$71=0,$72=0,$73=0,$74=0,$76=0,$77=0,$78=0,$80=0,$81=0,$82=0,$_sum28=0,$_sum29=0,$85=0,$86=0,$87=0,$88=0;\n var $90=0,$91=0,$92=0,$93=0,$RP_0=0,$R_0=0,$94=0,$95=0,$96=0,$98=0,$99=0,$100=0,$102=0,$103=0,$R_1=0,$107=0,$_sum30=0,$109=0,$110=0,$111=0;\n var $112=0,$113=0,$114=0,$cond=0,$116=0,$117=0,$118=0,$119=0,$121=0,$122=0,$123=0,$125=0,$126=0,$127=0,$130=0,$133=0,$135=0,$136=0,$137=0,$139=0;\n var $_sum31=0,$140=0,$141=0,$142=0,$143=0,$145=0,$146=0,$147=0,$149=0,$150=0,$_sum32=0,$153=0,$154=0,$155=0,$156=0,$158=0,$159=0,$160=0,$162=0,$163=0;\n var $_sum=0,$167=0,$168=0,$169=0,$170=0,$171=0,$173=0,$174=0,$175=0,$_sum24=0,$176=0,$177=0,$178=0,$_0277=0,$_0=0,$180=0,$181=0,$_sum1=0,$183=0,$184=0;\n var $185=0,$186=0,$187=0,$189=0,$190=0,$192=0,$193=0,$194=0,$195=0,$196=0,$197=0,$200=0,$201=0,$203=0,$204=0,$205=0,$206=0,$207=0,$208=0,$209=0;\n var $211=0,$212=0,$213=0,$214=0,$_sum20=0,$216=0,$217=0,$218=0,$_sum21=0,$219=0,$220=0,$221=0,$222=0,$223=0,$224=0,$225=0,$227=0,$228=0,$230=0,$231=0;\n var $232=0,$233=0,$235=0,$236=0,$237=0,$238=0,$240=0,$_pre63=0,$242=0,$243=0,$245=0,$246=0,$247=0,$_pre_phi64=0,$248=0,$250=0,$_sum2=0,$251=0,$252=0,$253=0;\n var $_sum3=0,$254=0,$255=0,$256=0,$257=0,$_sum18=0,$259=0,$260=0,$261=0,$262=0,$263=0,$265=0,$266=0,$267=0,$269=0,$270=0,$271=0,$_sum5=0,$274=0,$275=0;\n var $276=0,$277=0,$_sum4=0,$279=0,$280=0,$281=0,$282=0,$RP9_0=0,$R7_0=0,$283=0,$284=0,$285=0,$287=0,$288=0,$289=0,$291=0,$292=0,$R7_1=0,$296=0,$_sum15=0;\n var $298=0,$299=0,$300=0,$301=0,$302=0,$303=0,$cond53=0,$305=0,$306=0,$307=0,$308=0,$310=0,$311=0,$312=0,$314=0,$315=0,$316=0,$319=0,$322=0,$324=0;\n var $325=0,$326=0,$328=0,$_sum16=0,$329=0,$330=0,$331=0,$332=0,$334=0,$335=0,$336=0,$338=0,$339=0,$_sum17=0,$342=0,$343=0,$344=0,$345=0,$347=0,$348=0;\n var $349=0,$351=0,$352=0,$355=0,$356=0,$357=0,$358=0,$359=0,$360=0,$361=0,$364=0,$365=0,$366=0,$367=0,$368=0,$369=0,$_1=0,$371=0,$372=0,$374=0;\n var $375=0,$376=0,$377=0,$378=0,$379=0,$380=0,$382=0,$_sum13_pre=0,$_pre=0,$_sum14=0,$384=0,$385=0,$386=0,$387=0,$388=0,$_pre_phi=0,$F16_0=0,$391=0,$392=0,$393=0;\n var $395=0,$396=0,$397=0,$399=0,$401=0,$402=0,$403=0,$404=0,$405=0,$406=0,$407=0,$408=0,$409=0,$410=0,$411=0,$412=0,$413=0,$414=0,$415=0,$416=0;\n var $417=0,$418=0,$419=0,$420=0,$421=0,$422=0,$I19_0=0,$424=0,$425=0,$I19_0_c=0,$426=0,$427=0,$428=0,$429=0,$430=0,$431=0,$433=0,$434=0,$_c=0,$435=0;\n var $436=0,$438=0,$439=0,$441=0,$442=0,$444=0,$445=0,$T_0=0,$K20_0=0,$447=0,$448=0,$449=0,$450=0,$452=0,$453=0,$454=0,$455=0,$456=0,$458=0,$459=0;\n var $460=0,$462=0,$T_0_c10=0,$463=0,$464=0,$467=0,$468=0,$469=0,$470=0,$471=0,$473=0,$474=0,$476=0,$477=0,$_c9=0,$478=0,$T_0_c=0,$479=0,label=0;\n\n $1=$p;\n $2=(($1+$psize)|0);\n $3=$2;\n $4=(($p+4)|0);\n $5=((HEAP32[(($4)>>2)])|0);\n $6=$5&1;\n $7=($6|0)==0;\n L1: do {\n  if ($7) {\n   $9=(($p)|0);\n   $10=((HEAP32[(($9)>>2)])|0);\n   $11=$5&3;\n   $12=($11|0)==0;\n   if ($12) {\n    return;\n   }\n   $14=(((-$10))|0);\n   $15=(($1+$14)|0);\n   $16=$15;\n   $17=((($10)+($psize))|0);\n   $18=((HEAP32[((992)>>2)])|0);\n   $19=($15>>>0)<($18>>>0);\n   if ($19) {\n    _abort();\n\n   }\n   $21=((HEAP32[((996)>>2)])|0);\n   $22=($16|0)==($21|0);\n   if ($22) {\n    $_sum=((($psize)+(4))|0);\n    $167=(($1+$_sum)|0);\n    $168=$167;\n    $169=((HEAP32[(($168)>>2)])|0);\n    $170=$169&3;\n    $171=($170|0)==3;\n    if (!($171)) {\n     $_0=$16;$_0277=$17;\n     break;\n    }\n    HEAP32[((984)>>2)]=$17;\n    $173=((HEAP32[(($168)>>2)])|0);\n    $174=$173&-2;\n    HEAP32[(($168)>>2)]=$174;\n    $175=$17|1;\n    $_sum24=(((4)-($10))|0);\n    $176=(($1+$_sum24)|0);\n    $177=$176;\n    HEAP32[(($177)>>2)]=$175;\n    $178=$2;\n    HEAP32[(($178)>>2)]=$17;\n    return;\n   }\n   $24=$10>>>3;\n   $25=($10>>>0)<((256)>>>0);\n   if ($25) {\n    $_sum35=(((8)-($10))|0);\n    $27=(($1+$_sum35)|0);\n    $28=$27;\n    $29=((HEAP32[(($28)>>2)])|0);\n    $_sum36=(((12)-($10))|0);\n    $30=(($1+$_sum36)|0);\n    $31=$30;\n    $32=((HEAP32[(($31)>>2)])|0);\n    $33=$24<<1;\n    $34=((1016+($33<<2))|0);\n    $35=$34;\n    $36=($29|0)==($35|0);\n    do {\n     if (!($36)) {\n      $38=$29;\n      $39=($38>>>0)<($18>>>0);\n      if ($39) {\n       _abort();\n\n      }\n      $41=(($29+12)|0);\n      $42=((HEAP32[(($41)>>2)])|0);\n      $43=($42|0)==($16|0);\n      if ($43) {\n       break;\n      }\n      _abort();\n\n     }\n    } while(0);\n    $44=($32|0)==($29|0);\n    if ($44) {\n     $46=1<<$24;\n     $47=$46^-1;\n     $48=((HEAP32[((976)>>2)])|0);\n     $49=$48&$47;\n     HEAP32[((976)>>2)]=$49;\n     $_0=$16;$_0277=$17;\n     break;\n    }\n    $51=($32|0)==($35|0);\n    do {\n     if ($51) {\n      $_pre65=(($32+8)|0);\n      $_pre_phi66=$_pre65;\n     } else {\n      $53=$32;\n      $54=($53>>>0)<($18>>>0);\n      if ($54) {\n       _abort();\n\n      }\n      $56=(($32+8)|0);\n      $57=((HEAP32[(($56)>>2)])|0);\n      $58=($57|0)==($16|0);\n      if ($58) {\n       $_pre_phi66=$56;\n       break;\n      }\n      _abort();\n\n     }\n    } while(0);\n\n    $59=(($29+12)|0);\n    HEAP32[(($59)>>2)]=$32;\n    HEAP32[(($_pre_phi66)>>2)]=$29;\n    $_0=$16;$_0277=$17;\n    break;\n   }\n   $61=$15;\n   $_sum26=(((24)-($10))|0);\n   $62=(($1+$_sum26)|0);\n   $63=$62;\n   $64=((HEAP32[(($63)>>2)])|0);\n   $_sum27=(((12)-($10))|0);\n   $65=(($1+$_sum27)|0);\n   $66=$65;\n   $67=((HEAP32[(($66)>>2)])|0);\n   $68=($67|0)==($61|0);\n   do {\n    if ($68) {\n     $_sum28=(((16)-($10))|0);\n     $_sum29=((($_sum28)+(4))|0);\n     $85=(($1+$_sum29)|0);\n     $86=$85;\n     $87=((HEAP32[(($86)>>2)])|0);\n     $88=($87|0)==0;\n     if ($88) {\n      $90=(($1+$_sum28)|0);\n      $91=$90;\n      $92=((HEAP32[(($91)>>2)])|0);\n      $93=($92|0)==0;\n      if ($93) {\n       $R_1=0;\n       break;\n      } else {\n       $R_0=$92;$RP_0=$91;\n      }\n     } else {\n      $R_0=$87;$RP_0=$86;\n     }\n     while(1) {\n\n\n      $94=(($R_0+20)|0);\n      $95=((HEAP32[(($94)>>2)])|0);\n      $96=($95|0)==0;\n      if (!($96)) {\n       $R_0=$95;$RP_0=$94;\n       continue;\n      }\n      $98=(($R_0+16)|0);\n      $99=((HEAP32[(($98)>>2)])|0);\n      $100=($99|0)==0;\n      if ($100) {\n       break;\n      } else {\n       $R_0=$99;$RP_0=$98;\n      }\n     }\n     $102=$RP_0;\n     $103=($102>>>0)<($18>>>0);\n     if ($103) {\n      _abort();\n\n     } else {\n      HEAP32[(($RP_0)>>2)]=0;\n      $R_1=$R_0;\n      break;\n     }\n    } else {\n     $_sum33=(((8)-($10))|0);\n     $70=(($1+$_sum33)|0);\n     $71=$70;\n     $72=((HEAP32[(($71)>>2)])|0);\n     $73=$72;\n     $74=($73>>>0)<($18>>>0);\n     if ($74) {\n      _abort();\n\n     }\n     $76=(($72+12)|0);\n     $77=((HEAP32[(($76)>>2)])|0);\n     $78=($77|0)==($61|0);\n     if (!($78)) {\n      _abort();\n\n     }\n     $80=(($67+8)|0);\n     $81=((HEAP32[(($80)>>2)])|0);\n     $82=($81|0)==($61|0);\n     if ($82) {\n      HEAP32[(($76)>>2)]=$67;\n      HEAP32[(($80)>>2)]=$72;\n      $R_1=$67;\n      break;\n     } else {\n      _abort();\n\n     }\n    }\n   } while(0);\n\n   $107=($64|0)==0;\n   if ($107) {\n    $_0=$16;$_0277=$17;\n    break;\n   }\n   $_sum30=(((28)-($10))|0);\n   $109=(($1+$_sum30)|0);\n   $110=$109;\n   $111=((HEAP32[(($110)>>2)])|0);\n   $112=((1280+($111<<2))|0);\n   $113=((HEAP32[(($112)>>2)])|0);\n   $114=($61|0)==($113|0);\n   do {\n    if ($114) {\n     HEAP32[(($112)>>2)]=$R_1;\n     $cond=($R_1|0)==0;\n     if (!($cond)) {\n      break;\n     }\n     $116=1<<$111;\n     $117=$116^-1;\n     $118=((HEAP32[((980)>>2)])|0);\n     $119=$118&$117;\n     HEAP32[((980)>>2)]=$119;\n     $_0=$16;$_0277=$17;\n     break L1;\n    } else {\n     $121=$64;\n     $122=((HEAP32[((992)>>2)])|0);\n     $123=($121>>>0)<($122>>>0);\n     if ($123) {\n      _abort();\n\n     }\n     $125=(($64+16)|0);\n     $126=((HEAP32[(($125)>>2)])|0);\n     $127=($126|0)==($61|0);\n     if ($127) {\n      HEAP32[(($125)>>2)]=$R_1;\n     } else {\n      $130=(($64+20)|0);\n      HEAP32[(($130)>>2)]=$R_1;\n     }\n     $133=($R_1|0)==0;\n     if ($133) {\n      $_0=$16;$_0277=$17;\n      break L1;\n     }\n    }\n   } while(0);\n   $135=$R_1;\n   $136=((HEAP32[((992)>>2)])|0);\n   $137=($135>>>0)<($136>>>0);\n   if ($137) {\n    _abort();\n\n   }\n   $139=(($R_1+24)|0);\n   HEAP32[(($139)>>2)]=$64;\n   $_sum31=(((16)-($10))|0);\n   $140=(($1+$_sum31)|0);\n   $141=$140;\n   $142=((HEAP32[(($141)>>2)])|0);\n   $143=($142|0)==0;\n   do {\n    if (!($143)) {\n     $145=$142;\n     $146=((HEAP32[((992)>>2)])|0);\n     $147=($145>>>0)<($146>>>0);\n     if ($147) {\n      _abort();\n\n     } else {\n      $149=(($R_1+16)|0);\n      HEAP32[(($149)>>2)]=$142;\n      $150=(($142+24)|0);\n      HEAP32[(($150)>>2)]=$R_1;\n      break;\n     }\n    }\n   } while(0);\n   $_sum32=((($_sum31)+(4))|0);\n   $153=(($1+$_sum32)|0);\n   $154=$153;\n   $155=((HEAP32[(($154)>>2)])|0);\n   $156=($155|0)==0;\n   if ($156) {\n    $_0=$16;$_0277=$17;\n    break;\n   }\n   $158=$155;\n   $159=((HEAP32[((992)>>2)])|0);\n   $160=($158>>>0)<($159>>>0);\n   if ($160) {\n    _abort();\n\n   } else {\n    $162=(($R_1+20)|0);\n    HEAP32[(($162)>>2)]=$155;\n    $163=(($155+24)|0);\n    HEAP32[(($163)>>2)]=$R_1;\n    $_0=$16;$_0277=$17;\n    break;\n   }\n  } else {\n   $_0=$p;$_0277=$psize;\n  }\n } while(0);\n\n\n $180=((HEAP32[((992)>>2)])|0);\n $181=($2>>>0)<($180>>>0);\n if ($181) {\n  _abort();\n\n }\n $_sum1=((($psize)+(4))|0);\n $183=(($1+$_sum1)|0);\n $184=$183;\n $185=((HEAP32[(($184)>>2)])|0);\n $186=$185&2;\n $187=($186|0)==0;\n do {\n  if ($187) {\n   $189=((HEAP32[((1000)>>2)])|0);\n   $190=($3|0)==($189|0);\n   if ($190) {\n    $192=((HEAP32[((988)>>2)])|0);\n    $193=((($192)+($_0277))|0);\n    HEAP32[((988)>>2)]=$193;\n    HEAP32[((1000)>>2)]=$_0;\n    $194=$193|1;\n    $195=(($_0+4)|0);\n    HEAP32[(($195)>>2)]=$194;\n    $196=((HEAP32[((996)>>2)])|0);\n    $197=($_0|0)==($196|0);\n    if (!($197)) {\n     return;\n    }\n    HEAP32[((996)>>2)]=0;\n    HEAP32[((984)>>2)]=0;\n    return;\n   }\n   $200=((HEAP32[((996)>>2)])|0);\n   $201=($3|0)==($200|0);\n   if ($201) {\n    $203=((HEAP32[((984)>>2)])|0);\n    $204=((($203)+($_0277))|0);\n    HEAP32[((984)>>2)]=$204;\n    HEAP32[((996)>>2)]=$_0;\n    $205=$204|1;\n    $206=(($_0+4)|0);\n    HEAP32[(($206)>>2)]=$205;\n    $207=$_0;\n    $208=(($207+$204)|0);\n    $209=$208;\n    HEAP32[(($209)>>2)]=$204;\n    return;\n   }\n   $211=$185&-8;\n   $212=((($211)+($_0277))|0);\n   $213=$185>>>3;\n   $214=($185>>>0)<((256)>>>0);\n   L100: do {\n    if ($214) {\n     $_sum20=((($psize)+(8))|0);\n     $216=(($1+$_sum20)|0);\n     $217=$216;\n     $218=((HEAP32[(($217)>>2)])|0);\n     $_sum21=((($psize)+(12))|0);\n     $219=(($1+$_sum21)|0);\n     $220=$219;\n     $221=((HEAP32[(($220)>>2)])|0);\n     $222=$213<<1;\n     $223=((1016+($222<<2))|0);\n     $224=$223;\n     $225=($218|0)==($224|0);\n     do {\n      if (!($225)) {\n       $227=$218;\n       $228=($227>>>0)<($180>>>0);\n       if ($228) {\n        _abort();\n\n       }\n       $230=(($218+12)|0);\n       $231=((HEAP32[(($230)>>2)])|0);\n       $232=($231|0)==($3|0);\n       if ($232) {\n        break;\n       }\n       _abort();\n\n      }\n     } while(0);\n     $233=($221|0)==($218|0);\n     if ($233) {\n      $235=1<<$213;\n      $236=$235^-1;\n      $237=((HEAP32[((976)>>2)])|0);\n      $238=$237&$236;\n      HEAP32[((976)>>2)]=$238;\n      break;\n     }\n     $240=($221|0)==($224|0);\n     do {\n      if ($240) {\n       $_pre63=(($221+8)|0);\n       $_pre_phi64=$_pre63;\n      } else {\n       $242=$221;\n       $243=($242>>>0)<($180>>>0);\n       if ($243) {\n        _abort();\n\n       }\n       $245=(($221+8)|0);\n       $246=((HEAP32[(($245)>>2)])|0);\n       $247=($246|0)==($3|0);\n       if ($247) {\n        $_pre_phi64=$245;\n        break;\n       }\n       _abort();\n\n      }\n     } while(0);\n\n     $248=(($218+12)|0);\n     HEAP32[(($248)>>2)]=$221;\n     HEAP32[(($_pre_phi64)>>2)]=$218;\n    } else {\n     $250=$2;\n     $_sum2=((($psize)+(24))|0);\n     $251=(($1+$_sum2)|0);\n     $252=$251;\n     $253=((HEAP32[(($252)>>2)])|0);\n     $_sum3=((($psize)+(12))|0);\n     $254=(($1+$_sum3)|0);\n     $255=$254;\n     $256=((HEAP32[(($255)>>2)])|0);\n     $257=($256|0)==($250|0);\n     do {\n      if ($257) {\n       $_sum5=((($psize)+(20))|0);\n       $274=(($1+$_sum5)|0);\n       $275=$274;\n       $276=((HEAP32[(($275)>>2)])|0);\n       $277=($276|0)==0;\n       if ($277) {\n        $_sum4=((($psize)+(16))|0);\n        $279=(($1+$_sum4)|0);\n        $280=$279;\n        $281=((HEAP32[(($280)>>2)])|0);\n        $282=($281|0)==0;\n        if ($282) {\n         $R7_1=0;\n         break;\n        } else {\n         $R7_0=$281;$RP9_0=$280;\n        }\n       } else {\n        $R7_0=$276;$RP9_0=$275;\n       }\n       while(1) {\n\n\n        $283=(($R7_0+20)|0);\n        $284=((HEAP32[(($283)>>2)])|0);\n        $285=($284|0)==0;\n        if (!($285)) {\n         $R7_0=$284;$RP9_0=$283;\n         continue;\n        }\n        $287=(($R7_0+16)|0);\n        $288=((HEAP32[(($287)>>2)])|0);\n        $289=($288|0)==0;\n        if ($289) {\n         break;\n        } else {\n         $R7_0=$288;$RP9_0=$287;\n        }\n       }\n       $291=$RP9_0;\n       $292=($291>>>0)<($180>>>0);\n       if ($292) {\n        _abort();\n\n       } else {\n        HEAP32[(($RP9_0)>>2)]=0;\n        $R7_1=$R7_0;\n        break;\n       }\n      } else {\n       $_sum18=((($psize)+(8))|0);\n       $259=(($1+$_sum18)|0);\n       $260=$259;\n       $261=((HEAP32[(($260)>>2)])|0);\n       $262=$261;\n       $263=($262>>>0)<($180>>>0);\n       if ($263) {\n        _abort();\n\n       }\n       $265=(($261+12)|0);\n       $266=((HEAP32[(($265)>>2)])|0);\n       $267=($266|0)==($250|0);\n       if (!($267)) {\n        _abort();\n\n       }\n       $269=(($256+8)|0);\n       $270=((HEAP32[(($269)>>2)])|0);\n       $271=($270|0)==($250|0);\n       if ($271) {\n        HEAP32[(($265)>>2)]=$256;\n        HEAP32[(($269)>>2)]=$261;\n        $R7_1=$256;\n        break;\n       } else {\n        _abort();\n\n       }\n      }\n     } while(0);\n\n     $296=($253|0)==0;\n     if ($296) {\n      break;\n     }\n     $_sum15=((($psize)+(28))|0);\n     $298=(($1+$_sum15)|0);\n     $299=$298;\n     $300=((HEAP32[(($299)>>2)])|0);\n     $301=((1280+($300<<2))|0);\n     $302=((HEAP32[(($301)>>2)])|0);\n     $303=($250|0)==($302|0);\n     do {\n      if ($303) {\n       HEAP32[(($301)>>2)]=$R7_1;\n       $cond53=($R7_1|0)==0;\n       if (!($cond53)) {\n        break;\n       }\n       $305=1<<$300;\n       $306=$305^-1;\n       $307=((HEAP32[((980)>>2)])|0);\n       $308=$307&$306;\n       HEAP32[((980)>>2)]=$308;\n       break L100;\n      } else {\n       $310=$253;\n       $311=((HEAP32[((992)>>2)])|0);\n       $312=($310>>>0)<($311>>>0);\n       if ($312) {\n        _abort();\n\n       }\n       $314=(($253+16)|0);\n       $315=((HEAP32[(($314)>>2)])|0);\n       $316=($315|0)==($250|0);\n       if ($316) {\n        HEAP32[(($314)>>2)]=$R7_1;\n       } else {\n        $319=(($253+20)|0);\n        HEAP32[(($319)>>2)]=$R7_1;\n       }\n       $322=($R7_1|0)==0;\n       if ($322) {\n        break L100;\n       }\n      }\n     } while(0);\n     $324=$R7_1;\n     $325=((HEAP32[((992)>>2)])|0);\n     $326=($324>>>0)<($325>>>0);\n     if ($326) {\n      _abort();\n\n     }\n     $328=(($R7_1+24)|0);\n     HEAP32[(($328)>>2)]=$253;\n     $_sum16=((($psize)+(16))|0);\n     $329=(($1+$_sum16)|0);\n     $330=$329;\n     $331=((HEAP32[(($330)>>2)])|0);\n     $332=($331|0)==0;\n     do {\n      if (!($332)) {\n       $334=$331;\n       $335=((HEAP32[((992)>>2)])|0);\n       $336=($334>>>0)<($335>>>0);\n       if ($336) {\n        _abort();\n\n       } else {\n        $338=(($R7_1+16)|0);\n        HEAP32[(($338)>>2)]=$331;\n        $339=(($331+24)|0);\n        HEAP32[(($339)>>2)]=$R7_1;\n        break;\n       }\n      }\n     } while(0);\n     $_sum17=((($psize)+(20))|0);\n     $342=(($1+$_sum17)|0);\n     $343=$342;\n     $344=((HEAP32[(($343)>>2)])|0);\n     $345=($344|0)==0;\n     if ($345) {\n      break;\n     }\n     $347=$344;\n     $348=((HEAP32[((992)>>2)])|0);\n     $349=($347>>>0)<($348>>>0);\n     if ($349) {\n      _abort();\n\n     } else {\n      $351=(($R7_1+20)|0);\n      HEAP32[(($351)>>2)]=$344;\n      $352=(($344+24)|0);\n      HEAP32[(($352)>>2)]=$R7_1;\n      break;\n     }\n    }\n   } while(0);\n   $355=$212|1;\n   $356=(($_0+4)|0);\n   HEAP32[(($356)>>2)]=$355;\n   $357=$_0;\n   $358=(($357+$212)|0);\n   $359=$358;\n   HEAP32[(($359)>>2)]=$212;\n   $360=((HEAP32[((996)>>2)])|0);\n   $361=($_0|0)==($360|0);\n   if (!($361)) {\n    $_1=$212;\n    break;\n   }\n   HEAP32[((984)>>2)]=$212;\n   return;\n  } else {\n   $364=$185&-2;\n   HEAP32[(($184)>>2)]=$364;\n   $365=$_0277|1;\n   $366=(($_0+4)|0);\n   HEAP32[(($366)>>2)]=$365;\n   $367=$_0;\n   $368=(($367+$_0277)|0);\n   $369=$368;\n   HEAP32[(($369)>>2)]=$_0277;\n   $_1=$_0277;\n  }\n } while(0);\n\n $371=$_1>>>3;\n $372=($_1>>>0)<((256)>>>0);\n if ($372) {\n  $374=$371<<1;\n  $375=((1016+($374<<2))|0);\n  $376=$375;\n  $377=((HEAP32[((976)>>2)])|0);\n  $378=1<<$371;\n  $379=$377&$378;\n  $380=($379|0)==0;\n  do {\n   if ($380) {\n    $382=$377|$378;\n    HEAP32[((976)>>2)]=$382;\n    $_sum13_pre=((($374)+(2))|0);\n    $_pre=((1016+($_sum13_pre<<2))|0);\n    $F16_0=$376;$_pre_phi=$_pre;\n   } else {\n    $_sum14=((($374)+(2))|0);\n    $384=((1016+($_sum14<<2))|0);\n    $385=((HEAP32[(($384)>>2)])|0);\n    $386=$385;\n    $387=((HEAP32[((992)>>2)])|0);\n    $388=($386>>>0)<($387>>>0);\n    if (!($388)) {\n     $F16_0=$385;$_pre_phi=$384;\n     break;\n    }\n    _abort();\n\n   }\n  } while(0);\n\n\n  HEAP32[(($_pre_phi)>>2)]=$_0;\n  $391=(($F16_0+12)|0);\n  HEAP32[(($391)>>2)]=$_0;\n  $392=(($_0+8)|0);\n  HEAP32[(($392)>>2)]=$F16_0;\n  $393=(($_0+12)|0);\n  HEAP32[(($393)>>2)]=$376;\n  return;\n }\n $395=$_0;\n $396=$_1>>>8;\n $397=($396|0)==0;\n do {\n  if ($397) {\n   $I19_0=0;\n  } else {\n   $399=($_1>>>0)>((16777215)>>>0);\n   if ($399) {\n    $I19_0=31;\n    break;\n   }\n   $401=((($396)+(1048320))|0);\n   $402=$401>>>16;\n   $403=$402&8;\n   $404=$396<<$403;\n   $405=((($404)+(520192))|0);\n   $406=$405>>>16;\n   $407=$406&4;\n   $408=$407|$403;\n   $409=$404<<$407;\n   $410=((($409)+(245760))|0);\n   $411=$410>>>16;\n   $412=$411&2;\n   $413=$408|$412;\n   $414=(((14)-($413))|0);\n   $415=$409<<$412;\n   $416=$415>>>15;\n   $417=((($414)+($416))|0);\n   $418=$417<<1;\n   $419=((($417)+(7))|0);\n   $420=$_1>>>($419>>>0);\n   $421=$420&1;\n   $422=$421|$418;\n   $I19_0=$422;\n  }\n } while(0);\n\n $424=((1280+($I19_0<<2))|0);\n $425=(($_0+28)|0);\n $I19_0_c=$I19_0;\n HEAP32[(($425)>>2)]=$I19_0_c;\n $426=(($_0+20)|0);\n HEAP32[(($426)>>2)]=0;\n $427=(($_0+16)|0);\n HEAP32[(($427)>>2)]=0;\n $428=((HEAP32[((980)>>2)])|0);\n $429=1<<$I19_0;\n $430=$428&$429;\n $431=($430|0)==0;\n if ($431) {\n  $433=$428|$429;\n  HEAP32[((980)>>2)]=$433;\n  HEAP32[(($424)>>2)]=$395;\n  $434=(($_0+24)|0);\n  $_c=$424;\n  HEAP32[(($434)>>2)]=$_c;\n  $435=(($_0+12)|0);\n  HEAP32[(($435)>>2)]=$_0;\n  $436=(($_0+8)|0);\n  HEAP32[(($436)>>2)]=$_0;\n  return;\n }\n $438=((HEAP32[(($424)>>2)])|0);\n $439=($I19_0|0)==31;\n if ($439) {\n  $444=0;\n } else {\n  $441=$I19_0>>>1;\n  $442=(((25)-($441))|0);\n  $444=$442;\n }\n\n $445=$_1<<$444;\n $K20_0=$445;$T_0=$438;\n while(1) {\n\n\n  $447=(($T_0+4)|0);\n  $448=((HEAP32[(($447)>>2)])|0);\n  $449=$448&-8;\n  $450=($449|0)==($_1|0);\n  if ($450) {\n   break;\n  }\n  $452=$K20_0>>>31;\n  $453=(($T_0+16+($452<<2))|0);\n  $454=((HEAP32[(($453)>>2)])|0);\n  $455=($454|0)==0;\n  $456=$K20_0<<1;\n  if ($455) {\n   label = 126;\n   break;\n  } else {\n   $K20_0=$456;$T_0=$454;\n  }\n }\n if ((label|0) == 126) {\n  $458=$453;\n  $459=((HEAP32[((992)>>2)])|0);\n  $460=($458>>>0)<($459>>>0);\n  if ($460) {\n   _abort();\n\n  }\n  HEAP32[(($453)>>2)]=$395;\n  $462=(($_0+24)|0);\n  $T_0_c10=$T_0;\n  HEAP32[(($462)>>2)]=$T_0_c10;\n  $463=(($_0+12)|0);\n  HEAP32[(($463)>>2)]=$_0;\n  $464=(($_0+8)|0);\n  HEAP32[(($464)>>2)]=$_0;\n  return;\n }\n $467=(($T_0+8)|0);\n $468=((HEAP32[(($467)>>2)])|0);\n $469=$T_0;\n $470=((HEAP32[((992)>>2)])|0);\n $471=($469>>>0)<($470>>>0);\n if ($471) {\n  _abort();\n\n }\n $473=$468;\n $474=($473>>>0)<($470>>>0);\n if ($474) {\n  _abort();\n\n }\n $476=(($468+12)|0);\n HEAP32[(($476)>>2)]=$395;\n HEAP32[(($467)>>2)]=$395;\n $477=(($_0+8)|0);\n $_c9=$468;\n HEAP32[(($477)>>2)]=$_c9;\n $478=(($_0+12)|0);\n $T_0_c=$T_0;\n HEAP32[(($478)>>2)]=$T_0_c;\n $479=(($_0+24)|0);\n HEAP32[(($479)>>2)]=0;\n return;\n}\n\n\nfunction _strlen(ptr) {\n    ptr = ptr|0;\n    var curr = 0;\n    curr = ptr;\n    while (((HEAP8[(curr)])|0)) {\n      curr = (curr + 1)|0;\n    }\n    return (curr - ptr)|0;\n}\nfunction _memset(ptr, value, num) {\n    ptr = ptr|0; value = value|0; num = num|0;\n    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;\n    stop = (ptr + num)|0;\n    if ((num|0) >= 20) {\n      // This is unaligned, but quite large, so work hard to get to aligned settings\n      value = value & 0xff;\n      unaligned = ptr & 3;\n      value4 = value | (value << 8) | (value << 16) | (value << 24);\n      stop4 = stop & ~3;\n      if (unaligned) {\n        unaligned = (ptr + 4 - unaligned)|0;\n        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num\n          HEAP8[(ptr)]=value;\n          ptr = (ptr+1)|0;\n        }\n      }\n      while ((ptr|0) < (stop4|0)) {\n        HEAP32[((ptr)>>2)]=value4;\n        ptr = (ptr+4)|0;\n      }\n    }\n    while ((ptr|0) < (stop|0)) {\n      HEAP8[(ptr)]=value;\n      ptr = (ptr+1)|0;\n    }\n    return (ptr-num)|0;\n}\nfunction _memcpy(dest, src, num) {\n    dest = dest|0; src = src|0; num = num|0;\n    var ret = 0;\n    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;\n    ret = dest|0;\n    if ((dest&3) == (src&3)) {\n      while (dest & 3) {\n        if ((num|0) == 0) return ret|0;\n        HEAP8[(dest)]=((HEAP8[(src)])|0);\n        dest = (dest+1)|0;\n        src = (src+1)|0;\n        num = (num-1)|0;\n      }\n      while ((num|0) >= 4) {\n        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);\n        dest = (dest+4)|0;\n        src = (src+4)|0;\n        num = (num-4)|0;\n      }\n    }\n    while ((num|0) > 0) {\n      HEAP8[(dest)]=((HEAP8[(src)])|0);\n      dest = (dest+1)|0;\n      src = (src+1)|0;\n      num = (num-1)|0;\n    }\n    return ret|0;\n}\n\n\n// EMSCRIPTEN_END_FUNCS\n\n  \n  function dynCall_ii(index,a1) {\n    index = index|0;\n    a1=a1|0;\n    return FUNCTION_TABLE_ii[index&1](a1|0)|0;\n  }\n\n\n  function dynCall_vi(index,a1) {\n    index = index|0;\n    a1=a1|0;\n    FUNCTION_TABLE_vi[index&1](a1|0);\n  }\n\n\n  function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {\n    index = index|0;\n    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;\n    return FUNCTION_TABLE_iiiiii[index&3](a1|0,a2|0,a3|0,a4|0,a5|0)|0;\n  }\n\n\n  function dynCall_viii(index,a1,a2,a3) {\n    index = index|0;\n    a1=a1|0; a2=a2|0; a3=a3|0;\n    FUNCTION_TABLE_viii[index&1](a1|0,a2|0,a3|0);\n  }\n\n\n  function dynCall_v(index) {\n    index = index|0;\n    \n    FUNCTION_TABLE_v[index&1]();\n  }\n\n\n  function dynCall_iii(index,a1,a2) {\n    index = index|0;\n    a1=a1|0; a2=a2|0;\n    return FUNCTION_TABLE_iii[index&1](a1|0,a2|0)|0;\n  }\n\nfunction b0(p0) { p0 = p0|0; abort(0); return 0 }\n  function b1(p0) { p0 = p0|0; abort(1);  }\n  function b2(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; abort(2); return 0 }\n  function b3(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; abort(3);  }\n  function b4() { ; abort(4);  }\n  function b5(p0,p1) { p0 = p0|0;p1 = p1|0; abort(5); return 0 }\n  // EMSCRIPTEN_END_FUNCS\n  var FUNCTION_TABLE_ii = [b0,b0];\n  \n  var FUNCTION_TABLE_vi = [b1,b1];\n  \n  var FUNCTION_TABLE_iiiiii = [b2,b2,__ZN4crndL20crnd_default_reallocEPvjPjbS0_,b2];\n  \n  var FUNCTION_TABLE_viii = [b3,b3];\n  \n  var FUNCTION_TABLE_v = [b4,b4];\n  \n  var FUNCTION_TABLE_iii = [b5,b5];\n  \n\n  return { _strlen: _strlen, _crn_get_levels: _crn_get_levels, _crn_unpack_begin: _crn_unpack_begin, _realloc: _realloc, _crn_get_width: _crn_get_width, _crn_unpack_end: _crn_unpack_end, _memset: _memset, _crn_get_faces: _crn_get_faces, _malloc: _malloc, _crn_unpack_level: _crn_unpack_level, _memcpy: _memcpy, _free: _free, _crn_get_format: _crn_get_format, _crn_get_height: _crn_get_height, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, setTempRet1: setTempRet1, setTempRet2: setTempRet2, setTempRet3: setTempRet3, setTempRet4: setTempRet4, setTempRet5: setTempRet5, setTempRet6: setTempRet6, setTempRet7: setTempRet7, setTempRet8: setTempRet8, setTempRet9: setTempRet9, dynCall_ii: dynCall_ii, dynCall_vi: dynCall_vi, dynCall_iiiiii: dynCall_iiiiii, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_iii: dynCall_iii };\n})\n// EMSCRIPTEN_END_ASM\n({ \"Math\": Math, \"Int8Array\": Int8Array, \"Int16Array\": Int16Array, \"Int32Array\": Int32Array, \"Uint8Array\": Uint8Array, \"Uint16Array\": Uint16Array, \"Uint32Array\": Uint32Array, \"Float32Array\": Float32Array, \"Float64Array\": Float64Array }, { \"abort\": abort, \"assert\": assert, \"asmPrintInt\": asmPrintInt, \"asmPrintFloat\": asmPrintFloat, \"min\": Math_min, \"invoke_ii\": invoke_ii, \"invoke_vi\": invoke_vi, \"invoke_iiiiii\": invoke_iiiiii, \"invoke_viii\": invoke_viii, \"invoke_v\": invoke_v, \"invoke_iii\": invoke_iii, \"_snprintf\": _snprintf, \"_abort\": _abort, \"_fflush\": _fflush, \"__reallyNegative\": __reallyNegative, \"_fputc\": _fputc, \"_sysconf\": _sysconf, \"_puts\": _puts, \"___setErrNo\": ___setErrNo, \"_send\": _send, \"_write\": _write, \"_fputs\": _fputs, \"_exit\": _exit, \"_sprintf\": _sprintf, \"___cxa_find_matching_catch\": ___cxa_find_matching_catch, \"__ZSt18uncaught_exceptionv\": __ZSt18uncaught_exceptionv, \"___cxa_is_number_type\": ___cxa_is_number_type, \"_time\": _time, \"__formatString\": __formatString, \"___cxa_does_inherit\": ___cxa_does_inherit, \"__ZSt9terminatev\": __ZSt9terminatev, \"_emscripten_memcpy_big\": _emscripten_memcpy_big, \"_fileno\": _fileno, \"_pwrite\": _pwrite, \"_sbrk\": _sbrk, \"___errno_location\": ___errno_location, \"___gxx_personality_v0\": ___gxx_personality_v0, \"_mkport\": _mkport, \"___resumeException\": ___resumeException, \"__exit\": __exit, \"STACKTOP\": STACKTOP, \"STACK_MAX\": STACK_MAX, \"tempDoublePtr\": tempDoublePtr, \"ABORT\": ABORT, \"NaN\": NaN, \"Infinity\": Infinity }, buffer);\nvar _strlen = Module[\"_strlen\"] = asm[\"_strlen\"];\nvar _crn_get_levels = Module[\"_crn_get_levels\"] = asm[\"_crn_get_levels\"];\nvar _crn_unpack_begin = Module[\"_crn_unpack_begin\"] = asm[\"_crn_unpack_begin\"];\nvar _realloc = Module[\"_realloc\"] = asm[\"_realloc\"];\nvar _crn_get_width = Module[\"_crn_get_width\"] = asm[\"_crn_get_width\"];\nvar _crn_unpack_end = Module[\"_crn_unpack_end\"] = asm[\"_crn_unpack_end\"];\nvar _memset = Module[\"_memset\"] = asm[\"_memset\"];\nvar _crn_get_faces = Module[\"_crn_get_faces\"] = asm[\"_crn_get_faces\"];\nvar _malloc = Module[\"_malloc\"] = asm[\"_malloc\"];\nvar _crn_unpack_level = Module[\"_crn_unpack_level\"] = asm[\"_crn_unpack_level\"];\nvar _memcpy = Module[\"_memcpy\"] = asm[\"_memcpy\"];\nvar _free = Module[\"_free\"] = asm[\"_free\"];\nvar _crn_get_format = Module[\"_crn_get_format\"] = asm[\"_crn_get_format\"];\nvar _crn_get_height = Module[\"_crn_get_height\"] = asm[\"_crn_get_height\"];\nvar runPostSets = Module[\"runPostSets\"] = asm[\"runPostSets\"];\nvar dynCall_ii = Module[\"dynCall_ii\"] = asm[\"dynCall_ii\"];\nvar dynCall_vi = Module[\"dynCall_vi\"] = asm[\"dynCall_vi\"];\nvar dynCall_iiiiii = Module[\"dynCall_iiiiii\"] = asm[\"dynCall_iiiiii\"];\nvar dynCall_viii = Module[\"dynCall_viii\"] = asm[\"dynCall_viii\"];\nvar dynCall_v = Module[\"dynCall_v\"] = asm[\"dynCall_v\"];\nvar dynCall_iii = Module[\"dynCall_iii\"] = asm[\"dynCall_iii\"];\n\nRuntime.stackAlloc = function(size) { return asm['stackAlloc'](size) };\nRuntime.stackSave = function() { return asm['stackSave']() };\nRuntime.stackRestore = function(top) { asm['stackRestore'](top) };\n\n// Warning: printing of i64 values may be slightly rounded! No deep i64 math used, so precise i64 code not included\nvar i64Math = null;\n\n// === Auto-generated postamble setup entry stuff ===\n\nif (memoryInitializer) {\n  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {\n    var data = Module['readBinary'](memoryInitializer);\n    HEAPU8.set(data, STATIC_BASE);\n  } else {\n    addRunDependency('memory initializer');\n    Browser.asyncLoad(memoryInitializer, function(data) {\n      HEAPU8.set(data, STATIC_BASE);\n      removeRunDependency('memory initializer');\n    }, function(data) {\n      throw 'could not load memory initializer ' + memoryInitializer;\n    });\n  }\n}\n\nfunction ExitStatus(status) {\n  this.name = \"ExitStatus\";\n  this.message = \"Program terminated with exit(\" + status + \")\";\n  this.status = status;\n};\nExitStatus.prototype = new Error();\nExitStatus.prototype.constructor = ExitStatus;\n\nvar initialStackTop;\nvar preloadStartTime = null;\nvar calledMain = false;\n\ndependenciesFulfilled = function runCaller() {\n  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)\n  if (!Module['calledRun'] && shouldRunNow) run();\n  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled\n}\n\nModule['callMain'] = Module.callMain = function callMain(args) {\n  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');\n  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');\n\n  args = args || [];\n\n  if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {\n    Module.printErr('preload time: ' + (Date.now() - preloadStartTime) + ' ms');\n  }\n\n  ensureInitRuntime();\n\n  var argc = args.length+1;\n  function pad() {\n    for (var i = 0; i < 4-1; i++) {\n      argv.push(0);\n    }\n  }\n  var argv = [allocate(intArrayFromString(\"/bin/this.program\"), 'i8', ALLOC_NORMAL) ];\n  pad();\n  for (var i = 0; i < argc-1; i = i + 1) {\n    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));\n    pad();\n  }\n  argv.push(0);\n  argv = allocate(argv, 'i32', ALLOC_NORMAL);\n\n  initialStackTop = STACKTOP;\n\n  try {\n\n    var ret = Module['_main'](argc, argv, 0);\n\n\n    // if we're not running an evented main loop, it's time to exit\n    if (!Module['noExitRuntime']) {\n      exit(ret);\n    }\n  }\n  catch(e) {\n    if (e instanceof ExitStatus) {\n      // exit() throws this once it's done to make sure execution\n      // has been stopped completely\n      return;\n    } else if (e == 'SimulateInfiniteLoop') {\n      // running an evented main loop, don't immediately exit\n      Module['noExitRuntime'] = true;\n      return;\n    } else {\n      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);\n      throw e;\n    }\n  } finally {\n    calledMain = true;\n  }\n}\n\n\n\n\nfunction run(args) {\n  args = args || Module['arguments'];\n\n  if (preloadStartTime === null) preloadStartTime = Date.now();\n\n  if (runDependencies > 0) {\n    Module.printErr('run() called, but dependencies remain, so not running');\n    return;\n  }\n\n  preRun();\n\n  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later\n  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame\n\n  function doRun() {\n    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening\n    Module['calledRun'] = true;\n\n    ensureInitRuntime();\n\n    preMain();\n\n    if (Module['_main'] && shouldRunNow) {\n      Module['callMain'](args);\n    }\n\n    postRun();\n  }\n\n  if (Module['setStatus']) {\n    Module['setStatus']('Running...');\n    setTimeout(function() {\n      setTimeout(function() {\n        Module['setStatus']('');\n      }, 1);\n      if (!ABORT) doRun();\n    }, 1);\n  } else {\n    doRun();\n  }\n}\nModule['run'] = Module.run = run;\n\nfunction exit(status) {\n  ABORT = true;\n  EXITSTATUS = status;\n  STACKTOP = initialStackTop;\n\n  // exit the runtime\n  exitRuntime();\n\n  // TODO We should handle this differently based on environment.\n  // In the browser, the best we can do is throw an exception\n  // to halt execution, but in node we could process.exit and\n  // I'd imagine SM shell would have something equivalent.\n  // This would let us set a proper exit status (which\n  // would be great for checking test exit statuses).\n  // https://github.com/kripken/emscripten/issues/1371\n\n  // throw an exception to halt the current execution\n  throw new ExitStatus(status);\n}\nModule['exit'] = Module.exit = exit;\n\nfunction abort(text) {\n  if (text) {\n    Module.print(text);\n    Module.printErr(text);\n  }\n\n  ABORT = true;\n  EXITSTATUS = 1;\n\n  var extra = '\\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.';\n\n  throw 'abort() at ' + stackTrace() + extra;\n}\nModule['abort'] = Module.abort = abort;\n\n// {{PRE_RUN_ADDITIONS}}\n\nif (Module['preInit']) {\n  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];\n  while (Module['preInit'].length > 0) {\n    Module['preInit'].pop()();\n  }\n}\n\n// shouldRunNow refers to calling main(), not run().\nvar shouldRunNow = true;\nif (Module['noInitialRun']) {\n  shouldRunNow = false;\n}\n\n\nrun();\n\n// {{POST_RUN_ADDITIONS}}\n\n\n\n\n\n\n// {{MODULE_ADDITIONS}}\n\n\n\n\nreturn this;\n}).call({TOTAL_MEMORY: (typeof CRUNCH_MEM==='number'?CRUNCH_MEM:16)<<20});\n"

/***/ },
/* 35 */
/***/ function(module, exports) {

	module.exports = "var CRUNCH_MEM, MAX_ACTIVE_TASKS, Queue, console, dxtToRgb565, load_crunch, load_crunch_extra, onmessage, post_message, queues, remove_from_array, worker;\n\nCRUNCH_MEM = 64;\n\nMAX_ACTIVE_TASKS = 6;\n\nworker = this;\n\nremove_from_array = function(array, i) {\n  i = array.indexOf(i);\n  if (i !== -1) {\n    return array.splice(i, 1);\n  }\n};\n\nload_crunch = function(task_id, queue_id, data, extra_data, uri) {\n  var additional_levels, block_bytes, buffer, common_data, common_data_size, context, data_length, data_offset, data_view, faces, format, height, i, j, level_buffers, levels, ref, src, src_size, transfer, width;\n  data = new Uint8Array(data);\n  data_view = new DataView(data.buffer);\n  src_size = data.length;\n  src = Crunch._malloc(src_size);\n  Crunch.HEAPU8.set(data, src);\n  width = data_view.getUint16(12);\n  height = data_view.getUint16(14);\n  levels = data[16];\n  faces = data[17];\n  format = data[18];\n  additional_levels = data[25];\n  level_buffers = [];\n  if (format === 0) {\n    block_bytes = 8;\n  } else {\n    block_bytes = 16;\n  }\n  context = Crunch._crn_unpack_begin(src, src_size);\n  for (i = j = 0, ref = levels; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n    data_length = (Math.max(4, width >> i) >> 2) * (Math.max(4, height >> i) >> 2) * block_bytes;\n    data_offset = Crunch._crn_unpack_level(context, src, src_size, i);\n    buffer = Crunch.HEAPU8.buffer.slice(data_offset, data_offset + data_length);\n    if (!COMPRESSED_TEXTURE_SUPPORT) {\n      buffer = dxtToRgb565(new Uint16Array(buffer), 0, width >> i, height >> i).buffer;\n    }\n    level_buffers.push(buffer);\n    Crunch._free(data_offset);\n  }\n  common_data = null;\n  transfer = level_buffers;\n  if (additional_levels) {\n    common_data_size = data_view.getUint32(70);\n    common_data = data.buffer.slice(0, common_data_size);\n    transfer = level_buffers.concat([data.buffer]);\n  }\n  post_message([task_id, queue_id, [additional_levels, width, height, format, level_buffers, common_data, uri]], transfer);\n  Crunch._crn_unpack_end(context);\n  return Crunch._free(src);\n};\n\nload_crunch_extra = function(task_id, queue_id, data, original_common_data, uri) {\n  var block_bytes, buffer, context, data_length, data_offset, data_view, faces, format, height, level_buffers, src, src_size, width;\n  global(max_size);\n  data = new Uint8Array(data);\n  original_common_data = new Uint8Array(original_common_data);\n  data_view = new DataView(data.buffer);\n  src_size = original_common_data.length + data.length - 16;\n  src = Crunch._malloc(src_size);\n  Crunch.HEAPU8.set(original_common_data, src);\n  Crunch.HEAPU8.set(data.subarray(0, 16), src);\n  Crunch.HEAPU8.set(data.subarray(6, 10), src + 74);\n  Crunch.HEAPU8.set(data.subarray(16), src + original_common_data.length);\n  width = data_view.getUint16(12);\n  height = data_view.getUint16(14);\n  faces = original_common_data[17];\n  format = original_common_data[18];\n  level_buffers = [];\n  if (format === 0) {\n    block_bytes = 8;\n  } else {\n    block_bytes = 16;\n  }\n  context = Crunch._crn_unpack_begin(src, src_size);\n  data_length = (Math.max(4, width) >> 2) * (Math.max(4, height) >> 2) * block_bytes;\n  data_offset = Crunch._crn_unpack_level(context, src, src_size, 0);\n  buffer = Crunch.HEAPU8.buffer.slice(data_offset, data_offset + data_length);\n  Crunch._free(data_offset);\n  post_message([task_id, queue_id, [width, height, format, buffer, uri]], [buffer]);\n  Crunch._crn_unpack_end(context);\n  return Crunch._free(src);\n};\n\nif (typeof window !== 'undefined') {\n  window.load_crunch = load_crunch;\n  window.load_crunch_extra = load_crunch_extra;\n}\n\ndxtToRgb565 = function(src, src16Offset, width, height) {\n  var b0, b1, blockHeight, blockWidth, blockX, blockY, c, dst, dstI, g0, g1, i, j, k, m, nWords, r0, r1, ref, ref1;\n  c = new Uint16Array(4);\n  dst = new Uint16Array(width * height);\n  nWords = (width * height) / 4;\n  m = dstI = i = r0 = g0 = b0 = r1 = g1 = b1 = 0;\n  blockWidth = width / 4;\n  blockHeight = height / 4;\n  for (blockY = j = 0, ref = blockHeight; 0 <= ref ? j < ref : j > ref; blockY = 0 <= ref ? ++j : --j) {\n    for (blockX = k = 0, ref1 = blockWidth; 0 <= ref1 ? k < ref1 : k > ref1; blockX = 0 <= ref1 ? ++k : --k) {\n      i = src16Offset + 4 * (blockY * blockWidth + blockX);\n      c[0] = src[i];\n      c[1] = src[i + 1];\n      r0 = c[0] & 0x1f;\n      g0 = c[0] & 0x7e0;\n      b0 = c[0] & 0xf800;\n      r1 = c[1] & 0x1f;\n      g1 = c[1] & 0x7e0;\n      b1 = c[1] & 0xf800;\n      c[2] = ((5 * r0 + 3 * r1) >> 3) | (((5 * g0 + 3 * g1) >> 3) & 0x7e0) | (((5 * b0 + 3 * b1) >> 3) & 0xf800);\n      c[3] = ((5 * r1 + 3 * r0) >> 3) | (((5 * g1 + 3 * g0) >> 3) & 0x7e0) | (((5 * b1 + 3 * b0) >> 3) & 0xf800);\n      m = src[i + 2];\n      dstI = (blockY * 4) * width + blockX * 4;\n      dst[dstI] = c[m & 0x3];\n      dst[dstI + 1] = c[(m >> 2) & 0x3];\n      dst[dstI + 2] = c[(m >> 4) & 0x3];\n      dst[dstI + 3] = c[(m >> 6) & 0x3];\n      dstI += width;\n      dst[dstI] = c[(m >> 8) & 0x3];\n      dst[dstI + 1] = c[(m >> 10) & 0x3];\n      dst[dstI + 2] = c[(m >> 12) & 0x3];\n      dst[dstI + 3] = c[m >> 14];\n      m = src[i + 3];\n      dstI += width;\n      dst[dstI] = c[m & 0x3];\n      dst[dstI + 1] = c[(m >> 2) & 0x3];\n      dst[dstI + 2] = c[(m >> 4) & 0x3];\n      dst[dstI + 3] = c[(m >> 6) & 0x3];\n      dstI += width;\n      dst[dstI] = c[(m >> 8) & 0x3];\n      dst[dstI + 1] = c[(m >> 10) & 0x3];\n      dst[dstI + 2] = c[(m >> 12) & 0x3];\n      dst[dstI + 3] = c[m >> 14];\n    }\n  }\n  return dst;\n};\n\npost_message = this.postMessage.bind(this);\n\nconsole = {\n  log: function(msg) {\n    return post_message(['log', msg]);\n  }\n};\n\nQueue = (function() {\n  function Queue(id) {\n    this.tasks = [];\n    this.loaded = 0;\n    this.active_tasks = 0;\n    this.id = id;\n  }\n\n  Queue.prototype.add_progress = function(progress) {\n    this.loaded += progress;\n    return post_message(['progress', this.id, this.loaded]);\n  };\n\n  Queue.prototype.clear = function() {\n    var j, len, ref, xhr;\n    this.loaded = 0;\n    this.active_tasks = 0;\n    ref = this.tasks;\n    for (j = 0, len = ref.length; j < len; j++) {\n      xhr = ref[j];\n      xhr.abort();\n    }\n  };\n\n  Queue.prototype.init_tasks = function() {\n    var results;\n    results = [];\n    while (this.active_tasks < Math.min(MAX_ACTIVE_TASKS, this.tasks.length)) {\n      this.tasks[this.active_tasks].send();\n      results.push(this.active_tasks += 1);\n    }\n    return results;\n  };\n\n  Queue.prototype.finish_task = function(xhr) {\n    remove_from_array(this.tasks, xhr);\n    this.active_tasks -= 1;\n    this.init_tasks();\n    if (this.active_tasks === 0) {\n      return post_message(['done', this.id]);\n    }\n  };\n\n  Queue.prototype.add_task = function(task_id, uri, decode_function, extra_data, tries, retry_time) {\n    var do_json, loaded, queue, retry, total, xhr;\n    if (tries == null) {\n      tries = 6;\n    }\n    if (retry_time == null) {\n      retry_time = 1;\n    }\n    xhr = new XMLHttpRequest;\n    xhr.open('GET', uri, true);\n    do_json = false;\n    if (decode_function === 'text') {\n      xhr.responseType = 'text';\n      decode_function = null;\n    } else if (decode_function === 'json') {\n      xhr.responseType = 'text';\n      decode_function = null;\n      do_json = true;\n    } else {\n      xhr.responseType = 'arraybuffer';\n    }\n    this.tasks.push(xhr);\n    total = 0;\n    loaded = 0;\n    queue = this;\n    retry = function() {\n      return queue.add_task(task_id, uri, decode_function, extra_data, tries - 1, retry_time * 2);\n    };\n    xhr.onload = function(evt) {\n      var data;\n      if (xhr.status === 200 || xhr.status === 0) {\n        data = xhr.response;\n        if (do_json) {\n          data = JSON.parse(data);\n        }\n        if (decode_function) {\n          worker[decode_function](task_id, queue.id, data, extra_data, uri);\n        } else {\n          if (data.byteLength != null) {\n            total = data.byteLength;\n            post_message([task_id, queue.id, [xhr.response], [xhr.response]]);\n          } else {\n            post_message([task_id, queue.id, [xhr.response]]);\n            total = data.length || total;\n          }\n        }\n      } else {\n        if (tries) {\n          post_message([task_id, queue.id, 'error', xhr.status, xhr.response, 'retrying ' + uri.split('/').pop() + ' in ' + retry_time + ' seconds']);\n          setTimeout(retry, retry_time * 1000);\n          return;\n        } else {\n          post_message([task_id, queue.id, 'error', xhr.status, xhr.response, 1]);\n        }\n      }\n      queue.add_progress(total - loaded);\n      return queue.finish_task(xhr);\n    };\n    xhr.onerror = function(evt) {\n      if (tries) {\n        post_message([task_id, queue.id, 'error', xhr.status, xhr.response, 'retrying ' + uri.split('/').pop() + ' in ' + retry_time + ' seconds']);\n        return setTimeout(retry, retry_time * 1000);\n      } else {\n        post_message([task_id, queue.id, 'error', xhr.status, xhr.response, 2]);\n        queue.add_progress(total - loaded);\n        return queue.finish_task(xhr);\n      }\n    };\n    xhr.onprogress = function(evt) {\n      if (evt.lengthComputable) {\n        queue.add_progress(evt.loaded - loaded);\n        total = evt.total;\n        return loaded = evt.loaded;\n      }\n    };\n    return this.init_tasks();\n  };\n\n  return Queue;\n\n})();\n\nqueues = [];\n\nonmessage = function(e) {\n  var d, q;\n  d = e.data;\n  if (d[0] === 'clear') {\n    return queues[d[1]].clear();\n  } else if (d[0] === 'get') {\n    q = queues[d[1]];\n    if (!q) {\n      q = queues[d[1]] = new Queue(d[1]);\n    }\n    return q.add_task(d[2], d[3], d[4], d[5]);\n  } else {\n    return console.log('error ' + d[0]);\n  }\n};\n"

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	var Events, vec2;
	
	vec2 = __webpack_require__(8).vec2;
	
	Events = (function() {
	  function Events(root_element) {
	    var contextmenu, keydown, keyup, locked_mousemove, mouse, mousedown, mousemove, mousemove_pressed, mouseup, pointerlockchange, touch_end, touch_move, touch_start, wheel;
	    this.keys_pressed = new Uint8Array(256);
	    this.keys_just_pressed = new Uint8Array(256);
	    this.keys_just_released = new Uint8Array(256);
	    this.keys_pressed_count = 0;
	    this.NO_MOVE_TICKS = 3;
	    this._empty_key_array = new Uint8Array(256);
	    this.tmpv = vec2.create();
	    this.mouse = {
	      x: 0,
	      y: 0,
	      rel_x: 0,
	      rel_y: 0,
	      page_x: 0,
	      page_y: 0,
	      movement_since_mousedown: 0,
	      move_events_since_mousedown: 0,
	      left: false,
	      middle: false,
	      right: false,
	      any_button: false,
	      wheel: 0,
	      cancel_wheel: false,
	      target: null,
	      down_target: null,
	      lock_element: false
	    };
	    this.touch = {
	      touch_events: [],
	      touches: 0
	    };
	    keydown = (function(_this) {
	      return function(event) {
	        var ae, code, jp;
	        ae = document.activeElement;
	        code = event.keyCode;
	        if ((ae.value != null) || ae.isContentEditable || code === 123) {
	          return;
	        }
	        jp = _this.keys_just_pressed[code] = _this.keys_pressed[code] ^ 1;
	        _this.keys_pressed[code] = 1;
	        _this.keys_pressed_count += jp;
	        if (code === 116) {
	          location.href = location.href;
	          return event.preventDefault();
	        }
	      };
	    })(this);
	    document.body.addEventListener('keydown', keydown, false);
	    keyup = (function(_this) {
	      return function(event) {
	        var ae, code;
	        ae = document.activeElement;
	        code = event.keyCode;
	        if ((ae.value != null) || ae.isContentEditable || code === 123) {
	          return;
	        }
	        _this.keys_pressed[code] = 0;
	        _this.keys_just_released[code] = 1;
	        return _this.keys_pressed_count -= 1;
	      };
	    })(this);
	    document.body.addEventListener('keyup', keyup, false);
	    touch_start = (function(_this) {
	      return function(event) {
	        var i, len, ref, t, touch;
	        event.preventDefault();
	        ref = event.touches;
	        for (i = 0, len = ref.length; i < len; i++) {
	          t = ref[i];
	          touch = {};
	          touch.touching = true;
	          touch.id = t.identifier;
	          touch.client_x = t.clientX;
	          touch.client_y = t.clientY;
	          touch.page_x = t.pageX;
	          touch.page_y = t.pageY;
	          touch.force = t.force;
	          touch.radius_x = t.radiusX;
	          touch.radius_y = t.radiusY;
	          touch.rotation_angle = t.rotationAngle;
	          touch.x = t.clientX - root_element.rect.left;
	          touch.y = t.clientY - root_element.rect.top;
	          touch.rel_x = 0;
	          touch.rel_y = 0;
	          touch.movement_since_touch = 0;
	          touch.touch_target = touch.target = t.target;
	          _this.touch.touch_events[touch.id] = touch;
	        }
	        return _this.touch.touches = event.touches.length;
	      };
	    })(this);
	    root_element.addEventListener('touchstart', touch_start, false);
	    touch_end = (function(_this) {
	      return function(event) {
	        var i, j, len, len1, ref, ref1, t, touch;
	        event.preventDefault();
	        ref = _this.touch.touch_events;
	        for (i = 0, len = ref.length; i < len; i++) {
	          touch = ref[i];
	          touch.touching = 0;
	        }
	        ref1 = event.touches;
	        for (j = 0, len1 = ref1.length; j < len1; j++) {
	          t = ref1[j];
	          touch = _this.touch.touch_events[t.identifier];
	          touch.touching = true;
	          touch.force = 0;
	          touch.radius_x = 0;
	          touch.radius_y = 0;
	          touch.rel_x = 0;
	          touch.rel_y = 0;
	        }
	        return _this.touch.touches = event.touches.length;
	      };
	    })(this);
	    root_element.addEventListener('touchend', touch_end, false);
	    root_element.addEventListener('touchcancel', touch_end, false);
	    touch_move = (function(_this) {
	      return function(event) {
	        var i, len, ref, t, touch, x, y;
	        event.preventDefault();
	        ref = event.touches;
	        for (i = 0, len = ref.length; i < len; i++) {
	          t = ref[i];
	          touch = {};
	          touch.id = t.identifier;
	          touch.touching = true;
	          touch.client_x = t.clientX;
	          touch.client_y = t.clientY;
	          touch.page_x = t.pageX;
	          touch.page_y = t.pageY;
	          touch.force = t.force;
	          touch.radius_x = t.radiusX;
	          touch.radius_y = t.radiusY;
	          touch.rotation_angle = t.rotationAngle;
	          touch.x = t.clientX - root_element.rect.left;
	          touch.y = t.clientY - root_element.rect.top;
	          x = t.clientX;
	          y = t.clientY;
	          if (_this.touch.touch_events[touch.id] != null) {
	            touch.rel_x = x - _this.touch.touch_events[touch.id].client_x;
	            touch.rel_y = y - _this.touch.touch_events[touch.id].client_y;
	          } else {
	            touch.rel_x = 0;
	            touch.rel_y = 0;
	          }
	          touch.movement_since_touch = Math.abs(touch.rel_x) + Math.abs(touch.rel_y);
	          _this.touch.touch_events[touch.id] = touch;
	        }
	        return _this.touch.touches = event.touches.length;
	      };
	    })(this);
	    root_element.addEventListener('touchmove', touch_move, false);
	    mouse = this.mouse;
	    mousedown = function(event) {
	      var p, x, y;
	      event.preventDefault();
	      mouse[['left', 'middle', 'right'][event.button]] = true;
	      mouse.any_button = true;
	      mouse.page_x = event.pageX;
	      mouse.page_y = event.pageY;
	      x = event.layerX;
	      y = event.layerY;
	      p = event.target;
	      while (p !== root_element) {
	        x += p.offsetLeft;
	        y += p.offsetTop;
	        p = p.offsetParent;
	      }
	      mouse.x = x;
	      mouse.y = y;
	      mouse.rel_x = 0;
	      mouse.rel_y = 0;
	      mouse.movement_since_mousedown = 0;
	      mouse.move_events_since_mousedown = 0;
	      return mouse.down_target = mouse.target = event.target;
	    };
	    root_element.addEventListener('mousedown', mousedown, false);
	    contextmenu = function(event) {
	      return event.preventDefault();
	    };
	    root_element.addEventListener('contextmenu', contextmenu, false);
	    mousemove = function(event) {
	      var rel_x, rel_y, x, y;
	      if (mouse.any_button) {
	        return;
	      }
	      event.preventDefault();
	      x = event.pageX;
	      y = event.pageY;
	      rel_x = x - mouse.page_x;
	      rel_y = y - mouse.page_y;
	      mouse.page_x = x;
	      mouse.page_y = y;
	      mouse.rel_x += rel_x;
	      mouse.rel_y += rel_y;
	      mouse.x += rel_x;
	      mouse.y += rel_y;
	      return mouse.target = event.target;
	    };
	    root_element.addEventListener('mousemove', mousemove, false);
	    mousemove_pressed = function(event) {
	      var rel_x, rel_y, x, y;
	      if (!mouse.any_button || mouse.lock_element) {
	        return;
	      }
	      event.preventDefault();
	      x = event.pageX;
	      y = event.pageY;
	      rel_x = x - mouse.page_x;
	      rel_y = y - mouse.page_y;
	      mouse.move_events_since_mousedown += 1;
	      if (mouse.move_events_since_mousedown < this.NO_MOVE_TICKS) {
	        return;
	      }
	      mouse.page_x = x;
	      mouse.page_y = y;
	      mouse.rel_x += rel_x;
	      mouse.rel_y += rel_y;
	      mouse.x += rel_x;
	      mouse.y += rel_y;
	      mouse.target = event.target;
	      return mouse.movement_since_mousedown += Math.abs(rel_x) + Math.abs(rel_y);
	    };
	    window.addEventListener('mousemove', mousemove_pressed, false);
	    mouseup = function(event) {
	      var rel_x, rel_y, x, y;
	      if (!mouse.any_button) {
	        return;
	      }
	      event.preventDefault();
	      mouse[['left', 'middle', 'right'][event.button]] = false;
	      mouse.any_button = mouse.left || mouse.middle || mouse.right;
	      x = event.pageX;
	      y = event.pageY;
	      rel_x = x - mouse.page_x;
	      rel_y = y - mouse.page_y;
	      mouse.page_x = x;
	      mouse.page_y = y;
	      mouse.rel_x += rel_x;
	      mouse.rel_y += rel_y;
	      mouse.x += rel_x;
	      mouse.y += rel_y;
	      return mouse.target = event.target;
	    };
	    window.addEventListener('mouseup', mouseup, false);
	    wheel = function(event) {
	      mouse.wheel += Math.max(-1, Math.min(1, event.deltaY));
	      if (mouse.cancel_wheel) {
	        return event.preventDefault();
	      }
	    };
	    root_element.addEventListener('wheel', wheel, false);
	    locked_mousemove = function(event) {
	      var rel_x, rel_y;
	      rel_x = event.mozMovementX || event.webkitMovementX || event.movementX || 0;
	      rel_y = event.mozMovementY || event.webkitMovementY || event.movementY || 0;
	      mouse.move_events_since_mousedown += 1;
	      if (mouse.move_events_since_mousedown < NO_MOVE_TICKS) {
	        return;
	      }
	      mouse.rel_x += rel_x;
	      mouse.rel_y += rel_y;
	      return mouse.movement_since_mousedown += Math.abs(rel_x) + Math.abs(rel_y);
	    };
	    pointerlockchange = function(event) {
	      var e;
	      if (mouse.lock_element) {
	        mouse.lock_element.removeEventListener('mousemove', locked_mousemove);
	      }
	      e = document.mozPointerLockElement || document.webkitPointerLockElement || document.pointerLockElement;
	      if (e) {
	        mouse.lock_element = e;
	        e.addEventListener('mousemove', locked_mousemove);
	      }
	      return mouse.rel_x = mouse.rel_y = 0;
	    };
	    document.addEventListener('pointerlockchange', pointerlockchange);
	    document.addEventListener('mozpointerlockchange', pointerlockchange);
	    document.addEventListener('webkitpointerlockchange', pointerlockchange);
	  }
	
	  Events.prototype.get_touch_events = function() {
	    var i, len, ref, t, touch_events;
	    touch_events = [];
	    ref = this.touch.touch_events;
	    for (i = 0, len = ref.length; i < len; i++) {
	      t = ref[i];
	      if ((t != null) && t.touching) {
	        touch_events.push(t);
	      }
	    }
	    return touch_events;
	  };
	
	  Events.prototype.reset_frame_events = function() {
	    this.keys_just_pressed.set(this._empty_key_array);
	    this.keys_just_released.set(this._empty_key_array);
	    this.mouse.rel_x = 0;
	    this.mouse.rel_y = 0;
	    return this.mouse.wheel = 0;
	  };
	
	  return Events;
	
	})();
	
	module.exports = {
	  Events: Events
	};


/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	var MAX_FRAME_DURATION, MainLoop, evaluate_all_animations, get_last_char_phy, phy_to_ob, ref, step_world,
	  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };
	
	evaluate_all_animations = __webpack_require__(23).evaluate_all_animations;
	
	ref = __webpack_require__(24), get_last_char_phy = ref.get_last_char_phy, step_world = ref.step_world, step_world = ref.step_world, phy_to_ob = ref.phy_to_ob;
	
	MAX_FRAME_DURATION = 167;
	
	MainLoop = (function() {
	  function MainLoop(context) {
	    this.reset_timeout = bind(this.reset_timeout, this);
	    this.set_timeout = bind(this.set_timeout, this);
	    this.frame_duration = 16;
	    this.last_frame_durations = [16, 16, 16, 16, 16, 16, 16, 16, 16, 16];
	    this._fdi = 0;
	    this.timeout = context.MYOU_PARAMS.timeout;
	    (this.timeout != null) && console.log('WARNING: Timeout set: ' + this.timeout);
	    this.pause_time = 0;
	    this.last_time = 0;
	    this.timeout_timer = this.timeout;
	    this.enabled = false;
	    this.context = context;
	    this._bound_tick = this.tick.bind(this);
	  }
	
	  MainLoop.prototype.run = function() {
	    if (this.enabled) {
	      return;
	    }
	    requestAnimationFrame(this._bound_tick);
	    !this.enabled && (this.timeout != null) && console.log('Main loop running: ' + Math.floor(performance.now()));
	    this.enabled = true;
	    this.pause_time = 0;
	    return this.last_time = performance.now();
	  };
	
	  MainLoop.prototype.stop = function() {
	    cancelAnimationFrame(this._bound_tick);
	    this.pause_time = Infinity;
	    return this.enabled = false;
	  };
	
	  MainLoop.prototype.pause = function(pause_time) {
	    if (pause_time == null) {
	      console.log('WARNING: Undefined pause_time.');
	    }
	    return this.pause_time = pause_time;
	  };
	
	  MainLoop.prototype.tick = function() {
	    var f, frame_duration, i, j, k, l, len, len1, len2, len3, len4, len5, m, n, p, ref1, ref2, ref3, ref4, ref5, ref6, scene, time;
	    requestAnimationFrame(this._bound_tick);
	    time = performance.now();
	    this.frame_duration = frame_duration = Math.min(time - this.last_time, MAX_FRAME_DURATION);
	    this.last_time = time;
	    if (!this.enabled || this.pause_time > 0) {
	      this.pause_time -= frame_duration;
	      return;
	    }
	    if (this.enabled && this.timeout_timer <= 0) {
	      console.log('Main loop paused: ' + Math.floor(time));
	      this.enabled = false;
	      return;
	    }
	    this.timeout_timer -= frame_duration;
	    this.last_frame_durations[this._fdi] = frame_duration;
	    this._fdi = (this._fdi + 1) % this.last_frame_durations.length;
	    ref1 = this.context.loaded_scenes;
	    for (i = 0, len = ref1.length; i < len; i++) {
	      scene = ref1[i];
	      if (!scene.enabled) {
	        continue;
	      }
	      ref2 = scene.pre_draw_callbacks;
	      for (j = 0, len1 = ref2.length; j < len1; j++) {
	        f = ref2[j];
	        f(scene, frame_duration);
	      }
	      ref3 = scene.logic_ticks;
	      for (k = 0, len2 = ref3.length; k < len2; k++) {
	        f = ref3[k];
	        f(frame_duration);
	      }
	      ref4 = scene.active_particle_systems;
	      for (l = 0, len3 = ref4.length; l < len3; l++) {
	        p = ref4[l];
	        p._eval();
	      }
	      if (scene.rigid_bodies.length || scene.kinematic_characters.length) {
	        get_last_char_phy(scene.kinematic_characters);
	        step_world(scene.world, frame_duration * 0.001);
	        phy_to_ob(scene.rigid_bodies);
	      }
	    }
	    evaluate_all_animations(this.context, frame_duration);
	    this.context.render_manager.draw_all();
	    ref5 = this.context.loaded_scenes;
	    for (m = 0, len4 = ref5.length; m < len4; m++) {
	      scene = ref5[m];
	      ref6 = scene.post_draw_callbacks;
	      for (n = 0, len5 = ref6.length; n < len5; n++) {
	        f = ref6[n];
	        f(scene, frame_duration);
	      }
	    }
	    return this.context.events.reset_frame_events();
	  };
	
	  MainLoop.prototype.set_timeout = function(timeout, reset) {
	    if (reset == null) {
	      reset = true;
	    }
	    'WARNING: Timeout set: ' + timeout;
	    this.timeout = timeout;
	    if (reset) {
	      return this.reset_timeout();
	    }
	  };
	
	  MainLoop.prototype.reset_timeout = function() {
	    if (!this.enabled) {
	      console.log('Main loop running: ' + Math.floor(performance.now()));
	    }
	    this.timeout_timer = this.timeout;
	    return this.enabled = true;
	  };
	
	  return MainLoop;
	
	})();
	
	module.exports = {
	  MainLoop: MainLoop
	};


/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	var FLOW, FOLLOW, ParticleSystem, clear_unused_particle_clones, mat2, mat3, mat4, quat, ref, vec2, vec3, vec4,
	  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };
	
	ref = __webpack_require__(8), mat2 = ref.mat2, mat3 = ref.mat3, mat4 = ref.mat4, vec2 = ref.vec2, vec3 = ref.vec3, vec4 = ref.vec4, quat = ref.quat;
	
	FLOW = 0;
	
	FOLLOW = 1;
	
	clear_unused_particle_clones = function(original) {
	  var j, len, ob, ref1;
	  ref1 = original.unused_clones;
	  for (j = 0, len = ref1.length; j < len; j++) {
	    ob = ref1[j];
	    ob.remove();
	  }
	  return original.unused_clones = [];
	};
	
	ParticleSystem = (function() {
	  function ParticleSystem(context, properties1) {
	    this.context = context;
	    this.properties = properties1;
	    this.order = 0;
	    this.start_time = this.context.main_loop.last_time * 0.001;
	    this.time = 0;
	    this.launched = false;
	    this.auto_pause = false;
	    this.paused = false;
	    this.paused_time = 0;
	    this.pause_start = 0;
	    this.particles = [];
	    this.configure_particles(this.properties);
	  }
	
	  ParticleSystem.prototype._get_max_path_time = function() {
	    var max_time, sqrt;
	    if (this.accel) {
	      sqrt = Math.sqrt(Math.pow(this.speed, 2) + 2 * this.accel * this.max_length);
	      max_time = Math.abs(Math.max(-this.speed + sqrt, -this.speed(-sqrt)) / this.accel);
	    } else {
	      max_time = Math.abs(this.max_length / this.speed);
	    }
	    return max_time;
	  };
	
	  ParticleSystem.prototype.set_new_flow_speed_and_freq = function(new_speed, new_freq) {
	    var new_freq_is_bigger, new_speed_is_smaller;
	    if (new_speed == null) {
	      new_speed = this.speed;
	    }
	    if (new_freq == null) {
	      new_freq = this.freq;
	    }
	    new_speed_is_smaller = new_speed < this.speed;
	    new_freq_is_bigger = new_freq > this.freq;
	    if (new_speed_is_smaller) {
	      this._get_max_path_time();
	    }
	    if (new_speed_is_smaller || new_freq_is_bigger) {
	      this._add_particles();
	    }
	    return this.time_offset = 1 / this.freq;
	  };
	
	  ParticleSystem.prototype._add_particles = function() {
	    var i, j, number_of_particles, p, ref1, results;
	    number_of_particles = Math.ceil(this.max_time / this.time_offset);
	    i = 0;
	    results = [];
	    for (p = j = 0, ref1 = Math.max(number_of_particles - this.particles.length, 0); 0 <= ref1 ? j < ref1 : j > ref1; p = 0 <= ref1 ? ++j : --j) {
	      this.particles.push({
	        'index': i,
	        'time_offset': -i * this.time_offset,
	        'particle_system': this,
	        'used_clones': [],
	        'random_n': Math.random()
	      });
	      results.push(i += 1);
	    }
	    return results;
	  };
	
	  ParticleSystem.prototype._basic_curve_conf = function() {
	    var basic_formula, p_scn, ref1, ref2, ref3, t_scn, track;
	    basic_formula = function(ob, position) {
	      return vec3.copy(ob.position, position);
	    };
	    if (ref1 = !'tracker_scene', indexOf.call(this.properties, ref1) >= 0) {
	      this.properties.tracker_scene = 'Scene';
	    }
	    this.tracker_scene = t_scn = this.context.scenes[this.properties.tracker_scene];
	    if (!t_scn) {
	      return console.error('Error: no scene found "' + this.properties.tracker_scene + '" for tracker "' + this.properties.tracker + '"');
	    }
	    this.tracker = t_scn.parents[this.properties.tracker];
	    if (!this.tracker) {
	      return console.error('Error: no tracker found "' + this.properties.tracker + '"');
	    }
	    t_scn.active_particle_systems.push(this);
	    if (ref2 = !'particle_scene', indexOf.call(this.properties, ref2) >= 0) {
	      this.properties.particle_scene = 'Scene';
	    }
	    this.particle_scene = p_scn = this.context.scenes[this.properties.particle_scene];
	    if (!p_scn) {
	      return console.error('Error: no scene found "' + this.properties.particle_scene + '" for particle "' + this.properties.particle + '"');
	    }
	    this.particle = p_scn.parents[this.properties.particle];
	    if (!this.particle) {
	      return console.error('Error: no particle found "' + this.properties.particle + '" for tracker "' + this.properties.tracker + '"');
	    }
	    if (this.particle.type === 'MESH' && !this.particle.data) {
	      p_scn.loader.load_mesh_data(this.particle);
	    }
	    if (ref3 = !'unused_clones', indexOf.call(this.particle, ref3) >= 0) {
	      this.particle.unused_clones = [];
	    }
	    this.speed = this.properties.speed;
	    this.accel = 0;
	    if (indexOf.call(this.properties, 'accel') >= 0) {
	      this.accel = this.properties.accel;
	    }
	    this.start_time = main_loop.last_time * 0.001;
	    track = this.track = Track(this.tracker);
	    if (indexOf.call(this.properties, 'auto_pause') >= 0) {
	      this.last_tracker_position = vec3.copy([], this.tracker.position);
	      this.auto_pause = this.properties.auto_pause;
	    }
	    if (indexOf.call(this.properties, 'formula') >= 0 && (this.properties.formula != null)) {
	      this.formula = this.properties.formula;
	    } else {
	      this.formula = basic_formula;
	    }
	    this.max_length = this.track.get_max_path_length();
	    this.max_time = this._get_max_path_time();
	    this._delete_particles();
	    this.init_space = 0;
	    if (this.speed < 0) {
	      return this.init_space = this.max_length;
	    }
	  };
	
	  ParticleSystem.prototype.configure_particles = function(properties) {
	    properties = this.properties = properties || this.properties;
	    if (properties['type'] === 'follow' || properties['type'] === FOLLOW) {
	      this.type = FOLLOW;
	      this._basic_curve_conf();
	      this.particles = [
	        {
	          'index': 0,
	          'particle_system': this,
	          'used_clones': [this.particle]
	        }
	      ];
	    }
	    if (properties['type'] === 'flow' || properties['type'] === FLOW) {
	      this.type = FLOW;
	      this._basic_curve_conf();
	      this.freq = properties.freq;
	      if (properties['fill']) {
	        this.fill = true;
	      }
	      this.time_offset = 1 / this.freq;
	      this.sync_time = this.max_time + (this.time_offset - this.max_time % this.time_offset);
	      this._add_particles();
	    }
	    return this._eval();
	  };
	
	  ParticleSystem.prototype._delete_particles = function() {
	    var c, j, k, len, len1, p, ref1, ref2;
	    ref1 = this.particles;
	    for (j = 0, len = ref1.length; j < len; j++) {
	      p = ref1[j];
	      ref2 = p.used_clones;
	      for (k = 0, len1 = ref2.length; k < len1; k++) {
	        c = ref2[k];
	        c.visible = false;
	        this.particle.unused_clones.push(c);
	      }
	    }
	    return this.particles = [];
	  };
	
	  ParticleSystem.prototype._add_clones_to_particle = function(needed_clones, p) {
	    var c, j, k, n_clones_to_add, new_clon, original, ref1, ref2, results, results1, tracker_scene, unused_clon;
	    n_clones_to_add = needed_clones - p.used_clones.length;
	    if (n_clones_to_add < 0) {
	      results = [];
	      for (c = j = 0, ref1 = -n_clones_to_add; 0 <= ref1 ? j < ref1 : j > ref1; c = 0 <= ref1 ? ++j : --j) {
	        unused_clon = p.used_clones.pop();
	        unused_clon.visible = false;
	        results.push(this.particle.unused_clones.push(unused_clon));
	      }
	      return results;
	    } else {
	      original = this.particle;
	      tracker_scene = this.tracker_scene;
	      ({
	        create_new_clon: function() {
	          var is_static, new_clon;
	          is_static = original["static"];
	          original["static"] = false;
	          new_clon = original.clone(tracker_scene);
	          original["static"] = is_static;
	          p.used_clones.push(new_clon);
	          return new_clon;
	        }
	      });
	      results1 = [];
	      for (c = k = 0, ref2 = n_clones_to_add; 0 <= ref2 ? k < ref2 : k > ref2; c = 0 <= ref2 ? ++k : --k) {
	        if (original.unused_clones.length) {
	          new_clon = original.unused_clones.pop();
	          if (new_clon.scene.name === tracker_scene.name) {
	            p.used_clones.push(new_clon);
	            vec3.copy(new_clon.position, original.position);
	            vec4.copy(new_clon.rotation, original.rotation);
	            vec3.copy(new_clon.scale, original.scale);
	            vec4.copy(new_clon.color, original.color);
	          } else {
	            original.unused_clones.push(new_clon);
	            new_clon = create_new_clon();
	          }
	        } else {
	          new_clon = create_new_clon();
	        }
	        new_clon.random_n = Math.random();
	        new_clon.visible = true;
	        results1.push(new_clon.particle = p);
	      }
	      return results1;
	    }
	  };
	
	  ParticleSystem.prototype.pause = function() {
	    if (!this.paused) {
	      this.paused = true;
	      return this.pause_starts = main_loop.last_time * 0.001 - this.start_time;
	    }
	  };
	
	  ParticleSystem.prototype.play = function() {
	    if (!this.particles.length) {
	      this.configure_particles();
	    }
	    if (this.paused) {
	      this.paused = false;
	      return this.paused_time += main_loop.last_time * 0.001 - this.start_time(-this.pause_starts);
	    }
	  };
	
	  ParticleSystem.prototype.stop = function() {
	    return this._delete_particles();
	  };
	
	  ParticleSystem.prototype.restart = function() {
	    this.configure_particles();
	    this.paused_time = 0;
	    return this.pause_starts = 0;
	  };
	
	  ParticleSystem.prototype.remove = function() {
	    this.stop();
	    return this.tracker_scene.active_particle_systems.splice(this.tracker_scene.active_particle_systems.indexOf(), 1);
	  };
	
	  ParticleSystem.prototype._eval = function() {
	    var direction, fill_offset, i, j, len, n, p, pd, point, point_and_directions, points_and_directions, ref1, results, s, t;
	    if (this.paused) {
	      return;
	    }
	    if (this.auto_pause && (this.time >= this.max_time || this.fill)) {
	      this.pause();
	    }
	    if (!this.paused) {
	      this.time = main_loop.last_time * 0.001 - this.start_time - this.paused_time;
	    }
	    n = Math.ceil(this.time / this.max_time);
	    if (this.type === FLOW) {
	      ref1 = this.particles;
	      results = [];
	      for (j = 0, len = ref1.length; j < len; j++) {
	        p = ref1[j];
	        fill_offset = 0;
	        if (this.fill) {
	          fill_offset = this.max_time;
	        }
	        t = (this.time + p.time_offset + fill_offset) % this.sync_time;
	        s = this.init_space + this.speed * t + 0.5 * this.accel * Math.pow(t, 2);
	        p.space = s;
	        p.time = t;
	        p.index += (n - 1) * this.particles.length;
	        points_and_directions = this.track.get_all_tracked_points(p.space, true);
	        this._add_clones_to_particle(points_and_directions.length, p);
	        i = 0;
	        results.push((function() {
	          var k, len1, results1;
	          results1 = [];
	          for (k = 0, len1 = points_and_directions.length; k < len1; k++) {
	            pd = points_and_directions[k];
	            point = pd[0];
	            direction = pd[1];
	            this.formula(p.used_clones[i], point, direction);
	            results1.push(i += 1);
	          }
	          return results1;
	        }).call(this));
	      }
	      return results;
	    } else if (this.type === FOLLOW) {
	      t = this.time % this.max_time;
	      s = this.init_space + this.speed * t + 0.5 * this.accel * Math.pow(t, 2);
	      p = this.particles[0];
	      p.space = s;
	      p.time = t;
	      p.index = n;
	      point_and_directions = this.track.get_all_tracked_points(p.space, true);
	      if (point_and_directions.length) {
	        p.used_clones[0].visible = true;
	        pd = point_and_directions[0];
	        point = pd[0];
	        direction = pd[1];
	        return this.formula(p.used_clones[0], point, direction);
	      } else {
	        return p.used_clones[0].visible = false;
	      }
	    }
	  };
	
	  return ParticleSystem;
	
	})();
	
	module.exports = {
	  ParticleSystem: ParticleSystem,
	  clear_unused_particle_clones: clear_unused_particle_clones
	};


/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	var Framebuffer, GLRay, MAX_PICK, MIN_PICK, Material, asign_group_and_mesh_id, gl_ray_fs, gl_ray_vs, mat2, mat3, mat4, next_group_id, next_mesh_id, quat, ref, vec2, vec3, vec4;
	
	ref = __webpack_require__(8), mat2 = ref.mat2, mat3 = ref.mat3, mat4 = ref.mat4, vec2 = ref.vec2, vec3 = ref.vec3, vec4 = ref.vec4, quat = ref.quat;
	
	Framebuffer = __webpack_require__(20).Framebuffer;
	
	Material = __webpack_require__(19).Material;
	
	MIN_PICK = new Float32Array([-0.434, -0.126, -0.948]);
	
	MAX_PICK = new Float32Array([0.434, 0.164, 0.931]);
	
	gl_ray_vs = function(max_distance) {
	  var shader;
	  shader = "precision highp float;\nuniform mat4 projection_matrix;\nuniform mat4 model_view_matrix;\nattribute vec3 vertex;\nattribute vec4 vnormal;\nvarying float vardepth;\nvarying float mesh_id;\nvoid main(){\n    vec4 pos = model_view_matrix * vec4(vertex, 1.0);\n    pos.z = min(pos.z, " + (max_distance.toFixed(20)) + ");\n    gl_Position = projection_matrix * pos;\n    mesh_id = vnormal.w;\n    vardepth = -pos.z;\n}";
	  return shader;
	};
	
	gl_ray_fs = function(max_distance) {
	  var shader;
	  shader = "precision highp float;\nvarying float vardepth;\nuniform float mesh_id;\nuniform float group_id;\n\nvoid main(){\n    float depth = vardepth * " + ((255 / max_distance).toFixed(20)) + ";\n    float f = floor(depth);\n    gl_FragColor = vec4(vec3(mesh_id, group_id, f) * " + (1 / 255) + ", depth-f);\n    //gl_FragColor = vec4(vec3(mesh_id, group_id, 0) * " + (1 / 255) + ", 1);\n}";
	  return shader;
	};
	
	next_group_id = 0;
	
	next_mesh_id = 0;
	
	asign_group_and_mesh_id = function(ob) {
	  var id;
	  if (next_group_id === 256) {
	    console.log('ERROR: Max number of meshes exceeded');
	    return;
	  }
	  ob.group_id = next_group_id;
	  ob.mesh_id = next_mesh_id;
	  id = ob.ob_id = (ob.group_id << 8) | ob.mesh_id;
	  if (next_mesh_id === 255) {
	    next_group_id += 1;
	    next_mesh_id = 0;
	  } else {
	    next_mesh_id += 1;
	  }
	  return id;
	};
	
	GLRay = (function() {
	  function GLRay(context, debug_canvas, w, h, max_distance1, render_steps, wait_steps) {
	    this.context = context;
	    this.debug_canvas = debug_canvas;
	    this.w = w != null ? w : 512;
	    this.h = h != null ? h : 256;
	    this.max_distance = max_distance1 != null ? max_distance1 : 10;
	    this.render_steps = render_steps != null ? render_steps : 8;
	    this.wait_steps = wait_steps != null ? wait_steps : 3;
	    this.buffer = new Framebuffer(this.context.render_manager, this.w, this.h, this.context.render_manager.gl.UNSIGNED_BYTE);
	    this.pixels = new Uint8Array(this.w * this.h * 4);
	    this.pixels16 = new Uint16Array(this.pixels.buffer);
	    this.distance = 0;
	    this.step = 0;
	    this.rounds = 0;
	    this.mat = new Material(this.context, 'gl_ray', gl_ray_fs(this.max_distance), [], [], gl_ray_vs(this.max_distance));
	    this.m4 = mat4.create();
	    this.world2cam = mat4.create();
	    this.world2cam_mx = mat4.create();
	    this.cam_pos = vec3.create();
	    this.cam_rot = quat.create();
	    this.last_cam_pos = vec3.create();
	    this.last_cam_rot = quat.create();
	    this.meshes = [];
	    this.sorted_meshes = null;
	    this.mesh_by_id = [];
	    this.debug_x = 0;
	    this.debug_y = 0;
	    return;
	  }
	
	  GLRay.prototype.init = function(scene, camera) {
	    var do_step_callback;
	    this.add_scene(scene);
	    do_step_callback = (function(_this) {
	      return function(scene, frame_duration) {
	        return _this.do_step(scene, camera);
	      };
	    })(this);
	    return scene.post_draw_callbacks.push(do_step_callback);
	  };
	
	  GLRay.prototype.add_scene = function(scene) {
	    var alt, id, j, len, ob, ref1, ref2, results;
	    ref1 = scene.children;
	    results = [];
	    for (j = 0, len = ref1.length; j < len; j++) {
	      ob = ref1[j];
	      if (ob.type === 'MESH') {
	        id = asign_group_and_mesh_id(ob);
	        this.mesh_by_id[id] = ob;
	        if ((ref2 = ob.altmeshes) != null ? ref2.length : void 0) {
	          results.push((function() {
	            var k, len1, ref3, results1;
	            ref3 = ob.altmeshes;
	            results1 = [];
	            for (k = 0, len1 = ref3.length; k < len1; k++) {
	              alt = ref3[k];
	              if (!(alt.mesh_id != null)) {
	                continue;
	              }
	              id = asign_group_and_mesh_id(alt);
	              results1.push(this.mesh_by_id[id] = alt);
	            }
	            return results1;
	          }).call(this));
	        } else {
	          results.push(void 0);
	        }
	      } else {
	        results.push(void 0);
	      }
	    }
	    return results;
	  };
	
	  GLRay.prototype.debug_xy = function(x, y) {
	    x = (x * this.w) | 0;
	    y = ((1 - y) * this.h) | 0;
	    this.debug_x = x;
	    return this.debug_y = y;
	  };
	
	  GLRay.prototype.pick_object = function(x, y, radius) {
	    var cam, coord, coord16, depth, depth_h, depth_l, distance, id, object, point, xf, yf;
	    if (radius == null) {
	      radius = 1;
	    }
	    xf = (x * 2 - 1) * this.inv_proj_x;
	    yf = (y * -2 + 1) * this.inv_proj_y;
	    x = (x * (this.w - 1)) | 0;
	    y = ((1 - y) * (this.h - 1)) | 0;
	    coord = (x + this.w * y) << 2;
	    coord16 = coord >> 1;
	    depth_h = this.pixels[coord + 2];
	    depth_l = this.pixels[coord + 3];
	    id = this.pixels16[coord16];
	    depth = ((depth_h << 8) | depth_l) * this.max_distance * 0.000015318627450980392;
	    if (id === 65535 || depth === 0 || this.rounds <= 1) {
	      radius -= 1;
	      if (radius > 0) {
	        return this.pick_object((x + 1) / this.w, y / this.h) || this.pick_object((x - 1) / this.w, y / this.h) || this.pick_object(x / this.w, (y + 1) / this.h) || this.pick_object(x / this.w, (y - 1) / this.h);
	      }
	      return null;
	    }
	    object = this.mesh_by_id[id];
	    if (!object) {
	      return null;
	    }
	    cam = object.scene.active_camera;
	    point = vec3.create();
	    point[0] = xf * depth;
	    point[1] = yf * depth;
	    point[2] = -depth;
	    vec3.transformQuat(point, point, this.last_cam_rot);
	    vec3.add(point, point, this.last_cam_pos);
	    distance = vec3.distance(point, cam.position);
	    vec3.min(point, point, MAX_PICK);
	    vec3.max(point, point, MIN_PICK);
	    return {
	      object: object,
	      point: point,
	      distance: distance,
	      normal: vec3.clone(point)
	    };
	  };
	
	  GLRay.prototype.do_step = function(scene, camera) {
	    var attr, attr_loc_normal, attr_loc_vertex, bb_high, bb_low, d, data, gl, i, j, k, l, len, len1, len2, m, m4, mat, mesh, mesh2world, mirrors, n, o, old_near, p, part, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, restore_near, sort_function, submesh_idx, world2cam, world2cam_mx, x, y;
	    gl = this.context.render_manager.gl;
	    m4 = this.m4;
	    mat = this.mat;
	    mat.use();
	    attr_loc_vertex = mat.a_vertex;
	    attr_loc_normal = this.mat.attrib_locs.vnormal;
	    world2cam = this.world2cam;
	    world2cam_mx = this.world2cam_mx;
	    this.buffer.enable();
	    restore_near = false;
	    if (this.step === 0) {
	      if (((ref1 = this.pick_object(0.5, 0.5)) != null ? ref1.distance : void 0) < 0.01) {
	        old_near = camera.near_plane;
	        camera.near_plane = 0.00001;
	        camera.recalculate_projection();
	        camera.near_plane = old_near;
	        restore_near = true;
	      }
	      gl.clearColor(1, 1, 1, 1);
	      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
	      mat4.copy(world2cam, this.context.render_manager._world2cam);
	      mat4.copy(world2cam_mx, this.context.render_manager._world2cam_mx);
	      vec3.copy(this.cam_pos, camera.position);
	      quat.copy(this.cam_rot, camera.rotation);
	      this.inv_proj_x = camera.projection_matrix_inv[0];
	      this.inv_proj_y = camera.projection_matrix_inv[5];
	      this.meshes = (function() {
	        var j, len, ref2, results;
	        ref2 = scene.mesh_passes[0];
	        results = [];
	        for (j = 0, len = ref2.length; j < len; j++) {
	          m = ref2[j];
	          if (m.visible && m.physics_type !== 'NO_COLLISION') {
	            results.push(m);
	          }
	        }
	        return results;
	      })();
	      ref2 = scene.mesh_passes[1];
	      for (j = 0, len = ref2.length; j < len; j++) {
	        m = ref2[j];
	        if (m.visible && m.alpha >= alpha_treshold && m.physics_type !== 'NO_COLLISION') {
	          this.meshes.push(m);
	        }
	      }
	    }
	    gl.uniformMatrix4fv(mat.u_projection_matrix, false, camera.projection_matrix);
	    if (restore_near) {
	      camera.recalculate_projection();
	    }
	    this.context.render_manager.change_enabled_attributes(1 | 2);
	    part = (this.meshes.length / this.render_steps | 0) + 1;
	    if (this.step < this.render_steps) {
	      ref3 = this.meshes.slice(this.step * part, (this.step + 1) * part);
	      for (k = 0, len1 = ref3.length; k < len1; k++) {
	        mesh = ref3[k];
	        data = ((ref4 = mesh.last_lod_object) != null ? ref4.data : void 0) || mesh.data;
	        if (data && data.attrib_pointers.length !== 0 && !mesh.culled_in_last_frame) {
	          if ((mat.u_group_id != null) && mat.group_id !== mesh.group_id) {
	            mat.group_id = mesh.group_id;
	            gl.uniform1f(mat.u_group_id, mat.group_id);
	          }
	          if ((mat.u_mesh_id != null) && mat.mesh_id !== mesh.mesh_id) {
	            mat.mesh_id = mesh.mesh_id;
	            gl.uniform1f(mat.u_mesh_id, mat.mesh_id);
	          }
	          mesh2world = mesh.world_matrix;
	          data = ((ref5 = mesh.last_lod_object) != null ? ref5.data : void 0) || mesh.data;
	          for (submesh_idx = l = 0, ref6 = data.vertex_buffers.length; 0 <= ref6 ? l < ref6 : l > ref6; submesh_idx = 0 <= ref6 ? ++l : --l) {
	            gl.bindBuffer(gl.ARRAY_BUFFER, data.vertex_buffers[submesh_idx]);
	            attr = data.attrib_pointers[submesh_idx][0];
	            gl.vertexAttribPointer(attr_loc_vertex, attr[1], attr[2], false, data.stride, attr[3]);
	            attr = data.attrib_pointers[submesh_idx][1];
	            gl.vertexAttribPointer(attr_loc_normal, 4, 5121, false, data.stride, 12);
	            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, data.index_buffers[submesh_idx]);
	            mirrors = mesh.mirrors;
	            if (mirrors & 1) {
	              mat4.multiply(m4, world2cam, mesh2world);
	              gl.uniformMatrix4fv(mat.u_model_view_matrix, false, m4);
	              gl.drawElements(data.draw_method, data.num_indices[submesh_idx], 5123, 0);
	            }
	            if (mirrors & 178) {
	              mat4.multiply(m4, world2cam_mx, mesh2world);
	              gl.uniformMatrix4fv(mat.u_model_view_matrix, false, m4);
	              gl.frontFace(2304);
	              gl.drawElements(data.draw_method, data.num_indices[submesh_idx], 5123, 0);
	              gl.frontFace(2305);
	            }
	          }
	        }
	      }
	    }
	    this.step += 1;
	    if (this.step === this.render_steps + this.wait_steps - 1) {
	      mat = scene.active_camera.world_to_screen_matrix;
	      bb_low = vec4.create();
	      bb_high = vec4.create();
	      ref7 = this.meshes;
	      for (n = 0, len2 = ref7.length; n < len2; n++) {
	        mesh = ref7[n];
	        if (mesh.bounding_box_low == null) {
	          mesh.calc_bounding_box();
	        }
	        vec4.transformMat4(bb_low, mesh.bounding_box_low, mat);
	        vec3.scale(bb_low, bb_low, 1 / bb_low[3]);
	        vec4.transformMat4(bb_high, mesh.bounding_box_high, mat);
	        vec3.scale(bb_high, bb_high, 1 / bb_high[3]);
	        mesh.visual_size = vec3.dist(bb_low, bb_high);
	      }
	      sort_function = window.sort_function || (function(a, b) {
	        return a.visual_size - b.visual_size;
	      });
	      this.meshes.sort(sort_function);
	      this.sorted_meshes = this.meshes.slice(0);
	      window.sort_test = function() {
	        var len3, o, ref8, step;
	        ref8 = this.sorted_meshes;
	        for (o = 0, len3 = ref8.length; o < len3; o++) {
	          m = ref8[o];
	          m.visible = false;
	        }
	        step = function() {
	          m = test_meshes.pop();
	          if (m) {
	            m.visible = true;
	            main_loop.reset_timeout();
	            return requestAnimationFrame(step);
	          }
	        };
	        return step();
	      };
	    }
	    if (this.step === 1 && this.sorted_meshes) {
	      this.build_longest_rows();
	    }
	    if (this.step === this.render_steps + this.wait_steps) {
	      gl.readPixels(0, 0, this.w, this.h, gl.RGBA, gl.UNSIGNED_BYTE, this.pixels);
	      this.step = 0;
	      this.rounds += 1;
	      vec3.copy(this.last_cam_pos, this.cam_pos);
	      quat.copy(this.last_cam_rot, this.cam_rot);
	    }
	    if (this.debug_canvas != null) {
	      if (!this.ctx) {
	        this.debug_canvas.width = this.w;
	        this.debug_canvas.height = this.h;
	        this.ctx = this.debug_canvas.getContext('2d', {
	          alpha: false
	        });
	        this.imagedata = this.ctx.createImageData(this.w, this.h);
	      }
	      this.imagedata.data.set(this.pixels);
	      d = this.imagedata.data;
	      i = 3;
	      for (y = o = 0, ref8 = this.h; 0 <= ref8 ? o < ref8 : o > ref8; y = 0 <= ref8 ? ++o : --o) {
	        for (x = p = 0, ref9 = this.w; 0 <= ref9 ? p < ref9 : p > ref9; x = 0 <= ref9 ? ++p : --p) {
	          d[i] = x === this.debug_x || y === this.debug_y ? 0 : 255;
	          i += 4;
	        }
	      }
	      this.ctx.putImageData(this.imagedata, 0, 0);
	    }
	  };
	
	  GLRay.prototype.build_longest_rows = function() {
	    var current_id, i, id, inv_h, inv_w, j, k, pixels16, ref1, ref2, rlen, x, y;
	    this.longest_rows_len = [];
	    this.longest_rows_x = [];
	    this.longest_rows_y = [];
	    inv_w = 1 / (this.w - 1);
	    inv_h = 1 / (this.h - 1);
	    pixels16 = this.pixels16;
	    i = 0;
	    for (y = j = 0, ref1 = this.h; 0 <= ref1 ? j < ref1 : j > ref1; y = 0 <= ref1 ? ++j : --j) {
	      current_id = pixels16[i];
	      rlen = 1;
	      i += 2;
	      for (x = k = 1, ref2 = this.w; 1 <= ref2 ? k < ref2 : k > ref2; x = 1 <= ref2 ? ++k : --k) {
	        id = pixels16[i];
	        if (current_id === id) {
	          rlen += 1;
	        } else {
	          if (rlen > (this.longest_rows_len[current_id] | 0)) {
	            this.longest_rows_len[current_id] = rlen;
	            this.longest_rows_x[current_id] = (x - (rlen >> 1)) * inv_w;
	            this.longest_rows_y[current_id] = 1 - (y * inv_h);
	          }
	          current_id = id;
	          rlen = 1;
	        }
	        i += 2;
	      }
	    }
	  };
	
	  GLRay.prototype.debug_random = function() {
	    var i, j, pick;
	    for (i = j = 0; j < 1000; i = ++j) {
	      pick = null;
	      while (pick === null) {
	        pick = this.pick_object(Math.random(), Math.random());
	      }
	    }
	    return pick;
	  };
	
	  return GLRay;
	
	})();
	
	module.exports = {
	  GLRay: GLRay
	};


/***/ },
/* 40 */
/***/ function(module, exports) {

	var LogicBlock;
	
	LogicBlock = (function() {
	  function LogicBlock(context, scene_name) {
	    this.context = context;
	    this.context.on_scene_ready(scene_name, (function(_this) {
	      return function() {
	        return _this.init(_this.context.scenes[scene_name]);
	      };
	    })(this));
	    if (this.tick != null) {
	      this.context.on_scene_ready(scene_name, (function(_this) {
	        return function() {
	          return _this.context.scenes[scene_name].logic_ticks.push(_this.tick.bind(_this));
	        };
	      })(this));
	    }
	  }
	
	  LogicBlock.prototype.init = function(scene) {
	    this.scene = scene;
	  };
	
	  return LogicBlock;
	
	})();
	
	module.exports = {
	  LogicBlock: LogicBlock
	};


/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	var DragGesture, LogicBlock, PinchGesture, RotationGesture, TouchGesturesOver, axis_objet_mapper, curve_closest_point, digital_to_axes, mat2, mat3, mat4, phy, pointer_over, quat, ref, trackball_rotation, vec2, vec3, vec4,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty,
	  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };
	
	ref = __webpack_require__(8), mat2 = ref.mat2, mat3 = ref.mat3, mat4 = ref.mat4, vec2 = ref.vec2, vec3 = ref.vec3, vec4 = ref.vec4, quat = ref.quat;
	
	phy = __webpack_require__(24);
	
	LogicBlock = __webpack_require__(40).LogicBlock;
	
	TouchGesturesOver = (function(superClass) {
	  extend(TouchGesturesOver, superClass);
	
	  function TouchGesturesOver() {
	    return TouchGesturesOver.__super__.constructor.apply(this, arguments);
	  }
	
	  TouchGesturesOver.prototype.init = function(scene1) {
	    this.scene = scene1;
	    this.hits = {};
	    return this.hits_by_touch_id = {};
	  };
	
	  TouchGesturesOver.prototype["eval"] = function(int_mask) {
	    var angular_velocity, cam, cam_pos, cam_view, fingers, height, hit, i, id, len, linear_velocity, new_touch_events, new_touches, ob, ob_name, ob_pos, obhit, output, pinch, pos, rayto, ref1, ref10, ref11, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, rel_pinch, rel_pos, rel_rot, rot, tid, touch, touch_events, touch_events_3D, touch_ids, width, x, y;
	    new_touches = this.context.events.get_touch_events();
	    touch_ids = [];
	    cam = this.scene.active_camera;
	    ref1 = this.context.canvas_rect, width = ref1.width, height = ref1.height;
	    cam_pos = cam.get_world_position();
	    cam_view = [0, 0, -1];
	    vec3.transformQuat(cam_view, cam_view, cam.rotation);
	    for (i = 0, len = new_touches.length; i < len; i++) {
	      touch = new_touches[i];
	      x = touch.x, y = touch.y, id = touch.id;
	      touch_ids.push(id + '');
	      x = x / width;
	      y = y / height;
	      rayto = cam.get_ray_direction(x, y);
	      hit = phy.ray_intersect_body_absolute(this.scene, cam_pos, rayto, int_mask);
	      ob_name = this.hits_by_touch_id[id];
	      if (hit != null) {
	        ob = hit[0].owner;
	        ob_pos = ob.position;
	        ob_name = ob_name || hit[0].owner.name;
	        touch.hit = hit;
	      }
	      if (ob_name != null) {
	        obhit = this.hits[ob_name] = this.hits[ob_name] || {
	          touch_events: {},
	          init_ratio: null,
	          pinch_gesture: new PinchGesture(this.context, this.scene.name),
	          rot_gesture: new RotationGesture(this.context, this.scene.name),
	          drag_gesture: new DragGesture(this.context, this.scene.name),
	          ob: ob
	        };
	        if (obhit.init_ratio == null) {
	          obhit.init_ratio = obhit.init_ratio || vec3.len(vec3.sub([], obhit.ob.position, cam_pos)) / vec3.len(vec3.sub([], rayto, cam_pos));
	        }
	        touch.world_position = vec3.scale([], rayto, obhit.init_ratio);
	        obhit.touch_events[id] = touch;
	        this.hits_by_touch_id[id] = ob_name;
	      }
	    }
	    ref2 = this.hits_by_touch_id;
	    for (id in ref2) {
	      ob_name = ref2[id];
	      if (indexOf.call(touch_ids, id) < 0 && ob_name) {
	        this.hits_by_touch_id[id] = null;
	        new_touch_events = {};
	        ref3 = this.hits[ob_name].touch_events;
	        for (tid in ref3) {
	          touch = ref3[tid];
	          if (tid !== id) {
	            new_touch_events[tid] = touch;
	          }
	        }
	        this.hits[ob_name].touch_events = new_touch_events;
	      }
	    }
	    ref4 = this.hits;
	    for (ob_name in ref4) {
	      hit = ref4[ob_name];
	      if (!Object.keys(hit.touch_events).length) {
	        this.hits[ob_name].init_ratio = null;
	      }
	    }
	    output = {};
	    ref5 = this.hits;
	    for (ob_name in ref5) {
	      hit = ref5[ob_name];
	      touch_events = [];
	      fingers = Object.keys(hit.touch_events);
	      if (fingers.length) {
	        pinch = rot = rel_pinch = rel_rot = 0;
	        touch_events_3D = [];
	        touch_events = [];
	        ref6 = hit.touch_events;
	        for (id in ref6) {
	          touch = ref6[id];
	          touch_events_3D.push({
	            id: touch.id,
	            x: touch.world_position[0],
	            y: touch.world_position[1],
	            z: touch.world_position[2]
	          });
	          touch_events.push(touch);
	        }
	        ref7 = hit.drag_gesture["eval"](touch_events_3D), pos = ref7.pos, rel_pos = ref7.rel_pos, linear_velocity = ref7.linear_velocity;
	        if (fingers.length > 1) {
	          ref8 = hit.pinch_gesture["eval"](touch_events_3D), pinch = ref8.pinch, rel_pinch = ref8.rel_pinch;
	          ref9 = hit.rot_gesture["eval"](touch_events), rot = ref9.rot, rel_rot = ref9.rel_rot, angular_velocity = ref9.angular_velocity;
	        } else {
	          hit.pinch_gesture.init();
	          hit.rot_gesture.init();
	          ref10 = hit.pinch_gesture["eval"](touch_events_3D), pinch = ref10.pinch, rel_pinch = ref10.rel_pinch;
	          ref11 = hit.rot_gesture["eval"](touch_events), rot = ref11.rot, rel_rot = ref11.rel_rot, angular_velocity = ref11.angular_velocity;
	        }
	        output[ob_name] = {
	          pos: pos,
	          rel_pos: rel_pos,
	          linear_velocity: linear_velocity,
	          pinch: pinch,
	          rel_pinch: rel_pinch,
	          rot: rot,
	          rel_rot: rel_rot,
	          angular_velocity: angular_velocity
	        };
	      } else {
	        hit.drag_gesture.init();
	      }
	    }
	    return output;
	  };
	
	  return TouchGesturesOver;
	
	})(LogicBlock);
	
	DragGesture = (function(superClass) {
	  extend(DragGesture, superClass);
	
	  function DragGesture() {
	    return DragGesture.__super__.constructor.apply(this, arguments);
	  }
	
	  DragGesture.prototype.init = function(scene1) {
	    this.scene = scene1;
	    this.pos = [];
	    this.last_pos = null;
	    this.rel_pos = [0, 0, 0];
	    this.id = null;
	    return this.linear_velocity = [0, 0, 0];
	  };
	
	  DragGesture.prototype["eval"] = function(pointer_events) {
	    var frame_duration, i, id, ix, iy, iz, len, linear_velocity, n, new_id, pointer, pos, rel_pos, x, y, z;
	    frame_duration = this.context.main_loop.frame_duration;
	    new_id = '';
	    ix = iy = iz = 0;
	    for (i = 0, len = pointer_events.length; i < len; i++) {
	      pointer = pointer_events[i];
	      id = pointer.id, x = pointer.x, y = pointer.y, z = pointer.z;
	      new_id += id + '_';
	      ix += x;
	      iy += y;
	      iz += z;
	    }
	    n = pointer_events.length;
	    ix /= n;
	    iy /= n;
	    iz /= n;
	    if (new_id !== this.id) {
	      this.init();
	    }
	    this.id = new_id;
	    pos = this.pos;
	    pos[0] = ix;
	    pos[1] = iy;
	    pos[2] = iz || 0;
	    linear_velocity = vec3.scale(this.linear_velocity, this.rel_pos, 1 / frame_duration);
	    this.last_pos = this.last_pos != null ? this.last_pos : pos;
	    rel_pos = vec3.sub(this.rel_pos, pos, this.last_pos);
	    this.last_pos = [ix, iy, iz];
	    return {
	      pos: pos,
	      rel_pos: rel_pos,
	      linear_velocity: linear_velocity
	    };
	  };
	
	  return DragGesture;
	
	})(LogicBlock);
	
	PinchGesture = (function(superClass) {
	  extend(PinchGesture, superClass);
	
	  function PinchGesture() {
	    return PinchGesture.__super__.constructor.apply(this, arguments);
	  }
	
	  PinchGesture.prototype.init = function() {
	    this.pos1 = [];
	    this.pos2 = [];
	    this.pinch = null;
	    this.id1 = null;
	    return this.id2 = null;
	  };
	
	  PinchGesture.prototype["eval"] = function(pointer_events) {
	    var id1, id2, last_pinch, pinch, pos1, pos2, rel_pinch;
	    if (pointer_events.length < 2) {
	      return {
	        pinch: 0,
	        rel_pinch: 0
	      };
	    }
	    id1 = pointer_events[0].id;
	    id2 = pointer_events[1].id;
	    if (this.id1 !== id1 || this.id2 !== id2) {
	      this.init();
	    }
	    this.id1 = id1;
	    this.id2 = id2;
	    pos1 = this.pos1;
	    pos2 = this.pos2;
	    pos1[0] = pointer_events[0].x;
	    pos1[1] = pointer_events[0].y;
	    pos1[2] = pointer_events[0].z || 0;
	    pos2[0] = pointer_events[1].x;
	    pos2[1] = pointer_events[1].y;
	    pos2[2] = pointer_events[1].z || 0;
	    pinch = vec3.dist(pos1, pos2);
	    last_pinch = this.pinch != null ? this.pinch : pinch;
	    rel_pinch = pinch - last_pinch;
	    this.pinch = pinch;
	    return {
	      pinch: pinch,
	      rel_pinch: rel_pinch
	    };
	  };
	
	  return PinchGesture;
	
	})(LogicBlock);
	
	RotationGesture = (function(superClass) {
	  extend(RotationGesture, superClass);
	
	  function RotationGesture() {
	    return RotationGesture.__super__.constructor.apply(this, arguments);
	  }
	
	  RotationGesture.prototype.init = function() {
	    this.pos1 = [];
	    this.pos2 = [];
	    this.rot = null;
	    this.id1 = null;
	    this.id2 = null;
	    return this.tmpv = this.tmpv || vec2.create();
	  };
	
	  RotationGesture.prototype["eval"] = function(pointer_events) {
	    var angular_velocity, frame_duration, id1, id2, last_rot, pos1, pos2, r, rel_rot, rot, x, y;
	    frame_duration = this.context.main_loop.frame_duration;
	    if (pointer_events.length < 2) {
	      return {
	        rot: 0,
	        rel_rot: 0
	      };
	    }
	    id1 = pointer_events[0].id;
	    id2 = pointer_events[1].id;
	    if (this.id1 !== id1 || this.id2 !== id2) {
	      this.init();
	    }
	    this.id1 = id1;
	    this.id2 = id2;
	    pos1 = this.pos1;
	    pos2 = this.pos2;
	    pos1[0] = pointer_events[0].x;
	    pos1[1] = pointer_events[0].y;
	    pos2[0] = pointer_events[1].x;
	    pos2[1] = pointer_events[1].y;
	    r = this.tmpv;
	    vec2.sub(r, pos2, pos1);
	    x = r[0];
	    y = r[1];
	    if (x > 0) {
	      rot = Math.atan(y / x);
	    } else if (x < 0) {
	      rot = Math.atan(y / x) + Math.PI;
	    } else {
	      if (y > 0) {
	        rot = -Math.PI;
	      } else if (y < 0) {
	        rot = Math.PI;
	      } else {
	        rot = this.rot;
	      }
	    }
	    last_rot = this.rot != null ? this.rot : rot;
	    rel_rot = rot - last_rot;
	    if (this.rel_rot > 0.9 * PI_2) {
	      this.rel_rot = this.rel_rot - PI_2;
	    }
	    this.rot = rot;
	    angular_velocity = vec3.scale([], rel_rot, 1 / frame_duration);
	    return {
	      rot: rot,
	      rel_rot: rel_rot,
	      angular_velocity: angular_velocity
	    };
	  };
	
	  return RotationGesture;
	
	})(LogicBlock);
	
	pointer_over = function(pointer_event, cam, int_mask) {
	  var context, events, height, pos, rayto, ref1, scene, width, x, y;
	  scene = cam.scene;
	  context = cam.scene.context;
	  events = context.events;
	  pos = cam.get_world_position();
	  ref1 = context.canvas_rect, width = ref1.width, height = ref1.height;
	  x = pointer_event.x, y = pointer_event.y;
	  x = x / width;
	  y = y / height;
	  rayto = cam.get_ray_direction(x, y);
	  return phy.ray_intersect_body_absolute(scene, pos, rayto, int_mask);
	};
	
	trackball_rotation = function(pointer_event, scale_x, scale_y, z_influence) {
	  var fdist, fdist2, lastpos, pos, rel, rel_x, rel_y, rot, rot1, rot2, x, y;
	  if (scale_x == null) {
	    scale_x = 1;
	  }
	  if (scale_y == null) {
	    scale_y = 1;
	  }
	  if (z_influence == null) {
	    z_influence = 0.2;
	  }
	  x = pointer_event.x, y = pointer_event.y, rel_x = pointer_event.rel_x, rel_y = pointer_event.rel_y;
	  pos = [x, y];
	  rel = [scale * rel_x, scale * rel_y];
	  fdist = vec2.len(pos);
	  fdist2 = Math.pow(fdist, 2);
	  lastpos = vec2.sub([], pos, rel);
	  if (pos[1] < 0 && lastpos[1] < 0) {
	    vec2.negate(pos, pos);
	    vec2.negate(lastpos, lastpos);
	  }
	  rot1 = Math.atan2(pos[0], pos[1]);
	  rot2 = Math.atan2(lastpos[0], lastpos[1]);
	  rot = rot2 - rot1;
	  return [rel[1] * PI * (1 - pos[1] * z_influence), fdist2 * rot * 4 * z_influence, rel[0] * PI * (1 - pos[0] * z_influence)];
	};
	
	curve_closest_point = function(point, curve) {
	  var p, p_n, point_in_curve, tangent;
	  if (point == null) {
	    point = [0, 0, 0];
	  }
	  p = vec3.clone(point);
	  vec3.sub(p, p, curve.position);
	  curve.rotation[3] *= -1;
	  vec3.transformQuat(p, p, curve.rotation);
	  curve.rotation[3] *= -1;
	  p_n = curve.closest_point(p);
	  point_in_curve = p_n[0];
	  tangent = p_n[1];
	  vec3.transformQuat(point_in_curve, point_in_curve, curve.rotation);
	  vec3.transformQuat(tangent, tangent, curve.rotation);
	  vec3.add(point_in_curve, point_in_curve, curve.position);
	  return [point_in_curve, tangent];
	};
	
	digital_to_axes = function(digital, normalize) {
	  var axis, x, y, z;
	  if (digital == null) {
	    digital = [0, 0, 0, 0, 0, 0];
	  }
	  if (normalize == null) {
	    normalize = false;
	  }
	  x = digital[0] - digital[1];
	  y = digital[2] - digital[3];
	  z = digital[4] - digital[5];
	  axis = [x, y, z];
	  if (normalize) {
	    vec3.normalize(axis, axis);
	  }
	  return axis;
	};
	
	axis_objet_mapper = function(pos, cam, axis) {
	  var a, cpos, m;
	  if (axis == null) {
	    axis = [0, 0, 0];
	  }
	  m = cam.world_matrix;
	  cpos = [m[8], m[9], m[10]];
	  vec3.transformQuat(cpos, cpos, quat.invert([], ob.rotation));
	  a = atan2(cpos[0], cpos[1]);
	  return [-axis[0] * cos(-a) + axis[1] * sin(-a), -axis[1] * cos(a) + axis[0] * sin(a), 0];
	};
	
	module.exports = {
	  TouchGesturesOver: TouchGesturesOver,
	  RotationGesture: RotationGesture,
	  PinchGesture: PinchGesture,
	  pointer_over: pointer_over,
	  trackball_rotation: trackball_rotation,
	  curve_closest_point: curve_closest_point,
	  digital_to_axes: digital_to_axes,
	  axis_objet_mapper: axis_objet_mapper
	};


/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	var LogicBlock, LookAt, RotateAround, SIGNED_AXES, SnapToCurve, mat2, mat3, mat4, quat, ref, vec2, vec3, vec4,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;
	
	ref = __webpack_require__(8), mat2 = ref.mat2, mat3 = ref.mat3, mat4 = ref.mat4, vec2 = ref.vec2, vec3 = ref.vec3, vec4 = ref.vec4, quat = ref.quat;
	
	LogicBlock = __webpack_require__(40).LogicBlock;
	
	SIGNED_AXES = {
	  'X': 1,
	  'Y': 2,
	  'Z': 3,
	  '-X': -1,
	  '-Y': -2,
	  '-Z': -3
	};
	
	RotateAround = (function(superClass) {
	  extend(RotateAround, superClass);
	
	  function RotateAround() {
	    return RotateAround.__super__.constructor.apply(this, arguments);
	  }
	
	  RotateAround.prototype.init = function() {
	    this.invrot = quat.create();
	    return this.obrot = quat.create();
	  };
	
	  RotateAround.prototype["eval"] = function(ob, target, rotation) {
	    var invrot, obrot, pos, rot;
	    if (target == null) {
	      target = [0, 0, 0];
	    }
	    if (rotation == null) {
	      rotation = [0, 0, 0];
	    }
	    invrot = this.invrot, obrot = this.obrot;
	    obrot[0] = 0;
	    obrot[1] = 0;
	    obrot[2] = 0;
	    obrot[3] = 1;
	    quat.rotateX(obrot, obrot, rotation[0]);
	    quat.rotateY(obrot, obrot, rotation[1]);
	    quat.rotateZ(obrot, obrot, rotation[2]);
	    rot = ob.rotation;
	    pos = ob.position;
	    vec3.sub(pos, pos, target);
	    quat.invert(invrot, rot);
	    vec3.transformQuat(pos, pos, invrot);
	    vec3.transformQuat(pos, pos, obrot);
	    vec3.transformQuat(pos, pos, rot);
	    vec3.add(pos, pos, target);
	    return quat.mul(rot, rot, obrot);
	  };
	
	  return RotateAround;
	
	})(LogicBlock);
	
	LookAt = (function(superClass) {
	  extend(LookAt, superClass);
	
	  function LookAt() {
	    return LookAt.__super__.constructor.apply(this, arguments);
	  }
	
	  LookAt.prototype.init = function() {
	    this.tup = [0, 0, 1];
	    this.side = vec3.create();
	    this.front = vec3.create();
	    this.m = mat3.create();
	    return this.q = quat.create();
	  };
	
	  LookAt.prototype["eval"] = function(viewer, target, viewer_up, viewer_front, smooth, frame_duration) {
	    var f, f_idx, front, m, n, origin, q, s, side, tup, u, u_idx;
	    if (target == null) {
	      target = [0, 0, 0];
	    }
	    if (viewer_up == null) {
	      viewer_up = 'Z';
	    }
	    if (viewer_front == null) {
	      viewer_front = '-Y';
	    }
	    if (smooth == null) {
	      smooth = 0;
	    }
	    if (frame_duration == null) {
	      frame_duration = this.context.main_loop.frame_duration;
	    }
	    q = this.q, m = this.m, tup = this.tup, front = this.front, side = this.side;
	    u_idx = SIGNED_AXES[viewer_up];
	    f_idx = SIGNED_AXES[viewer_front];
	    tup[0] = 0;
	    tup[1] = 0;
	    tup[2] = 1;
	    if (u_idx < 0) {
	      vec3.negate(tup, tup);
	    }
	    origin = viewer.get_world_position();
	    u = Math.abs(u_idx) - 1;
	    f = Math.abs(f_idx) - 1;
	    s = 3 - u - f;
	    if (f_idx < 0) {
	      vec3.sub(front, origin, target);
	    } else {
	      vec3.sub(front, target, origin);
	    }
	    if (u === 1 || f === 2) {
	      vec3.cross(side, tup, front);
	    } else {
	      vec3.cross(side, front, tup);
	    }
	    if ([0, 1, 0, 0, 1][2 - f + s]) {
	      vec3.cross(tup, side, front);
	    } else {
	      vec3.cross(tup, front, side);
	    }
	    vec3.normalize(side, side);
	    vec3.normalize(tup, tup);
	    vec3.normalize(front, front);
	    m[u] = tup[0];
	    m[u + 3] = tup[1];
	    m[u + 6] = tup[2];
	    m[f] = front[0];
	    m[f + 3] = front[1];
	    m[f + 6] = front[2];
	    m[s] = side[0];
	    m[s + 3] = side[1];
	    m[s + 6] = side[2];
	    mat3.transpose(m, m);
	    quat.fromMat3(q, m);
	    q[0] = -q[0];
	    q[1] = -q[1];
	    q[2] = -q[2];
	    q[3] = -q[3];
	    n = frame_duration * 0.06;
	    smooth = Math.max(0, 1 - smooth);
	    smooth = 1 - Math.pow(smooth, n) * Math.pow(1 / smooth - 1, n);
	    quat.slerp(viewer.rotation, viewer.rotation, q, smooth);
	    return quat.normalize(viewer.rotation, viewer.rotation);
	  };
	
	  return LookAt;
	
	})(LogicBlock);
	
	SnapToCurve = (function(superClass) {
	  extend(SnapToCurve, superClass);
	
	  function SnapToCurve() {
	    return SnapToCurve.__super__.constructor.apply(this, arguments);
	  }
	
	  SnapToCurve.prototype.init = function() {
	    this.antifilter = vec3.create();
	    this.pre_filtered = vec3.create();
	    this.v_one = [1, 1, 1];
	    return this.look_at = new LookAt(this.context, this.scene.name);
	  };
	
	  SnapToCurve.prototype["eval"] = function(ob, curve, pos_axes, front, up, position_factor, rotation_factor, frame_duration) {
	    var antifilter, filter, n, normal, p_n, point, pre_filtered, smooth, t, target;
	    if (pos_axes == null) {
	      pos_axes = [1, 1, 1];
	    }
	    if (front == null) {
	      front = '-Y';
	    }
	    if (up == null) {
	      up = 'Z';
	    }
	    if (position_factor == null) {
	      position_factor = 1;
	    }
	    if (rotation_factor == null) {
	      rotation_factor = 1;
	    }
	    antifilter = this.antifilter, pre_filtered = this.pre_filtered;
	    if (frame_duration == null) {
	      frame_duration = this.context.main_loop.frame_duration;
	    }
	    filter = pos_axes;
	    vec3.sub(antifilter, this.v_one, filter);
	    vec3.sub(ob.position, ob.position, curve.position);
	    curve.rotation[3] *= -1;
	    vec3.transformQuat(ob.position, ob.position, curve.rotation);
	    curve.rotation[3] *= -1;
	    p_n = curve.closest_point(ob.position, filter);
	    point = p_n[0];
	    vec3.mul(point, point, filter);
	    vec3.mul(pre_filtered, ob.position, antifilter);
	    vec3.add(point, point, pre_filtered);
	    t = position_factor;
	    n = frame_factor;
	    t = 1 - Math.pow(t, n) * Math.pow(1 / t - 1, n);
	    vec3.lerp(ob.position, ob.position, point, t);
	    vec3.transformQuat(ob.position, ob.position, curve.rotation);
	    vec3.add(ob.position, ob.position, curve.position);
	    if (rotation_factor) {
	      normal = p_n[1];
	      vec3.transformQuat(normal, normal, curve.rotation);
	      smooth = 1 - Math.abs(rotation_factor);
	      target = vec3.add(normal, normal, ob.position);
	      return this.look_at(ob, target, [1, 1, 1], front, up, smooth, frame_duration);
	    }
	  };
	
	  return SnapToCurve;
	
	})(LogicBlock);
	
	module.exports = {
	  RotateAround: RotateAround,
	  LookAt: LookAt,
	  SnapToCurve: SnapToCurve
	};


/***/ }
/******/ ])
});
;
//# sourceMappingURL=data:application/json;base64,